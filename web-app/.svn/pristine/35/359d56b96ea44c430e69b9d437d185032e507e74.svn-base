package com.forestar.upload;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.forestar.core.Config;
import com.forestar.core.exception.ServiceException;
import com.forestar.core.session.SessionFactory;
import com.forestar.data.general.QueryFilter;
import com.forestar.data.general.RowBase;
import com.forestar.data.service.BaseService;
import com.forestar.joint.resouces.model.UserDataModel;
import com.forestar.safe.login.LoginBase;
import com.forestar.safe.controller.BaseController;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

@Controller
public class UploadController  extends BaseController {
	public final static String QUEUE_NAME="LDGX.TransformTasks";
	static boolean   flag = false;  
	private static Timer timer = null;
	@Autowired
	BaseService baseDataService;
	public List<RowBase> list = null;
	@RequestMapping(value = "/getfile.do")
	public void  getFile(@RequestParam(value = "file", required = false) MultipartFile file,
			@RequestParam(value = "checkPoints", required = false) String checkPoints,HttpServletRequest request,HttpServletResponse res,HttpSession session){
		 JSONObject objec = new JSONObject();
		 JSONArray classObject=new JSONArray();
		 String name="";
		 String str="";
		  if (!file.isEmpty()) { 
		      try { 
		        // 文件保存路径 
		        /*String filePath = request.getSession().getServletContext().getRealPath("/") + "upload/"
		            + file.getOriginalFilename();*/ 
		        String filePath =Config.getValue("filePath")+"/"+ file.getOriginalFilename();
		        String filePath1= filePath.replaceAll("\\\\", "/");
		        name=file.getOriginalFilename(); 
		        // 转存文件 
		        file.transferTo(new File(filePath1));
		        objec.put("filePath", filePath1);
		        UUID uuid = UUID.randomUUID();
		        objec.put("uuid", uuid);
		        //用户id
		        UserDataModel userEntity = (UserDataModel)SessionFactory.getSession().getObject("UserEntity");
		        if(null!=userEntity){
		        	String userId=userEntity.getUserid();
			        objec.put("userId", userId);
		        }else{
		        	objec.put("userId", 4);
		        }
		        if(checkPoints.length()>0&&checkPoints!=null ){
		        	 classObject.add(checkPoints);
//		        	String temp=checkPoints
					  objec.put("controlPoints", classObject);
				  }
		        String str_=objec.toString().replaceAll("\\\\", "");
		        String str1=str_.replace("[\"{", "[{");
		        str=str1.replaceAll("\"]", "]");
		        System.out.println(str);
		        Producer(str,uuid,res);
//		        OutputData(list, res);
		      } catch (Exception e) { 
		        e.printStackTrace(); 
		      } 
		      
		  }
//		  return "/index";
	}
	public  void Producer(String string, UUID uuid, HttpServletResponse res) throws IOException, TimeoutException, InterruptedException {
	        //创建连接工厂
	        ConnectionFactory factory = new ConnectionFactory();
	        //设置RabbitMQ相关信息
	        factory.setHost("localhost");
	        factory.setUsername("dlwy");
	        factory.setPassword("dlwy");	
	        factory.setPort(5672);
	        //创建一个新的连接
	        Connection connection = factory.newConnection();
	        //创建一个通道
	        Channel channel = connection.createChannel();
	        //  声明一个队列        
	        channel.queueDeclare(QUEUE_NAME, false, false, false, null);
	        String message = string;
	        //发送消息到队列中
	        channel.basicPublish("", QUEUE_NAME, null, message.getBytes("UTF-8"));
	        System.out.println("Producer Send +'" + message + "'");
	        //关闭通道和连接
	        channel.close();
	        connection.close();
	        //查询处理状态
	        queryState(uuid,res);
	    }
	private void queryState(UUID uuid, HttpServletResponse res) throws InterruptedException {
		// TODO Auto-generated method stub
		boolean sucess = true;
		QueryFilter filter = new QueryFilter();
		filter.setWhereString("C_UUID='"+uuid+"'");
		String tableName="FS_USERGISDATA_CATALOG";
		doQuery(tableName,filter,res);
	}
	private void doQuery(String tableName, QueryFilter filter, HttpServletResponse res) throws InterruptedException {
		try {
			Thread.sleep(2000);
			list= baseDataService.getEntityList(tableName, filter);
			OutputData(list, res);
		} catch (ServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		return list;
	}
	/*public void doQuery(final String tableName, final QueryFilter filter,final HttpServletResponse res) { 
        TimerTask task = new TimerTask() {  
            public void run() {  
            	try {
					list= baseDataService.getEntityList(tableName, filter);
					if(list.size()>0&&list.get(0).getOriginalObjects().get("STATE")=="2"){
						flag=true;
						timer.cancel();
						System.out.println("cancle !!!"); 
//						OutputData(list, res);
					}
				} catch (ServiceException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                System.out.println("Hello !!!");  
            }
        };  
        timer = new Timer();  
        long delay = 5;  
        long intevalPeriod = 5 * 1000;  
        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  
    } */
	public void sucessFunc(){
		//TODO do something 
	}
}
