/**
 * Licensed to Jasig under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Jasig licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a
 * copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package com.forestar.cas.client.ext;

import org.jasig.cas.client.authentication.DefaultGatewayResolverImpl;
import org.jasig.cas.client.authentication.GatewayResolver;
import org.jasig.cas.client.util.AbstractCasFilter;
import org.jasig.cas.client.util.CommonUtils;
import org.jasig.cas.client.validation.Assertion;

import com.alibaba.fastjson.JSONObject;

import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;

/**
 *
 * @author SY
 */
public class MulAuthenticationFilter extends AbstractCasFilter {

    /**
     * The URL to the CAS Server login.
     */
    private String casServerLoginUrl;

    /**
     * Whether to send the renew request or not.
     */
    private boolean renew = false;

    /**
     * Whether to send the gateway request or not.
     */
    private boolean gateway = false;
    
    private GatewayResolver gatewayStorage = new DefaultGatewayResolverImpl();
    
    //ajax请求不通过的提示信息
    private static final String  AJAX_NOAUTH_ALERT = "0";
    
    private static final String  ILLEGAL_TGT = "{\"status\":\"0\",\"msg\":\"TGT timeout or illegal!\"}";
    
    private static final String  ILLEGAL_PARAM = "{\"status\":\"0\",\"msg\":\"username and password must have!\"}";
    
    private static final String LOGOUT = "logout";
    
    private String casServerUrl;
    
    private boolean isAjaxRequest(HttpServletRequest request){  
        String header = request.getHeader("X-Requested-With");  
        boolean isAjax = "XMLHttpRequest".equals(header) ? true:false;  
        return isAjax;  
    }  
    
    private boolean isNullOrEmpty(String str){
    	return str == null || "".equals(str);
    }
    
    private TGTMappingStorage tgtStorage = new TGTMappingStorage();
    
    protected void initInternal(final FilterConfig filterConfig) throws ServletException {
        if (!isIgnoreInitConfiguration()) {
            super.initInternal(filterConfig);
            setCasServerLoginUrl(getPropertyFromInitParams(filterConfig, "casServerLoginUrl", null));
            log.trace("Loaded CasServerLoginUrl parameter: " + this.casServerLoginUrl);
            setRenew(parseBoolean(getPropertyFromInitParams(filterConfig, "renew", "false")));
            log.trace("Loaded renew parameter: " + this.renew);
            setGateway(parseBoolean(getPropertyFromInitParams(filterConfig, "gateway", "false")));
            log.trace("Loaded gateway parameter: " + this.gateway);
            setCasServerUrl(getPropertyFromInitParams(filterConfig, "casServerUrl", null));
            final String gatewayStorageClass = getPropertyFromInitParams(filterConfig, "gatewayStorageClass", null);

            if (gatewayStorageClass != null) {
                try {
                    this.gatewayStorage = (GatewayResolver) Class.forName(gatewayStorageClass).newInstance();
                } catch (final Exception e) {
                    log.error(e,e);
                    throw new ServletException(e);
                }
            }
        }
    }

    public void init() {
        super.init();
        CommonUtils.assertNotNull(this.casServerLoginUrl, "casServerLoginUrl cannot be null.");
    }
    

    public final void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse, final FilterChain filterChain) throws IOException, ServletException {
        final HttpServletRequest request = (HttpServletRequest) servletRequest;
        final HttpServletResponse response = (HttpServletResponse) servletResponse;
        String requestTerminal = request.getParameter("requestTerminal");
        if("MOBILE".equalsIgnoreCase(requestTerminal) || "CS".equals(requestTerminal)){
        	String tgt = request.getParameter("TGT");
        	if(isNullOrEmpty(tgt)){
        	  String username = request.getParameter("username");
        	  String password = request.getParameter("password");
        	  if(isNullOrEmpty(username) || isNullOrEmpty(password)){
        		  response.getWriter().print(ILLEGAL_PARAM);
        	  }else{
        		 String responseTxt =  CasClientUtil.getTicketGrantingTicket(this.casServerUrl+"/v1/tickets", username, password);
        		 JSONObject jsonObject = JSONObject.parseObject(responseTxt);
        		 String status = jsonObject.getString("status");
        		 if("1".equals(status)){
        			 tgtStorage.addByTGT(jsonObject.getString("tgt"));
        		 }
        		 response.getWriter().print(responseTxt);
        	  }
        	}else{
        		String logout = request.getParameter("opt");
        		if(LOGOUT.equals(logout)){
        			tgtStorage.removeByTGT(tgt);
        			CasClientUtil.logout(this.casServerUrl+"/logout/", tgt);
        		}else{
        			if(tgtStorage.containTGT(tgt)){
            			filterChain.doFilter(request, response);
            		}else{
            			response.getWriter().print(ILLEGAL_TGT);
            		}
        		}
        	}
        	return;
        }
        final HttpSession session = request.getSession(false);
        final Assertion assertion = session != null ? (Assertion) session.getAttribute(CONST_CAS_ASSERTION) : null;
        //是否有session信息
        if (assertion != null) {
            filterChain.doFilter(request, response);
            return;
        }

        final String serviceUrl = constructServiceUrl(request, response);
        final String ticket = CommonUtils.safeGetParameter(request,getArtifactParameterName());
        final boolean wasGatewayed = this.gatewayStorage.hasGatewayedAlready(request, serviceUrl);
        //是否有ServiceTicket
        if (CommonUtils.isNotBlank(ticket) || wasGatewayed) {
            filterChain.doFilter(request, response);
            return;
        }
        
        //如果session信息没有，ST也没有，那么认为需要认证，但是如果请求类型是AJAX请求，则直接给出“未登录或者超时”的提示
        if(isAjaxRequest(request)){
        	log.debug("ajax请求被拦截,session超时或者未登录,返回标识:"+AJAX_NOAUTH_ALERT);
        	response.setStatus(0);
        	return;
        /*	PrintWriter out = response.getWriter();
    		out.print(AJAX_NOAUTH_ALERT);
    		out.flush();
    		out.close();
    		return;*/
        }

        final String modifiedServiceUrl;

        log.debug("no ticket and no assertion found");
        if (this.gateway) {
            log.debug("setting gateway attribute in session");
            modifiedServiceUrl = this.gatewayStorage.storeGatewayInformation(request, serviceUrl);
        } else {
            modifiedServiceUrl = serviceUrl;
        }

        if (log.isDebugEnabled()) {
            log.debug("Constructed service url: " + modifiedServiceUrl);
        }

        final String urlToRedirectTo = CommonUtils.constructRedirectUrl(this.casServerLoginUrl, getServiceParameterName(), modifiedServiceUrl, this.renew, this.gateway);

        if (log.isDebugEnabled()) {
            log.debug("redirecting to \"" + urlToRedirectTo + "\"");
        }

        response.sendRedirect(urlToRedirectTo);
    }

    public final void setRenew(final boolean renew) {
        this.renew = renew;
    }

    public final void setGateway(final boolean gateway) {
        this.gateway = gateway;
    }

    public final void setCasServerLoginUrl(final String casServerLoginUrl) {
        this.casServerLoginUrl = casServerLoginUrl;
    }
    
    public final void setGatewayStorage(final GatewayResolver gatewayStorage) {
    	this.gatewayStorage = gatewayStorage;
    }

	public void setCasServerUrl(String casServerUrl) {
		this.casServerUrl = casServerUrl;
	}
    
    
}
