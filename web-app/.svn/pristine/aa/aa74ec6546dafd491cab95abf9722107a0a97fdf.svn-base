/**
 * 公用的工具方法
 */
define(['config'],function (config) {
    'use strict';
    var c_util = function () { }
    /////////////////////////////继承///////////////////////////
    /**
     * 拷贝继承
     */
    c_util.prototype.extend = function (target, source) {
        for (var key in source) {
            if (source.hasOwnProperty(key)) {
                target[key] = source[key];
            }
        }
        return target;
    }
    /**
     * 构造类继承关系
     * @param {Function} clazz 源类
     * @param {Function} baseClazz 基类
     */
    c_util.prototype.inherits = function (clazz, baseClazz) {
        var clazzPrototype = clazz.prototype;
        function F() { }
        F.prototype = baseClazz.prototype;
        clazz.prototype = new F();

        for (var prop in clazzPrototype) {
            clazz.prototype[prop] = clazzPrototype[prop];
        }
        clazz.prototype.constructor = clazz;
        clazz.superClass = baseClazz;
    }
    ////////////////////////数组///////////////////////////////
    /**
    * 获取最大值
    */
    c_util.prototype.getMax4Array = function (array) {
        if (array && array.length > 0) {
            var max = array[0];
            for (var i = 0; i < array.length; i++) {
                if (array[i] > max) {
                    max = array[i];
                }
            }
            return max;
        }
    };
    /**
    * 获取最小值
    */
    c_util.prototype.getMin4Array = function (array) {
        if (array && array.length > 0) {
            var min = array[0];
            for (var i = 0; i < array.length; i++) {
                if (array[i] < min) {
                    min = array[i];
                }
            }
            return min;
        }
    };
    /**
     * 数组或对象遍历
     * @param {Object|Array} obj
     * @param {Function} cb
     * @param {*} [context]
     */
    c_util.prototype.each = function (obj, cb, context) {
        if (!(obj && cb)) {
            return;
        }
        if (obj.forEach && obj.forEach === nativeForEach) {
            obj.forEach(cb, context);
        }
        else if (obj.length === +obj.length) {
            for (var i = 0, len = obj.length; i < len; i++) {
                cb.call(context, obj[i], i, obj);
            }
        }
        else {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    cb.call(context, obj[key], key, obj);
                }
            }
        }
    }

    /**
     * 数组映射
     * @param {Array} obj
     * @param {Function} cb
     * @param {*} [context]
     * @return {Array}
     */
    c_util.prototype.map = function (obj, cb, context) {
        if (!(obj && cb)) {
            return;
        }
        if (obj.map && obj.map === nativeMap) {
            return obj.map(cb, context);
        }
        else {
            var result = [];
            for (var i = 0, len = obj.length; i < len; i++) {
                result.push(cb.call(context, obj[i], i, obj));
            }
            return result;
        }
    }

    /**
     * @param {Array} obj
     * @param {Function} cb
     * @param {Object} [memo]
     * @param {*} [context]
     * @return {Array}
     */
    c_util.prototype.reduce = function (obj, cb, memo, context) {
        if (!(obj && cb)) {
            return;
        }
        if (obj.reduce && obj.reduce === nativeReduce) {
            return obj.reduce(cb, memo, context);
        }
        else {
            for (var i = 0, len = obj.length; i < len; i++) {
                memo = cb.call(context, memo, obj[i], i, obj);
            }
            return memo;
        }
    }

    /**
     * 数组过滤
     * @param {Array} obj
     * @param {Function} cb
     * @param {*} [context]
     * @return {Array}
     */
    c_util.prototype.filter = function (obj, cb, context) {
        if (!(obj && cb)) {
            return;
        }
        if (obj.filter && obj.filter === nativeFilter) {
            return obj.filter(cb, context);
        }
        else {
            var result = [];
            for (var i = 0, len = obj.length; i < len; i++) {
                if (cb.call(context, obj[i], i, obj)) {
                    result.push(obj[i]);
                }
            }
            return result;
        }
    }
    /**
     * 对于数组对象 排序
     * @param {array} data
     * @param {string} field 排序字段
     */
    c_util.prototype.sortData = function sortData(data, field) {
        data.sort(function (x, y) {
            var z1 = Number(x[field]), z2 = Number(y[field]);
            if (z1 > z2) {
                return -1;
            } else if (z1 < z2) {
                return 1;
            } else {
                return 0;
            }
        });
    }
    ///////////////////////////////////矢量数据解压//////////////////////////
    /**
     * 加压geojson（方案来源 echarts）
     */
    c_util.prototype.decode = function (json) {
        if (!json.UTF8Encoding) {
            return json;
        }
        var encodeScale = json.UTF8Scale;
        if (encodeScale == null) {
            encodeScale = 1024;
        }

        var features = json.features;

        for (var f = 0; f < features.length; f++) {
            var feature = features[f];
            var geometry = feature.geometry;
            if(!geometry.coordinates){
            	continue;
            }
            var coordinates = geometry.coordinates;
            var encodeOffsets = geometry.encodeOffsets;
            for (var c = 0; c < coordinates.length; c++) {
                var coordinate = coordinates[c];

                if (geometry.type === 'Polygon') {
                    coordinates[c] = decodePolygon(
                        coordinate,
                        encodeOffsets[c],
                        encodeScale
                    );
                }
                else if (geometry.type === 'MultiPolygon') {
                    for (var c2 = 0; c2 < coordinate.length; c2++) {
                        var polygon = coordinate[c2];
                        coordinate[c2] = decodePolygon(
                            polygon,
                            encodeOffsets[c][c2],
                            encodeScale
                        );
                    }
                }
            }
        }
        // Has been decoded
        json.UTF8Encoding = false;
        return json;
    }
    /**
     * 内部方法
     * @param {any} coordinate
     * @param {any} encodeOffsets
     * @param {any} encodeScale
     * @returns
     */
    function decodePolygon(coordinate, encodeOffsets, encodeScale) {
        var result = [];
        var prevX = encodeOffsets[0];
        var prevY = encodeOffsets[1];

        for (var i = 0; i < coordinate.length; i += 2) {
            var x = coordinate.charCodeAt(i) - 64;
            var y = coordinate.charCodeAt(i + 1) - 64;
            // ZigZag decoding
            x = (x >> 1) ^ (-(x & 1));
            y = (y >> 1) ^ (-(y & 1));
            // Delta deocding
            x += prevX;
            y += prevY;

            prevX = x;
            prevY = y;
            // Dequantize
            result.push([x / encodeScale, y / encodeScale]);
        }

        return result;
    }
    c_util.prototype.decimal2=function decimal2(value) {
        if(typeof value === 'number'){
            return (Math.round(parseFloat(value)*100)/100).toString();
        }else{
            return value||'--';
        }
    }
    c_util.prototype.getDFM=function getDFM(value){
    	var results = [];
    	var arr = (value+'').split(".");
    	results.push((Number(arr[0])||0));//获取到度
    	var value_arr = parseFloat("0."+arr[1])||0;
    	var value_f = value_arr*60;
    	var arr2 = (value_f+"").split(".");
    	results.push((Number(arr2[0])||0));//获取整数的分
    	var value_arr2 = parseFloat("0."+arr[1])||0;
    	var value_m=value_arr2*60;
    	results.push((Math.round(value_m)||0));//四舍五入取秒
    	return results;
    }
    /**
     * @type {ol.geom.Polygon}
     * */
    c_util.prototype.getArea=function getArea(polygon){
    	var wgs84Sphere = new ol.Sphere(6378137);
    	var sourceProj = new ol.proj.Projection({
            code: "EPSG:" + config.MAP.WKID,
            extent: config.MAP.EXTENT
        });
    	 var area=0;
         var geom = (polygon.clone().transform(
             sourceProj, 'EPSG:4326'));
        var type = geom.getType();
        if(type=="Polygon"){
        	var coordinates = geom.getLinearRing(0).getCoordinates();
            area = Math.abs(wgs84Sphere.geodesicArea(coordinates));
        }else if(type=="MultiPolygon"){
        	var arr = geom.getPolygons();
        	for(var i=0;i<arr.length;i++){
        		var coordinates = arr[i].getLinearRing(0).getCoordinates();
        		area+=Math.abs(wgs84Sphere.geodesicArea(coordinates));
        	}
        }
        var output = (Math.round(((area *0.0015)/15)* 100) / 100)/*+' '+'公顷'*/;
        return output;
    }
    c_util.prototype.validateSession = function(evt){
    	if(evt.status==0){
    		mini.alert("当前用户失效，请重新登录！","温馨提示");
			window.location.href="logout.do";
		}
    }
    c_util.prototype.getLocalDate = function(){
        var date = new Date();
        var year = date.getFullYear();
        var month = date.getMonth()+1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        return year+"-"+month+"-"+day+" "+hours+":"+minutes+":"+seconds;
    }
    return new c_util();
});