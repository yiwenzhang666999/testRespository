/**
 * 加载树形结构
 */
define(["treeHelper", "severZtree",'config','bhdk',"report"], function (treeHelper, severZtree, config, bhdk,report) {
    'use strict';
    var flag = 0;
    var datas = [];
    var thisCode;
    var res;
    var provinceName; // 政区面板省名称
    var cityName; // 县名称
    var setting = { // 控制第一层展开
        expandLevel: 1,
        sort: {
            BHDK: [
                {
                    jb:2,
                    rule:function(tree,arr){
                        if(arr.length>1){
                            arr.sort(function(a,b){
                                if(!a.sort) return -1;
                                if(!b.sort) return 1;
                                return (a.sort.localeCompare(b.sort));
                            });
                        }
                        return arr;
                    }
                },
                {
                	jb:3,
                	rule:function(tree,arr){
                		if(arr.length>1){
                            arr.sort(function(a,b){
                                if(!a.sort) return -1;
                                if(!b.sort) return 1;
                                return (a.sort.localeCompare(b.sort));
                            });
                        }
                        return arr;
                	}
                },
                {
                	jb:4,
                	rule:function(tree,arr){
                		if(arr.length>1){
                            arr.sort(function(a,b){
                                if(!a.sort) return -1;
                                if(!b.sort) return 1;
                                return (a.sort.localeCompare(b.sort));
                            });
                        }
                         
                	}
                }
            ]
        }
    };
    var tree = treeHelper.getTree("zyjg", setting, []);
    function init() {
        var userid = -1;
        if (userObj && userObj.userId) {
            userid = userObj.userId;
        }
        var treeHelper1 = treeHelper;
        getData('FS_BUSINESS_USERBUSLAYERS', "I_USERID = '" + userid + "' And C_APPID = '" + window.appid_ + "'", treeHelper1, 'C_SHENG,C_XIAN,I_LYRORDERID'); // 变化地块 "I_USERID = '" + user_ +"' And C_APPID = '" + appId + "'";
        getData('FS_BUSINESS_USERCUSLAYERS', "I_USERID = '" + userid + "'", treeHelper1, 'I_ID, I_LYRORDERID'); // 业务数据
    }
    /**
     * 查询数据库获取树形结构数据
     * @param  {} tableName
     * @param  {} whereString 查询条件
     * @param  {} treeHelper
     */
    function getData(tableName, whereString, treeHelper, orderString) {
        var queryParam = {};
        queryParam.whereString = whereString;
        queryParam.orderByString = orderString;
        FsService.getEntityList(tableName, queryParam, {
            callback: function (result) {
            	res = result;
                dataProcessing(result, treeHelper, tableName);
            },
            xceptionHandler: function (e) {
            },
        });
    }
    /**
     * 查询数据库后数据处理
     * @param  {} data
     * @param  {} treeHelper
     * @param  {} tableName
     */
    function dataProcessing(data, treeHelper, tableName) {
        flag += 1;
        if (tableName == "FS_BUSINESS_USERBUSLAYERS") { // 变化地块
            var temp1 = {};
            temp1.id = "bhdk";
            temp1.pid = -1;
            temp1.text = "变化地块";
            temp1.showAdd = true;
            temp1.layerName = "变化地块";
            temp1.type = "bhdk";
            temp1.jb = 1;
            temp1.children = [];
            for (var i = 0; i < data.length; i++) {
                var obj1 = data[i].originalObjects;
                if (obj1.C_XIAN == '' || obj1.C_XIAN == null) { // 省
                    var temp2 = {};
                    temp2.id = "bhdk" + obj1.I_ID;
                    temp2.text = obj1.C_SHENGNAME;
                    temp2.sort = obj1.C_SHENG;
                    temp2.children = [];
                    var xianCode = ''; // 记录每一个省的县代码，使其不重复
                    for (var j = 0; j < data.length; j++) {
                        var obj2 = data[j].originalObjects;
                        if (obj1.I_ID == obj2.I_PARID && xianCode != obj2.C_XIAN && obj2.C_DATANAME == null) { // 有子节点
                            var temp3 = {};
                            xianCode = obj2.C_XIAN;
                            temp3.id = "bhdk" + obj2.I_ID;
                            temp3.i_id = obj2.I_ID;
                            temp3.i_pid = obj2.I_PARID;
                            temp3.text = obj2.C_XIANNAME;
                            temp3.sort = obj2.C_XIAN;
                            temp3._data = { xian: obj2.C_XIAN, type: 'bhdk', nd: obj2.C_WORKYEAR };
                            temp3.showDel = false;
                            temp3.xian = xianCode;
                            temp2.children.push(temp3);
                        }
                    }
                    temp1.children.push(temp2);
                }
            }
            // 获取三级节点以下的更多节点,组织新的树形结构
            var oldTreeNode = temp1.children;
            var newTreeNode = [];
            for (var k = 0; k < oldTreeNode.length; k++) {
                var tempNode = oldTreeNode[k].children;
                for (var j = 0; j < tempNode.length; j++) {
                    var i_id = tempNode[j].i_id;
                    var temp = getChildren(i_id, 4, tempNode[j]._data.xian);
                    tempNode[j].children = temp;
                }
                newTreeNode.push(tempNode);
                /**
                 * 递归获取子节点
                 * @param  {} pid
                 */
                function getChildren(i_id, jb, xianCode) {
                    var tempArray = [];
                    for (var i = 0; i < data.length; i++) {
                        var obj = data[i].originalObjects;
                        var obj_pid = obj.I_PARID;
                        if (i_id == obj_pid && xianCode == obj.C_XIAN) {
                            tempArray.push({ id: 'bhdk' + obj.I_ID + "_tb0",sort:obj.C_WORKYEAR,text: obj.C_DATANAME, showMore: true, iconType: (jb == 5 ? 2 : undefined), children: getChildren(obj.I_ID, jb + 1, obj.C_XIAN), selectId: obj.C_XIAN + '_' + obj.C_WORKYEAR, _data: { xian: obj.C_XIAN, type: 'bhdk', layerName: obj.C_XIANNAME + obj.C_DATANAME, isQuery: true, edit: true, nd: obj.C_WORKYEAR } });
                        }
                    }
                    return tempArray;
                }
            }
            datas.push(temp1);
        } else { // 业务数据
            var temp1 = {};
            temp1.id = "ywsj";
            temp1.pid = -1;
            temp1.text = "业务数据";
            temp1.showAdd = true;
            temp1.children = [];
            for (var i = 0; i < data.length; i++) {
                var obj1 = data[i].originalObjects;
                var temp2 = {};
                temp2.id = obj1.I_ID;
                temp2.layerId = obj1.I_ID;
                temp2.text = obj1.C_DATANAME;
                temp2.showDel = true;
                temp2.type = 'z';
                temp2.layerName = '业务数据';
                temp2._data = { edit: false, isQuery: true, layerId: obj1.I_ID, zqCode: obj1.C_SHENG, type: 'ywsj', layerExtent: obj1.C_FULLEXTENT }
                temp1.children.push(temp2);
            }
            datas.push(temp1);
        }
        if (flag == 2) {
            datas.sort(function (a, b) {
                if (a.text == "变化地块") {
                    return -1;
                } else {
                    return 1;
                }
            })
            var tree = treeHelper.getTree("zyjg");
            tree.addNodes(datas[0]);
            tree.addNodes(datas[1]);
            $("[tid='bhdk'] a:first .ck-box").click()
        }
    }
    /**
     * 加载变化地块政区面板
     * @param  {} code 政区编码
     * @param  {} bool 是否需要清除之前数据
     */
    function loadStree(code,bool) {
    	//code为查询参数，不可以为空，否则后台会报错没有做异常处理
    	if(code == null || code == "" || typeof(code) == "undefined" || typeof(code) == undefined)
    		{
    		return;
    		}
    	//将code保存，在回调中使用
    	thisCode = code.toString();
    	if (thisCode.length == 6 && !thisCode.startsWith('2000')) {
    		// 在面板上只显示县
    		var name = queryNameByCode(thisCode); // 获取县的名称
    	    var p_item = $('<a  style="cursor: pointer; font-size: 12px; color: rgb(153, 153, 153); padding:1px 5px;"  class="title" zqcode="'+thisCode+'"  id="bhdk_area_zq">'+name+'</a>');
    	    p_item.on('click',function(){
    			provinceName = queryNameByCode(thisCode.substring(0,2));
    			cityName = queryNameByCode(thisCode.substring(0,4));
    			var node;
				if ($(this).hasClass('xianSelected')) { // 已经添加
					$(this).removeClass('xianSelected');
					node = getTreeNode(thisCode);
					delTreeNode (node);
				} else {
					bhdk.addNewBhdk(this.innerText, thisCode, $("#bhdkYears").val(),provinceName,cityName);
					node = getTreeNode(thisCode);
					if (node) {
						$(this).addClass('xianSelected');
						this.style.color='#999'
					}
				}
				loadTreeHasChecked ();
	        });
    		$("#centent").append(p_item);
    		
    		// 初始化判断县是否已添加
    	    var xianNode = getTreeNode(thisCode);
    	    if (xianNode) {
    	    	$('#bhdk_area_zq').addClass('xianSelected');
    	    }
    	
    	} else {
    		$.ajax({  
    	        type:"GET",  
    	        url:config.publicService+"/ws/rest/LS/search/"+code, 
    	        dataType:"JSON",  
    	        success:function(data){
    	        	if(bool)
    	        		{
    	        		//点击a标签时需要将父级记录，以便返回
    	        		addOrRemove(thisCode);
    	        		//移除p，a标签
    	        		$("#bhdk_area_zq").remove();
    	        		$("#zq_contexts").remove();
    	        		}
    	        	if(data !=null)
            		{
    	        		//初始化p标签
    	        		var itemCode = data.item.code;
    	        		var itemcenter = data.item.center;
    	        		if(itemcenter == "" )
            			{
    	        			itemcenter = "99.47809569035006,33.79135697109885";
            			}
    	        		var itemlevel = data.item.level;
    	        		var itemshape = data.item.shape;
    	        		if(itemshape == "" )
            			{
    	        			itemshape = "null";
            			}
    	        		var p_item = $('<p  style="cursor:pointer;font-size:12px;"  class="title" zqcode="'+itemCode+'" zqcenter="'+itemcenter+'" zqlevel="'+itemlevel+'" zqshape='+itemshape+' id="bhdk_area_zq">'+data.item.name+':</p>');
    	        		p_item.on('click',function(){
    	        			loadStree(itemCode,true);
            	        });
    	        		$("#centent").append(p_item);
    	        		var p_a = $('<p class="context" id="zq_contexts"> </p>');
    	        		$("#centent").append(p_a);
    	        		var zqString = "";
    	        		zqString = '';
    	        		//初始化a标签
    	        		if(data.child)
            			{
    	        			var arr = data.child;
    	        			
    	        			if (thisCode.length == 4) {
    	        				getAddedBhdk(thisCode,arr);
    	        				cityName = data.item.name;
    	        			} else {
    	        				if (thisCode.length == 2) {
    	        					provinceName = data.item.name;
    	        				}
    	        				for(var i=0;i<arr.length;i++)
    		        			{
    		        				var code = arr[i].code;
    		        				var center =arr[i].center;
    		        				var level =arr[i].level;
    		        				var shape =arr[i].shape;
    		        				var a_name = $("<a  style='cursor:pointer;font-size:12px;' >"+arr[i].name+"</a>");
    		        				(function(c,cen,l,s){
    		        					a_name.on('click',function(){
    	        							loadStree(c,true);
    		        					});
    		        				})(code,center,level,shape)
    		        				$("#zq_contexts").append(a_name);
    		        			}
    	        			}
            			}
            		}
    	        },
    	        error: function() {
                
    	        }
    	    });
    	}
    	loadTreeHasChecked();
    }
    /**
     * 加载变化地块政区面板中已选择的地块
     * @param  {} code 政区编码
     * @param  {} bool 是否需要清除之前数据
     */
    function loadTreeHasChecked () {
    	 var tree = treeHelper.getTree("zyjg");
		 var nodes = tree.getCheckedNodes();
		 var shengName;
		 if (nodes.length > 0) {
			if (nodes[0].children.length > 0) {
				$('#loadedBhdk h2').show();
			} else {
				$('#loadedBhdk h2').hide();
			}
			
			$("#loadedBhdkq").remove();
	   		var pq= $("<div id=loadedBhdkq></div>");
	   		$("#loadedBhdk").append(pq);
	   		var provinceCodes = []; // 省级政区代码
	   		for (var i = 1; i < nodes.length; i++) {
	   			if (nodes[i].jb == 2) {
	   				provinceCodes.push(nodes[i].sort);
	   			}
	   		}
	   		provinceCodes.sort();
	   		for (var k = 0; k < provinceCodes.length; k++) {
	   			for (var i = 1; i < nodes.length; i++) {
					 if (nodes[i].jb == 2 && nodes[i].sort == provinceCodes[k]) {
						 shengName = nodes[i].text;
						 var pa_namesheng = $("<div>"+ "<span sheng='"+nodes[i].sort+"'>"+"<i></i>"+nodes[i].text+":</span><p class="+nodes[i].text +">"+"</p>"+"</div>");
		   			 	 $("#loadedBhdkq").append(pa_namesheng);
						 for (var j = 1; j < nodes.length; j++) {
							 if (nodes[j].jb == 3 && nodes[j].xian.startsWith(nodes[i].sort)) {
								 var pa_namexian = $("<a" + " xiancode ='" + nodes[j].xian + "'>" +"<i></i>"+ nodes[j].text + "</a>");
			    				 pa_namexian.on('click',function(){
			    	   				 var node = getTreeNode(this.getAttribute('xiancode'));
			    	   				 delTreeNode(node);
			    	   				 this.remove();
			    	   				 removeZqSelectedClass(this.innerText);
			    	   				 loadTreeHasChecked ();
			    	   			 });
			    	   			 $("."+shengName).append(pa_namexian);
							 }
						 }
					 }
				 }
	   		}
			 $('#loadedBhdkq div span').click(function(e){ // 点击省的删除方法
				var xianNode;
				var a = $(this).parent().find('a');
		 		this.remove(); 
		 		var tree=treeHelper.getTree("zyjg");
		 		var where ={
	    				sheng:this.getAttribute('sheng'),
	    				userid:userObj.userId,
	    				appid:window.appid_
	    		}
		 		$.ajax({
					url:"bhdk/delProvincedatas.do",
					type:"POST",
					async:false,
					data:{data:JSON.stringify({"where":where})},
					success:function(result){
						//删除树节点
						for (var j = 0; j < a.length; j++) {
							a[j].remove();
				 			removeZqSelectedClass($(a[j])[0].innerText);
				 			xianNode = getTreeNode(a[j].getAttribute('xiancode'));
				 			tree.removeNodeById(xianNode.id);
				 			//01.22 删除变化图斑，对于统计报表地方的争取范围进行同步更新
							report.createZqList();
							for(var i=0;i<tree.__data.length;i++){
								if(xianNode.id.indexOf(tree.__data[i].id)>-1){
									bhdk.getChildrenNode(tree.__data[i],xianNode.pid);
								}
							}
			 		    }
						
					},
					error : function(msg){
						
					}
				}); 
			 });
		 } 
    }
    /**
     * 移除政区面板中选中的县的状态
     * @param  {} xianName 县名称
     */
    function removeZqSelectedClass (xianName) {
    	if (userObj.zqCode.length == 6 && !userObj.zqCode.startsWith('2000')) {
    		$('#bhdk_area_zq').removeClass('xianSelected');
    	}
    	var $a = $("#zq_contexts a"); 
    	for (var i = 0; i < $a.length; i++) {
    		if (xianName == $a[i].innerText) {
    			$($a[i]).removeClass('xianSelected');
    		}
    	}
    }
    /**
     * 加载变化地块政区面板中年度选项
     */
    function getYear() {
    	// 获取年度下拉框选项
    	$.ajax({
            url:"bhdk/getYear.do", 
            type:"post",  
            dataType:"JSON", 
            async:false,
            success:function(year){
            	if(typeof year=="number"){
            		for(var i=(year-1);i<(year+5);i++){
    		        	$("#bhdkYears").append("<option>"+i+"</option>");
            		}
            		$('#bhdkYears').change(function (){ // 年度选项增加单击事件，重新刷新政区面板
            			loadStree(thisCode,true);
            		});
            	}else{
            		
            	}
            },
            error:function() {
            	
            }
    	})
    }
    /**
     * 添加移除元素
     * @param  {} code 政区编码
     */
    function addOrRemove(code)
    {
    	//如果br_length=0说明没有有br元素
    	var br_length = $('#clickHistorys w').length;
    	if(br_length==0)
		{
    		//将父级保存为第一个父级元素
	    	var ys = $("#bhdk_area_zq");
	    	var itemCode = ys.attr("zqcode");
	    	var itemcenter = ys.attr("zqcenter");
	    	var itemlevel = ys.attr("zqlevel");
	    	var itemshape = ys.attr("zqshape");
	    	var value = $("#bhdk_area_zq")[0].innerText;
	    	var arr = value.split(":");
	    	var valueStr = arr[0];
    		var p_item = $('<w  style="cursor:pointer;font-size:12px;color:#3d9b00"  class="title position" level="1" zqcode="'+itemCode+'" zqcenter="'+itemcenter+'" zqlevel="'+itemlevel+'" zqshape='+itemshape+' id="'+itemCode+'_zqcode">'+valueStr+'&nbsp;&nbsp;</w>');
    		p_item.on('click',function(){
    			loadStree(itemCode,true);
    		});
    		$("#clickHistorys").append(p_item);
		}else
		{
			//否则有br元素
			isNotBr(br_length,code);
		}
    }
    
    /**
     * 已经有br元素，说明已经有历史记录，在添加历史记录时需要注意移除之前的br
     * @param  {} br_length 
     * @param  {} code 政区编码
     */
    function isNotBr(br_length,code)
    {
    	var thisP = $("#"+code+"_zqcode");
    	if(thisP.length>0)
		{
    		thisP.nextAll().remove();
    		$("#"+code+"_zqcode").remove();
    		var length = $('#clickHistorys w').length;
		}
    	else
		{
    		//重新添加历史记录
    		var ys = $("#bhdk_area_zq");
        	var itemCode = ys.attr("zqcode");
        	var itemcenter = ys.attr("zqcenter");
        	var itemlevel = ys.attr("zqlevel");
        	var itemshape = ys.attr("zqshape");
        	if(document.getElementById(itemCode+"_zqcode"))
    		{
        		$("#"+itemCode+"_zqcode").remove();
    		}
        	var value = $("#bhdk_area_zq")[0].innerText;
        	var arr = value.split(":");
        	var valueStr = arr[0];
    		var p_item = $('<w  style="cursor:pointer;font-size:12px;color: #3d9b00;"  class="title" level="'+(br_length+1)+'" zqcode="'+itemCode+'" zqcenter="'+itemcenter+'" zqlevel="'+itemlevel+'" zqshape='+itemshape+' id="'+itemCode+'_zqcode">'+'<span class="arr" style="display: inline-block;margin: 0px 5px 5px 0;font-size: 12px;color: #3d9b00;">&gt;</span>'+valueStr+'&nbsp;&nbsp;</w>');
    		p_item.on('click',function(){
    			loadStree(itemCode,true);
    		});
    		$("#clickHistorys").append(p_item);
		}
    	
    }
    /**
     * 获取已经添加的变化地块
     * @param  {} zqcode 政区编码
     * @param  {} data 弹出框政区面板数据
     */
    function getAddedBhdk(zqcode, data) {
    	var a_name;
    	var callBack = {
    			callback:function(res){
    					var xianCode;
    					for (var i = 0; i < data.length; i++) {
    						if (res&&res.length>0) {
    							for (var j = 0; j < res.length; j++) {
            						xianCode = res[j].originalObjects.C_XIAN
            						if (xianCode == data[i].code) {
            							a_name = $("<a  style='cursor:pointer;font-size:12px;' class ='xianSelected'>"+data[i].name+"</a>");
            							break;
            						} else {
            							a_name = $("<a  style='cursor:pointer;font-size:12px;' >"+data[i].name+"</a>");
            						}
            					}
    						} else {
    							a_name = $("<a  style='cursor:pointer;font-size:12px;' >"+data[i].name+"</a>");
    						}
    						var code = data[i].code;
	        				var center =data[i].center;
	        				var level =data[i].level;
	        				var shape =data[i].shape;
	        				(function(c,cen,l,s){
	        					a_name.on('click',function(){
	        						var node;
	        						if (this.className == "xianSelected") { // 已经添加
	        							$(this).removeClass('xianSelected');
	        							node = getTreeNode(c);
	        							delTreeNode (node);
	        						} else {
	        							provinceName = queryNameByCode(thisCode.substring(0,2));
	        							bhdk.addNewBhdk(this.innerText, c, $("#bhdkYears").val(),provinceName,cityName);
	        							node = getTreeNode(c);
	        							if (node) {
	        								$(this).addClass('xianSelected');
	        							}
	        						}
	        						loadTreeHasChecked ();
	        					});
	        				})(code,center,level,shape)
	        				$("#zq_contexts").append(a_name);
    						
						}
    			},
    			exceptionHandler:function(err){
    				
    			}
    	};
    	var param = {
    			"selectFields": "C_XIAN,C_XIANNAME",
    			"whereString": "C_XIAN  LIKE '" + zqcode + "%' AND C_WORKYEAR = '" + $("#bhdkYears").val() + "' AND I_USERID = " + userObj.userId + " AND C_APPID = '" + window.appid_ + "'"
    		};
    	FsService.getEntityList("FS_BUSINESS_USERBUSLAYERS", param, callBack);
    }
    /**
     * 根据政区code获取树上某个节点
     * @param  {} br_length 
     * @param  {} code 政区编码
     */
    function getTreeNode (code) {
    	var node = '';
    	var tree = treeHelper.getTree("zyjg");
		var nodes = tree.getCheckedNodes();
		for (var i = 0; i < nodes.length; i++){
			if (nodes[i].xian == code) {
				node = nodes[i]
				break;
			}
		}
		return node;
    }
    /**
     * 根据政区code删除树上某个节点
     * @param  {} node 树节点
     */
    function delTreeNode (node) {
    	var nd="";
    	if (node){
    		for(var i=0;i<node.children.length;i++){
    			nd+=node.children[i]["_data"]["nd"]+"','";
    		}
    		nd=nd.substring(0,nd.length-3);
    		var where ={
    				id:node.pid.replace("bhdk",""), 
    				xian:node["_data"]["xian"],
    				nd:nd,
    				userid:userObj.userId,
    				appid:window.appid_
    		}
        	bhdk.del(where,node.id,node.pid);
    	}
    }
    //根据code查询省name
    function queryNameByCode(code){
    	var name="";
    	$.ajax({  
	        type:"GET",  
	        url:config.publicService+"/ws/rest/LS/search/"+code, 
	        dataType:"JSON",  
	        async:false,
	        success:function(res){
	        	if(res !=null){
	        		name = res.item.name;
	        	}
	        },
			error : function(msg){
				
			}
	    });
    	return name;
    }
    return {
        init: init,
        getYear: getYear,
        loadStree: loadStree
    }
});