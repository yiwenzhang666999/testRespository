/**
 *
 */
define([
    'map','style','treeHelper'
], function (map_,style,treeHelper) {
    'use strict';
    var layer;
    var interaction_draw;
    var stop =false;
    /**
     * 图层画 点、线、面
     * @param {string} type  'Point', 'LineString', 'LinearRing', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon', 'GeometryCollection', 'Circle'.
     * @param {function} callBack
     */
    function draw(type, callBack) {
        var map=map_.getMap();
        if (!layer) {
            layer = map_.getLayerByName("DRAW_LAYER");
        }
        //
        var source = layer.getSource();
        source.clear();
        clear();
        //
        interaction_draw = new ol.interaction.Draw({
            source: source,
            type: type,
            snapTolerance:5,
            style: style.getDefaultStyleFunction()
        /*,
            finishCondition:function(evt){
            	now_coor = evt.coordinate;
            	return !(now_coor[0]===last_coor[0]&&now_coor[1]===last_coor[1]);
            }*/
            
        });
        window.interaction_draw = interaction_draw;
        map.addInteraction(interaction_draw);
        interaction_draw.on('drawend', function (evt) {
        	setTimeout(function(){
        		layer.getSource().clear();
        	},0)
        	if(stop){
        		stop=false;
        		return;
        	}
            map.render();
            map.removeInteraction(interaction_draw);
            interaction_draw=null;
            callBack(evt);
        });
        interaction_draw.on('drawstart',function(evt){
        	//TODO 查询服务和判断逻辑待定
        	if(!window.startTool){
        		return;
        	}
        	var coor=evt.feature.getGeometry().getFirstCoordinate();
        	var data = {
        			X:coor[0],Y:coor[1],
        			userId:userObj.userId
        	}
        	$.ajax({
        		url:"pdsfcj.do",
        		type:"post",
        		data:{jsonStr:JSON.stringify(data)},
        		success:function(res){
        			stop=true;
        			if(res.success){
        				var zqCode = res.code;
        				var layerName = res.layerName;
        				if(getLayerTreeChecked(zqCode,layerName)){
        					stop=false;
        				}else{
        					interaction_draw.finishDrawing();
        					alert("您未勾选"+res.name+"的数据！");
        				}
        			}else{
        				interaction_draw.finishDrawing();
        				alert("您未创建"+res.name+"的数据！");
        			}
        		},
        		error:function(err){
        			console.error(err);
        		}
        		
        	});
        });
    }
    function getLayerTreeChecked(zqCode,layerName){
    	var elements = $(".zs-tree a.btns.selected .data[xian="+zqCode+"]");
    	var tree = treeHelper.getTree("zyjg");
    	var checkedNodes = tree.getCheckedNodes();
    	for(var i=0;i<checkedNodes.length;i++){
    		var item = checkedNodes[i];
    		if(item.xian&&item.xian==zqCode){
    			return 1;
    		}
    	}
    	return 0;
    }
    /**
    * 清除地图交互
    */
    function clear() {
        var ia = map_.getMap().getInteractions().getArray();
        for (var i = 0; i < ia.length; i++) {
            if (ia[i] instanceof ol.interaction.Draw || ia[i] instanceof ol.interaction.Select) {
               /* ia[i].setActive(false)*/
            	map_.getMap().removeInteraction(ia[i]);
            	interaction_draw=null;
            }
        }
    }
   
    /**
     * 移出最后一个绘制点
     * */
    function removeLastPoint(){
    	if(interaction_draw&&interaction_draw.a&&interaction_draw.a&&interaction_draw.a[0].length>1){
    		interaction_draw.removeLastPoint();
    	}else if(interaction_draw&&interaction_draw.sketchCoords_
    			&&interaction_draw.sketchCoords_
    			&&interaction_draw.sketchCoords_[0].length>1){
    		interaction_draw.removeLastPoint();
    	}
    }
    ol.interaction.Draw.prototype.clearOverlay_=function(){
    	this.overlay_.getSource().clear();
    }
    /**
     * 扩展
     * */
    ol.interaction.Draw.prototype.updateSketchFeatures_ = function() {
    	  var sketchFeatures = [];
    	  if (this.sketchFeature_) {
    	    sketchFeatures.push(this.sketchFeature_);
    	  }
    	  if (this.sketchLine_) {
    	    sketchFeatures.push(this.sketchLine_);
    	  }
    	  if (this.sketchPoint_) {
    	    sketchFeatures.push(this.sketchPoint_);
    	  }
    	  if(this.sketchCoords_){
    		  var inflectionPoints = this.getInflectionPoint();
    		  for(var i=0;i<inflectionPoints.length;i++){
    			  sketchFeatures.push(inflectionPoints[i]);
    		  }
    	  }
    	  var overlaySource = this.overlay_.getSource();
    	  overlaySource.clear(true);
    	  overlaySource.addFeatures(sketchFeatures);
    	};
    	/**
    	 * 获取节点
    	 * */
    ol.interaction.Draw.prototype.getInflectionPoint=function(){
    	var coords = [];
    	var sketchCoords = [];
    	if(this.mode_===ol.interaction.Draw.Mode_.POINT){
    		
    	}else if(this.mode_===ol.interaction.Draw.Mode_.LINE_STRING){
    		sketchCoords = this.sketchCoords_;
    	}else if(this.mode_===ol.interaction.Draw.Mode_.POLYGON){
    		sketchCoords = this.sketchCoords_[0];
    	}else if(this.mode_===ol.interaction.Draw.Mode_.CIRCLE){
    		
    	}else{
    		
    	}
  	  	var length = sketchCoords.length;
  	  	for(var z=0;z<length;z++){
  	  		var item = sketchCoords[z];
  	  		if(!coords.isHaveArr(item)){
  	  			coords.push(item);
  	  		}
  	  	}
  	  	var pointFeatureArr = [];
  	  	for(var i=0;i<coords.length;i++){
  	  		var point = new ol.geom.Point(coords[i]);
  	  		var fea = new ol.Feature({geometry:point});
	  	  	var style = new ol.style.Style({
		          image: new ol.style.Circle({
		            radius: 4,
		            stroke: new ol.style.Stroke({
		              color: 'rgba(70,70,70,1)',
		              width: 1
		            }),
		            fill: new ol.style.Fill({
		              color: 'rgba(255,255,255,1)'
		            })
		          })
		        });
	  	  	fea.setStyle(style);
  	  	    pointFeatureArr.push(fea);
  	  	}
  	  return pointFeatureArr;
    }
    //查找数组中是否包含，另一个点数组；
    Array.prototype.isHaveArr = function(arr){
    	for(var i=0;i<this.length;i++){
    		if(this[i].indexOf(arr[0])>0&&this[i].indexOf(arr[1])>0){
    			return true;
    		}
    	}
    	return false;
    }
    ol.geom.GeometryType = {
    		  POINT: 'Point',
    		  LINE_STRING: 'LineString',
    		  LINEAR_RING: 'LinearRing',
    		  POLYGON: 'Polygon',
    		  MULTI_POINT: 'MultiPoint',
    		  MULTI_LINE_STRING: 'MultiLineString',
    		  MULTI_POLYGON: 'MultiPolygon',
    		  GEOMETRY_COLLECTION: 'GeometryCollection',
    		  CIRCLE: 'Circle'
    		};
    return {
        draw:draw,
        removeLastPoint:removeLastPoint,
        clear:clear
    }
});