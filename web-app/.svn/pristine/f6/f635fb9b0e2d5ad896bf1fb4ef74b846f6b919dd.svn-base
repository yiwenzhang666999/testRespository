/**
 * 导入 shape文件
 * 1.先用H5 的FileReader 将文件转为readAsArrayBuffer 在转为 Int8Array
 * 2.用shapefile.js 中的方法进行转换
 */
define(["shapefile","config","layerFactory","treeHelper"], function (shapefile,config,layerFactory,treeHelper) {
	'use strict';
	var layerName="SHAPE_LAYER";
	var allLayers = {};
	//导入的shape数据
	var shapeData=[];
	//弹框的map对象
	var map_;
	var geojsonFormat = new ol.format.GeoJSON();
	var defaultStyle = new ol.style.Style({
          stroke: new ol.style.Stroke({
            color: 'blue',
            width: 3
          }),
          fill: new ol.style.Fill({
            color: 'rgba(0, 0, 255, 0.1)'
          })
        });
	//导入的图层
	var layer_;
	// 校准点图层的source
	var pointSource=new ol.source.Vector();
	//校准点的 图层
	var pointLayer;
	//校准点绘制对象
	var draw;
	//点绘制的计数
	var pointCount=0;
	//new style 当加的点为偶数时 点的颜色变为红色
	//存放点集合 需要传到后台
	var checkPoints=[];
	//临时点对象
	var tempPoint={from:'',to:''};
	//设置投影
    var epsg = "EPSG:" + config.MAP.WKID;
    var projection = new ol.proj.Projection({
        code: epsg,
        extent: config.MAP.EXTENT
    });
    var view = new ol.View({
        center: config.MAP.CENTER,
        zoom: config.MAP.ZOOM,
        maxZoom: config.MAP.MAXZOOM,
        minZoom: config.MAP.MINZOOM,
        projection: projection
    });
    //树对象
    var treeObj = $($(".sec-list.content")[4]);
    var setting = {
    		showCheck : false,
    		callback : {
    			click : function(nodeHtml,node,innerTree){
    				console.log(innerTree.getCheckedNodes());
    			},
    		render : function(nodeHtml,node,innerTree){
    			return nodeHtml;
    		},
    		}
    	};
    var  treeData=[{
    	id:1,
    	text:'测试'
    }];
    var treeHelper = new treeHelper(treeObj,setting,treeData);
    //地图图层集合
    var layerNames=['TIAN_VEC','TIAN_IMG','LDXB','XZQH','LDYX','YNYBYX','SSYX'];
    //初始化方法  绑定事件 创建map 
	function init(){
		$("#import-btn-input").on("change",fileChange);
		moEvent();
        layerCtr();
        //绑定绘制点的事件
        $("#check_point").click(drawPoint);
        //取消绘制点时间
        $("#uncheck_point").click(cancle);
        $(".opa-box .btn-del").click(removePoint);
        //checkbox勾选
        $("#point-check .ck-box").live("click",function(event){
        	event.stopPropagation();
			var tarA = $(this).parents("a");
			var flag;
			if(tarA.hasClass("selected")){
				flag = false;
				tarA.removeClass("selected");
			}else{
				flag = true;
				tarA.addClass("selected");
			}
			tarA.find("input[type=checkbox]").prop("checked", flag);
			$(".zs-tree-box").getNiceScroll().resize();
        });
        //导入图层
        $(".zs-tree .add.ywsj").click(function(){
        	$(".import_pop").show();
        });
        //开始
        $("#zs-btn-start").click(function(){
        	$("#import_map").show();
        	if(!map_){
        		initMap();
        		initLayer();
        	}
        	if(shapeData.length>0){
    			handShapeData();
    		}
        });
        //取消
        $("#zs-btn-cancle").click(function(){
        	$(".import_pop").hide();
        });
        //关闭
        $(".tool-close").click(function(){
        	$("#import_map").hide();
        });
        /**
         * 开始校准的点击事件
         * 用formdata 将上传的zip文件提交到后台
         * 并且将处理后的（字符串） 配准点数据也传到后台
         */
        $(".tool-kspz").click(function(){
        	var tem_=[];
        	for(var i=0;i<checkPoints.length;i++){
        		tem_.push(JSON.stringify(checkPoints[i]));
        	}
        	$("#checkPoints").val(tem_.toString());
        	var formData = new FormData($("#f1")[0]); 
//        	formData.checkPoints=checkPoints;
        	var url="/web-app/getfile.do";
        	 $.ajax({  
                 url: url,  
                 type: 'POST',  
                 data: formData,  
                 async: false,  
                 cache: false,  
                 contentType: false,  
                 processData: false,  
                 success: function (returndata) {  
                     if(returndata){
                    	 treeHelper.appendNode({id:5,text:"test",pid:null});
                    	 alert("上传成功！");
                     }  
                 },  
                 error: function (returndata) {  
                     alert(returndata);  
                 }  
            });  
        });
        //清空
        $(".opa-box .btn-clear").click(clearPoints);
//        $("#point-check a").live("click",removePoint);
//		$("#file").on("change",importZip);
	};
	function initMap(){
		//创建测试 map
		var test_map = new ol.Map({
	        target: 'test_map',
	        view: view
	    });
		map_=test_map;
	};
	function fileChange(){
		   var myFiles = document.getElementById("import-btn-input").files;  
			if(!myFiles){
				return;
			}
			shapeData=[];
			 for (var i = 0, f; f = myFiles[i]; i++) {
			     readFileAsArrayBuffer(f, function(data) {
			    	shapeData.push(data);
//			        var results=sources.read();
//			        var value = JSON.stringify(array, null, '  ');
//			       console.log(value);
			    }, function (e) {
			        console.error(e);
			    });
			 }
		};
		function readFileAsArrayBuffer(file, success, error) {
		    var fr = new FileReader();
		    fr.addEventListener('error', error, false);
		    	fr.addEventListener('loadstart',function(e){
		    	});
		        fr.addEventListener('load', function () {
		            success(this.result);
		        }, false);
		        
		        return fr.readAsArrayBuffer(file);
		    
		};
		function addLayer(geo){
			var geojson={
					UTF8Encoding: false,
					type:"FeatureCollection",
					features:geo,
			} 
			layer_.getSource().clear();
			layer_.getSource().addFeatures((new ol.format.GeoJSON()).readFeatures(geojson));
			/*var source = new ol.source.Vector({
		        features: (new ol.format.GeoJSON()).readFeatures(geojson)
		      });*/
			/* var layer = new ol.layer.Vector({
			        source: source,
			        style: defaultStyle
			      });
			 map.addLayer(layer);*/
		};
		function importZip(){
			 var file = this.files[0];
            window.un = new UnZipArchive(file);
            un.getData( function() {
                var arr = un.getEntries();
                var entries=un.entries;
                getData(entries);
                /*var data=[];
                for(var i=0;i<entries.length;i++){
                	var fileName=entries[i].filename;
                	var final_=fileName.substring(fileName.length-4,fileName.length);
                	if(final_==".dbf"||final_==".shp"){
                		entries[i].getData(new zip.BlobWriter(zip.getMimeType(entries[i].filename)), function(result) {
                			data.push(result);
                         });
                	}
                }*/
                var str = "";
                for(var i=0; i<arr.length; i++ ) {
                    str += "<li>"+arr[i]+"</li>"
                };
                $("#dir").html( str );
                $("#dir li").click(function(e){
//	                	download(this.innerText);
                	un.download(this.innerText);
                });
            });
            function getData(entries){
            	var data=[];
                for(var i=0;i<entries.length;i++){
                	var fileName=entries[i].filename;
                	var final_=fileName.substring(fileName.length-4,fileName.length);
                	if(final_==".shp"){
                		//TODO 这里的entries[i].getData 方法是异步的 所以 需要调两次循环 影像效率 后期需要改为 promise by zzq
                		console.log(Date.parse(new Date()));
                		entries[i].getData(new zip.BlobWriter(zip.getMimeType(entries[i].filename)), function(result) {
                			data.push(result);
                			for(var j=0;j<entries.length;j++){
                				var fileName_=entries[j].filename;
                            	var fina_l=fileName_.substring(fileName_.length-4,fileName_.length);
                            	console.log(data);
                    			console.log(Date.parse(new Date()));
                            	if(fina_l==".dbf"){
                            		entries[j].getData(new zip.BlobWriter(zip.getMimeType(entries[j].fileName_)), function(res) {
                            			data.push(res);
                            			console.log(data);
                            			console.log(Date.parse(new Date()));
                            		});
                            		break;
                            	}
                			}
                         });
//                		break;
                	}
                }
            };
		};
	//初始化加载图层  值加载底图
    function initLayer(){
    	var that=this;
    	//按config图层配置加载图层
        var setLayers = function (con) {
           var layer_p = layerFactory.getLayer(con);
           allLayers[con['TABLENAME']] = layer_p;
           map_.addLayer(layer_p);
           if (con.GROUP) {
               for (var j = 0; j < con.GROUP.length; j++) {
                   var con_c = con.GROUP[j];
                   var layer_c = layerFactory.getLayer(con_c);
                   allLayers[con_c['TABLENAME']] = layer_c;
                   map_.addLayer(layer_c);
               }
           }
       }
      //加载所有图层
        var all_layers =config.LAYER;
        for(var j=0;j<layerNames.length;j++){
        	for (var i = 0; i < all_layers.length; i++) {
        		if(layerNames[j]==all_layers[i].TABLENAME){
        			setLayers(all_layers[i]);
        			continue;
        		}
            }
        }
        //导入的图层
        layer_ = new ol.layer.Vector({
			source: new ol.source.Vector(),
	        style: defaultStyle
	      });
        //校准点图层
        pointLayer = new ol.layer.Vector({
			source: pointSource,
            style: new ol.style.Style({  
                //样式填充  
                fill: new ol.style.Fill({  
                    //填充颜色  
                    color: 'rgba(37,241,239,0.2)'  
                }),  
                //笔触  
                stroke: new ol.style.Stroke({  
                    //笔触颜色  
                    color: '#264df6',  
                    //笔触宽度  
                    width:2  
                }),  
                //图形样式，主要适用于点样式  
                image: new ol.style.Circle({  
                    //半径大小  
                    radius: 7,  
                    //填充  
                    fill: new ol.style.Fill({  
                        //填充颜色  
                        color: '#0099FF'  
                    })  
                })  
            })
	      });
        map_.addLayer(layer_);
        map_.addLayer(pointLayer);
    };
    /**
     * 鼠标事件
     */
    function moEvent() {
        $('.mapType-wrapper-import').mouseenter(function () {
            if ($('.mapType-import').is(":animated")) { return; }
            $('.mapType-import').animate({
                width: '864px',
                backgroundColor: 'rgba(255, 255, 255, .4)',
            }, 0);
            $('.second-import').animate({ right: '105px' }, 0);
            $('.ldxb-import').animate({ right: '201px' }, 0);
            $('.dcfw-import').animate({ right: '297px' }, 0);
            $('.ygyx-import').animate({ right: '393px' }, 0);
        })
        // 鼠标移出右下角地图切换
        $('.mapType-wrapper-import').mouseleave(function () {
            if ($('.mapType-import').is(":animated")) { return; }
            $('.mapType-import').delay('2000').animate({
                width: '110px',
                backgroundColor: 'rgba(255, 255, 255, 0)',
            }, 0);
            $('.second-import').delay('2000').animate({ right: '12px' }, 0);
            $('.ldxb-import,.dcfw-import,.ygyx-import').delay('2000').animate({ right: '20px' }, 0);
        })
    };
    /**
     * 图层控制
     */
    function layerCtr() {
        $(".mapType-wrapper-import .clk").on("click", function () {
            var $target = $(this);
            var bool_all = $target.hasClass("switch");
            var bool_sig = $target.hasClass("single");
            //
            var show_layer = $target.attr("layer");
            var hide_layer = $target.attr("hide");
            //
            var checked = $target.attr("checked");
            if (show_layer) {
                if (bool_all) {        //专题图 全选
                    if (checked) {  //选择
                    	showLayer(show_layer);
                        //处理互斥
                        if (hide_layer) {
                            $.each(hide_layer.split(","), function (k, v) {
                            	hideLayer(v);
                                //处理单选框显示
                                var $only = $("input[layer='" + v + "']");
                                $only.attr("checked",false)
                                $($only.parent().parent()).find("input[class='clk single']").each(function () {
                                    $(this).attr("checked", false);
                                })
                            });
                        }
                        //处理 单选框 组
                        $($target.parent().parent()).find("input[class='clk single']").each(function () {
                            $(this).attr("checked", 'checked');
                        })
                    } else {      //取消
                    	hideLayer(show_layer);
                        //处理 单选框 组
                        $($target.parent().parent()).find("input[class='clk single']").each(function () {
                            $(this).attr("checked", false);
                        })
                    }
                } else if (bool_sig) {  //专题图 单选
                    var all_f = false;
                    if (checked) {//选择
                    	showLayer(show_layer,true);
                        all_f = "checked";
                    } else {
                    	hideLayer(show_layer,true);
                        var $single=$($target.parent().parent().parent()).find("input[class='clk single']");
                        $.each($single,function(){
                            var f_=$(this).attr("checked");
                            if(f_){
                                all_f = "checked";
                            }
                        })
                    }
                    //处理全选按钮   勾选情况
                    var $all_check_s=$($target.parent().parent().parent().parent().parent()).find("input[class='clk switch']")
                    $.each($all_check_s,function () {
                        $(this).attr("checked", all_f);
                        hide_layer=$(this).attr("hide");
                    })
                    //处理互斥
                    if(all_f&&hide_layer){
                        $.each(hide_layer.split(","), function (k, v) {
                        	hideLayer(v);
                            //处理单选框显示
                            var $only = $("input[layer='" + v + "']");
                            $only.attr("checked",false)
                            $($only.parent().parent()).find("input[class='clk single']").each(function () {
                                $(this).attr("checked", false);
                            })
                        });
                    }
                } else {              //底图控制
                	showLayer(show_layer);
                	hideLayer(hide_layer);
                    //页面样式
                    $target.addClass("active");
                    $("div[layer='" + hide_layer + "']").removeClass("active");
                }
            }
        })
    };
    /**
     * 控制图层显示
     * @param {string} tableName 图层标识
     * @param {boolean} bool 标识是单独显示（true）还是按组显示（）
     */
	function showLayer(tableName, bool) {
        if (bool) {
            allLayers[tableName].setVisible(true)
        } else {
            var arr =getLayer4Config(tableName);
            for (var i = 0; i < arr.length; i++) {
                allLayers[arr[i]].setVisible(true)
            }
        }
    }
    /**
     * 控制图层隐藏
     * @param {string} tableName
     * @param {boolean} bool 标识是单独隐藏（true）还是按组隐藏（）
     */
	function hideLayer(tableName, bool) {
        if (bool) {
            allLayers[tableName].setVisible(false)
        } else {
            var arr = getLayer4Config(tableName);
            for (var i = 0; i < arr.length; i++) {
                allLayers[arr[i]].setVisible(false)
            }
        }
    }
	/**
     * 获得对应的配置
     * @param {*} tableName
     * @return {object} param
     */
	function getLayer4Config(tableName) {
        var layers = [];
        var base = config.LAYER;
        for (var i = 0; i < base.length; i++) {
            var item = base[i];
            if (item['TABLENAME'] === tableName) {
                layers.push(tableName);
                if (item['GROUP']) {
                    $(item['GROUP']).each(function (index, v) {
                        layers.push(v['TABLENAME']);
                    })
                }
                break;
            }
        }
        return layers;
    };
    /**
     * 绘制事件 
     * 注意draw 的source 
     * 将画的点放到source 上，source是draw图层的source 图层在map上
     */
    function drawPoint(){
    	//将交互绘图对象赋给draw对象  
        //初始化交互绘图对象  
    	if(!draw){
    		draw = new ol.interaction.Draw({  
                //数据源  
                source: pointSource,  
                //绘制类型  
                type: "Point",  
                //回调函数  
                //Function that is called when a geometry's coordinates are updated  
                geometryFunction: geometryFunction,
                //最大点数  
                maxPoints: 9999  
            });
    	}
        //将draw对象添加到map中，然后就可以进行图形绘制了  
//        map_.removeInteraction(draw);
        map_.addInteraction(draw);  
    };
    /**
     * 将画的点放到图层中
     * 需要根据点的个数 给定颜色  奇数oldStyle 偶数newStyle
     */
    function geometryFunction(coordinates,geo){
    	var newStyle=new ol.style.Style({  
            //图形样式，主要适用于点样式  
            image: new ol.style.Circle({  
                //半径大小  
                radius: 10,  
                //填充  
                fill: new ol.style.Fill({  
                    //填充颜色  
                    color: '#e81818'  
                })  
            }),
    	 text: new ol.style.Text({ //文本样式
    	    font: '14px Calibri,sans-serif',
    	    fill: new ol.style.Fill({
    	      color: '#000'
    	    }),
    	    stroke: new ol.style.Stroke({
    	      color: '#fff',
    	      width: 3
    	    }),
    	  })
        });
    	var oldStyle=new ol.style.Style({  
            //样式填充  
            fill: new ol.style.Fill({  
                //填充颜色  
                color: 'rgba(37,241,239,0.2)'  
            }),  
            //笔触  
            stroke: new ol.style.Stroke({  
                //笔触颜色  
                color: '#264df6',  
                //笔触宽度  
                width:2  
            }),  
            //图形样式，主要适用于点样式  
            image: new ol.style.Circle({  
                //半径大小  
                radius: 10,  
                //填充  
                fill: new ol.style.Fill({  
                    //填充颜色  
                    color: '#0099FF'  
                })  
            }),
            text: new ol.style.Text({ //文本样式
        	    font: '14px Calibri,sans-serif',
        	    fill: new ol.style.Fill({
        	      color: '#000'
        	    }),
        	    stroke: new ol.style.Stroke({
        	      color: '#fff',
        	      width: 3
        	    }),
        	  })
        });
    	++pointCount;
    	var poin=new ol.geom.Point(coordinates);
    	poin.setProperties({name:String(pointCount)})
    	var feature = new ol.Feature(poin);
    	
    	if(pointCount%2==0){
    		tempPoint.to=coordinates;
    		// tempPoint  是全局的  所以需要重新定义个
    		var temp_={
    				from:tempPoint.from,
    				to:tempPoint.to
    		};
    		checkPoints.push(temp_);
    		console.log(checkPoints);
    		var a=parseInt(pointCount/2);
    		newStyle.getText().setText(String(a));
    		feature.setStyle(newStyle);
    		var html='<li><a href="javascript:;" value="'+pointCount+'" class="btns second"><i class="ck-box"></i><input class="ck-inp" type="checkbox" name="" id="" '+
    		'value="'+pointCount+'" /><span class="txt">配准点'+a+'</span></a></li>'
    		//加载坐标对
//    		var html="<li>校准点"+checkPoints.length+"<a point='"+pointCount+"'>删除</a></li>";
    		$("#point-check").append(html);
    	}else{
    		var txt=String(parseInt(pointCount/2)+1);
    		oldStyle.getText().setText(String(txt));
    		feature.setStyle(oldStyle);
    		tempPoint.from=coordinates;
    	}
    	pointSource.addFeature(feature);
//    	map_.removeInteraction(draw);  
    	/*pointLayer.addFeature(feature);*/
    };
    //取消方法
    function cancle(){
    	//取消事件
    	map_.removeInteraction(draw);
    	/*pointCount=0;
    	tempPoint={
    			old:'',
    			now:''
    	}*/
    };
    /**
     * 删除点调用的方法
     * 
     */
    function removePoint(){
    	$("#point-check a.selected").each(function(e){
    		var value=$(this).attr("value");
        	var features=pointSource.getFeatures();
        	var obj={};
        	//remove 地图上的点
        	for(var i=0;i<features.length;i++){
        		if(features[i].values_.geometry){
        			var name=features[i].values_.geometry.values_.name;
        			if(name==value){
        				obj.to=features[i].getGeometry().getExtent().splice(0,2);
        				pointSource.removeFeature(features[i]);
        			}else if(name==(value-1)){
        				obj.from=features[i].getGeometry().getExtent().splice(0,2);
            			pointSource.removeFeature(features[i]);
//            			features.remove(features[i]);
            		}
        		}
        	}
        	//remove 保存的点
        	checkPoints=removeByValue(obj);
        	console.log(checkPoints);
        	//remove html
        	var li_=$(this).parent("li");
        	li_.remove();
    	})
    };
    /**
     * 删除配准点数组里的因素
     * 数组里存的是对象 不能比较，手动匹配删除生成新的数组并返回
     */
    function removeByValue(obj){
    	var newArr=[];
    	for(var i=0;i<checkPoints.length;i++){
    		var obj_=checkPoints[i];
    		if(obj_.to[0]!=obj.to[0]||obj_.to[1]!=obj.to[1]||
    				obj_.from[0]!=obj.from[0]||obj_.from[1]!=obj.from[1]){
    			newArr.push(obj_);
    		}
    	}
    	return newArr;
    };
    //清除校验点
    function clearPoints(){
    	//清除 html
    	$(".import_map #point-check").empty();
    	//清除点集合
    	checkPoints=[];
    	tempPoint={from:'',to:''};
    	pointCount=0;
    	pointSource.clear();
    };
    Array.prototype.indexOf = function(val) {
    	for (var i = 0; i < this.length; i++) {
    	if (this[i] == val){
    		return i;
    		} 
    	}
    	return -1;
    };
    Array.prototype.remove = function(val) {
    	var index = this.indexOf(val);
    	if (index > -1) {
    		this.splice(index, 1);
    	}
    };
    //将shape数据加载到地图上
    function handShapeData(){
    	for(var j=0;j<shapeData.length;j++){
    		var data=shapeData[j];
    		 var array = new Int8Array(data);
		        //调用 shapeFile的方法  截取100为
		        var sourceArry=array.slice(0,100);
		        var source={
		        		_array:array,
		        		_index:100,
		        };
		        var geo=[];
		        var sources=shapefile.Shp(source,shapefile.view(sourceArry));
		        sources.read=shapefile.shp_read;
		        sources._source.slice=shapefile.slice_slice;
		        source=sources;
		        sources.read().then(function log(results){
		        	if(source._source._array.length==source._source._index){
		        		addLayer(geo);
		        	}else{
		        		var tempObj={
			        			type: "Feature",
			        	        properties:'',
			        	        geometry: results.value
			        	};
		        		geo.push(tempObj);
		        		return source.read().then(log);
		        	}
		        })
    	}
    };
	 return {
	        init: init
	    };
});
