package com.forestar.report.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.forestar.core.exception.ServiceException;
import com.forestar.core.util.StringUtils;
import com.forestar.data.general.GlobalDataType;
import com.forestar.data.general.GlobalParameter;
import com.forestar.data.general.QueryFilter;
import com.forestar.data.general.RowBase;
import com.forestar.data.metadata.IMetadataTable;
import com.forestar.data.metadata.MetadataField;
import com.forestar.data.service.BaseService;
import com.forestar.data.util.DateUtil;
import com.forestar.form.excel.utils.ExcelTemplate;
import com.forestar.report.service.ExcelService;

@Controller
public class customExportExcelController {
	@Autowired(required=true)
	private ExcelService excelService;
	@Autowired
	BaseService baseService;
	@Autowired
	ExportController ExportController;
	@Autowired
	customReportController ReportController;
	  /**
	   * 
	   * @param req
	   * @param res
	   * @param crosswise	横向数据
	   * @param lengthways	纵向数据
	   * @param queryJson	条件
	   * @param country
	 * @throws Exception 
	   */
	@RequestMapping(value="/customExportExcel.web",method = RequestMethod.POST)
	@ResponseBody
	public void customExportExcel(HttpServletRequest req, HttpServletResponse res, HttpSession session)
	    throws Exception{
		String jsonStr = req.getParameter("data");
		JSONObject jsonObj = JSON.parseObject(jsonStr);
		//字典集合
		Map<String, Map<String, String>> codeMap = new LinkedHashMap<String,Map<String,String>>();
		//横向
		Object crosswise = jsonObj.get("crosswise");
		//纵向
		JSONArray lengthways = jsonObj.getJSONArray("lengthways");
		//横向字段集合（例：表头翻译项）
		Map<String,String>  colSpan=null;
		//纵向字段集合（例：统计单位）
		Map<String,String>  rowSpan=new LinkedHashMap<String,String>();
		colSpan = (Map<String, String>) crosswise;
		for(int j = 0;j < lengthways.size();j++){
			JSONObject lengthwaysObj =(JSONObject) lengthways.get(j);
			for (Entry<String, Object> entry : lengthwaysObj.entrySet()) {
				rowSpan.put(entry.getKey(), (String) entry.getValue());
			}
		}
		
		//条件
		String queryJson = (jsonObj.getString("whereStr") != null || jsonObj.getString("whereStr") !="")?jsonObj.getString("whereStr"):"1!=1";
		
		//字段顺序集合fieldSort
		Map<String,String> fieldSort=null;
		fieldSort=new LinkedHashMap<String,String>();
		for (Entry<String, String> entry : rowSpan.entrySet()) {
			fieldSort.put(entry.getKey(), entry.getValue());
		}
		for (Entry<String, String> entry : colSpan.entrySet()) {
			fieldSort.put(entry.getKey(), entry.getValue());
		}
		
		//组装sql查询数据库
		/*String SqlData = "select XIAN, XIANG, CUN,XIAO_BAN,DI_LEI, MIAN_JI from LXXB_P t where XIAN = '360323' and XIANG = '360323008' and CUN = '360323008007'";
		GlobalParameter[] para = new GlobalParameter[]{
				new GlobalParameter(null, null, "DI_LEI","STRING"),
				new GlobalParameter(null, null, "MIAN_JI","DOUBLE"),
				new GlobalParameter(null, null, "XIAN","STRING"),
				new GlobalParameter(null, null, "XIANG","STRING"),
				new GlobalParameter(null, null, "CUN","STRING"),
				new GlobalParameter(null, null, "XIAO_BAN","STRING")
		};
		List<RowBase> ListDatas = baseService.getDataTableSql("LXXB_P", SqlData, para);
		
		QueryFilter queryParam = new QueryFilter();
		queryParam.setWhereString("XIAN = '360323' and XIANG = '360323008' and CUN = '360323008007'");
		queryParam.setSelectFields("XIAN, XIANG, CUN,XIAO_BAN,DI_LEI, MIAN_JI");
		queryParam.setOrderByString("XIAN,XIANG,CUN,XIAO_BAN");
		queryParam.setAddCaptionField(true);
		
		baseService.getEntityList("LXXB_P", queryParam);*/
		
		//后期
		QueryFilter param = new QueryFilter();
		param.setWhereString(queryJson);
		String rows=rowSpan.keySet().toString();
		rows=rows.substring(1,rows.length()-1).replaceAll(" ", "");
		param.setOrderByString(rows);
		String fileds=fieldSort.keySet().toString();
		//TODO 统计的字段是写死的，例子：MIAN_JI
		fileds=fileds.substring(1,fileds.length()-1).replaceAll(" ", "")+",MIAN_JI";
		param.setSelectFields(fileds);
		param.setAddCaptionField(true);
		List<RowBase> ListDatas = baseService.getEntityList("LXXB_P", param);
		
		//进行字典值的翻译
		for(int i =0;i<ListDatas.size();i++){
			Map CurrentObjects =ListDatas.get(i).getCurrentObjects();
			Map OriginalObjects =ListDatas.get(i).getOriginalObjects();
			Iterator Citer = CurrentObjects.entrySet().iterator();
			Iterator Oiter = OriginalObjects.entrySet().iterator();
			while (Citer.hasNext()) {
				Map.Entry Centry = (Map.Entry) Citer.next();
				Object Ckey = Centry.getKey();
				Object Cval = Centry.getValue();
				while (Oiter.hasNext()){
					Map.Entry Oentry = (Map.Entry) Oiter.next();
					Object Okey = Oentry.getKey();
					Object Oval = Oentry.getValue();
					int endIndex = Ckey.toString().indexOf("_");
					if(Ckey.toString().indexOf(Okey.toString()+"_")>-1){
						Oentry.setValue(Centry.getValue());
					}
				}
				
			}
		}
		
		//字典合集生成
		String instr="";
		for(String code : colSpan.keySet()){
			instr+=colSpan.get(code)+"','";
		}
		instr=instr.substring(0,instr.length()-3);
		codeMap =new LinkedHashMap<String,Map<String,String>>();
		QueryFilter qf= new QueryFilter();
		qf.setWhereString("C_DOMAINNAME in ('"+instr+"') and L_JB>1");
		qf.setOrderByString("C_DOMAINNAME,C_CODE");
		//qf.setWhereString("C_DOMAINNAME in ('"+instr+"') and I_JB>0");
		//qf.setOrderByString("C_DESCRIBE,C_CODE");
		List<RowBase> codeList=baseService.getDataTable("FL_SYS_ZYSJZD", qf);
		if(codeList.size()!=0){
			for(String code : colSpan.keySet()){
				codeMap=ReportController.getMap(codeMap,codeList,code,colSpan.get(code));
			}
		}
	
		ExportController.exportSheets(req, res, session,ListDatas, codeMap, rowSpan, colSpan, fieldSort); 
	  }
	
	/**
	 * 
	 * @param req
	 * @param res
	 * @param session
	 * @throws Exception
	 */
	
	@RequestMapping(value="/exporttable.web",method = RequestMethod.POST)
	@ResponseBody
	public void exporttable(HttpServletRequest req, HttpServletResponse res, HttpSession session,String reportId, String queryJson)
			  throws Exception
	{
		String jsonStr = req.getParameter("data");
		JSONObject jsonObj = JSON.parseObject(jsonStr);
		//数据源的条件queryJson
		String WhereStr = (jsonObj.getString("whereStr") != null || jsonObj.getString("whereStr") !="")?jsonObj.getString("whereStr"):"1!=1";
		//String WhereStr = queryJson != null?queryJson:"1=1";
		//存储表头的主键
		String customId = jsonObj.getString("customId");
		//String customId = reportId;
		String Sql = "select OBJECTID,TABLENAME,MODULENAME,ROWSFIELD,ROWSFIELDNAME,COLFIELD,COLFIELDNAME,HEADHTML,VIEWTABLENAME,QUERYFIELDS,DISPLAYFIELDS,UNITNAME from FS_REPORT_HEAD where OBJECTID = "+customId;
		
		GlobalParameter[] para = new GlobalParameter[]{
				new GlobalParameter(null, null, "TABLENAME","STRING"),
				new GlobalParameter(null, null, "MODULENAME","STRING"),
				new GlobalParameter(null, null, "ROWSFIELD","STRING"),
				new GlobalParameter(null, null, "ROWSFIELDNAME","STRING"),
				new GlobalParameter(null, null, "COLFIELD","STRING"),
				new GlobalParameter(null, null, "COLFIELDNAME","STRING"),
				new GlobalParameter(null, null, "HEADHTML","STRING"),
				new GlobalParameter(null, null, "VIEWTABLENAME","STRING"),
				new GlobalParameter(null, null, "QUERYFIELDS","STRING"),
				new GlobalParameter(null, null, "DISPLAYFIELDS","STRING"),
				new GlobalParameter(null, null, "OBJECTID","INT32"),
				new GlobalParameter(null, null, "UNITNAME","STRING")
		};
		List<RowBase> headDatas = baseService.getDataTableSql("FS_REPORT_HEAD", Sql, para);
		//获取数据
		HashMap headData = headDatas.get(0).getOriginalObjects();
		//获取表名
		String VIEWTABLENAME = (String) headData.get("VIEWTABLENAME");
		//获取模板名
		String template = VIEWTABLENAME+".xls";
		//获取文件中的表名
		String moduleName = (String) headData.get("MODULENAME");
		//获取查询字段
		String queryFields = (String) headData.get("QUERYFIELDS");
		//获取查询字段名称
		String displayFields = (String) headData.get("DISPLAYFIELDS");
		//文件名
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");//设置日期格式
		String fileName = moduleName+df.format(new Date());
		//排序字段
		String orderByString = (String) headData.get("ROWSFIELD");
		//统计字段
		String colField = (String) headData.get("COLFIELD");
		//分组字段
		String groupByString = "";
		//横向字段
		String crosswise =(String) headData.get("COLFIELD");
		//纵向字段
		String lengthways =(String) headData.get("ROWSFIELD");
		//字典集合
		Map<String, Map<String, String>> codeMap = new LinkedHashMap<String,Map<String,String>>();
		//sql语句
		String sql = "";
		//后期
		QueryFilter param = new QueryFilter();
		param.setWhereString(WhereStr);
		param.setOrderByString(orderByString);
		//TODO 统计的字段是写死的，例子：MIAN_JI
		String fileds=orderByString+","+colField+",MIAN_JI";
		param.setSelectFields(fileds);
		param.setAddCaptionField(true);
		List<RowBase> ListDatas = baseService.getEntityList("LXXB_P", param);	
		//进行字典值的翻译
		for(int i =0;i<ListDatas.size();i++){
			Map CurrentObjects =ListDatas.get(i).getCurrentObjects();
			Map OriginalObjects =ListDatas.get(i).getOriginalObjects();
			Iterator Citer = CurrentObjects.entrySet().iterator();
			Iterator Oiter = OriginalObjects.entrySet().iterator();
			while (Citer.hasNext()) {
				Map.Entry Centry = (Map.Entry) Citer.next();
				Object Ckey = Centry.getKey();
				Object Cval = Centry.getValue();
				while (Oiter.hasNext()){
					Map.Entry Oentry = (Map.Entry) Oiter.next();
					Object Okey = Oentry.getKey();
					Object Oval = Oentry.getValue();
					int endIndex = Ckey.toString().indexOf("_");
					if(Ckey.toString().indexOf(Okey.toString()+"_")>-1){
						Oentry.setValue(Centry.getValue());
					}
				}
				
			}
		}
		//获取纵向字段
		String[] rowsField = (String[]) ((String) headData.get("ROWSFIELD")).split(",");
		//获取纵向字段名称
		String[] rowsFieldName = (String[]) ((String) headData.get("ROWSFIELDNAME")).split(",");
		//获取横向字段
		String[] colFields = (String[]) ((String) headData.get("COLFIELD")).split(",");
		//获取横向字段名称
		String[] colFieldName = (String[]) ((String) headData.get("COLFIELDNAME")).split(",");
		Map<String,String>  rowSpan=new LinkedHashMap<String,String>();
		for(int i =0;i<rowsField.length;i++){
			rowSpan.put(rowsField[i], rowsFieldName[i]);
		}
		//横向字段集合（例：表头翻译项）
		Map<String,String>  colSpan=new LinkedHashMap<String,String>();
		for(int j =0;j<colFields.length;j++){
			colSpan.put(colFields[j], colFieldName[j]);
		}
		
		//字典合集生成
		String instr="";
		for(String code : colSpan.keySet()){
			instr+=colSpan.get(code)+"','";
		}
		instr=instr.substring(0,instr.length()-3);
		codeMap =new LinkedHashMap<String,Map<String,String>>();
		QueryFilter qf= new QueryFilter();
		qf.setWhereString("C_DOMAINNAME in ('"+instr+"') and L_JB>1");
		qf.setOrderByString("C_DOMAINNAME,C_CODE");
		//qf.setWhereString("C_DOMAINNAME in ('"+instr+"') and I_JB>0");
		//qf.setOrderByString("C_DESCRIBE,C_CODE");
		List<RowBase> codeList=baseService.getDataTable("FL_SYS_ZYSJZD", qf);
		if(codeList.size()!=0){
			for(String code : colSpan.keySet()){
				codeMap=ReportController.getMap(codeMap,codeList,code,colSpan.get(code));
			}
		}
		//字段顺序集合fieldSort
		Map<String,String> fieldSort=null;
		fieldSort=new LinkedHashMap<String,String>();
		for (Entry<String, String> entry : rowSpan.entrySet()) {
			fieldSort.put(entry.getKey(), entry.getValue());
		}
		for (Entry<String, String> entry : colSpan.entrySet()) {
			fieldSort.put(entry.getKey(), entry.getValue());
		}
		ExportController.exportSheets(req, res, session,ListDatas, codeMap, rowSpan, colSpan, fieldSort);
		/*HSSFWorkbook wb = export(VIEWTABLENAME,moduleName,fileName,template,queryFields,displayFields,WhereStr,orderByString,queryFields,groupByString,sql, req,res, session);
		fileName = URLEncoder.encode(new StringBuilder().append(fileName).append(".xls").toString(), "utf-8");
	    res.setHeader("Content-Disposition", new StringBuilder().append("attachment; filename=\"").append(fileName).append("\"").toString());
	    res.setContentType("application/vnd.ms-excel; charset=gb2312");
	    ServletOutputStream out = res.getOutputStream();
	    wb.write(out);
	    out.close();*/
	}
	
	public HSSFWorkbook export(String tableName, String moduleName,  String fileName,  String template, String queryFields,  String displayFields, String whereString, String orderByString,String selectFields,String groupByString, String sql, HttpServletRequest req, HttpServletResponse res, HttpSession session)
		    throws Exception
	  {
	    String templatePath = session.getServletContext().getRealPath("/WEB-INF/exceltemplate");
	    File templateFile = null;
	    template = template != null ? template : tableName;
	    if (template != null) {
	      templateFile = new File(new StringBuilder().append(templatePath).append("\\").append(template).append(template.endsWith(".xls") ? "" : ".xls").toString());
	      if (!templateFile.exists()) {
	        templateFile = new File(new StringBuilder().append(templatePath).append("\\").append(tableName.toLowerCase()).append(".xls").toString());
	        if (!templateFile.exists()) {
	          templateFile = null;
	        }
	      }
	    }
	    List<RowBase> list = null;
	    QueryFilter filter = new QueryFilter();
	    filter.setAddCaptionField(true);
	    if (whereString != null) {
	    	filter.setWhereString(whereString);
	    }
	    if (orderByString != null) {
	    	filter.setOrderByString(orderByString);
	    }
	    if (selectFields != null) {
	    	filter.setSelectFields(selectFields);
	    }
	    if (groupByString != null) {
	    	filter.setGroupByString(groupByString);
	    }
	    list = this.baseService.getEntityList(tableName, filter);
	    HSSFWorkbook wb;
	    if (templateFile == null) {
	      IMetadataTable metadataTable = this.baseService.openTable(tableName);
	      String[] fileds = queryFields.split(",");
	      List dataList = new ArrayList();
	      for (RowBase rowData : list) {
	        HashMap obj = rowData.getOriginalObjects();
	        HashMap dicobj = rowData.getCurrentObjects();
	        Map useData = new HashMap();
	        for (int i = 0; i < fileds.length; i++) {
	          String key = fileds[i];
	          Object value = obj.get(key);
	          if (value == null) {
	            value = dicobj.get(key);
	          }
	          if (value == null) {
	            value = "";
	          }
	          if (value != null) {
	            if ((value instanceof Date)) {
	              String dateStr = value.toString();
	              Date sd = (Date)value;
	              MetadataField field = metadataTable.getField(key);
	              if (field.getDataType().equals(GlobalDataType.Date))
	                dateStr = DateUtil.convertDateToString(sd);
	              else {
	                dateStr = DateUtil.convertDateTimeToString(sd);
	              }
	              useData.put(key, dateStr);
	            } else {
	              useData.put(key, value.toString());
	            }
	          }
	        }
	        dataList.add(useData);
	      }
	      wb = genExcel(dataList, moduleName, fileds, displayFields.split(","));
	    } else {
	      wb = genExcelByTemplate(list, moduleName, templateFile);
	    }
	    return wb;
    }
	private HSSFWorkbook genExcel(List<Map<String, String>> dataList, String moduleName, String[] queryFields, String[] displayFields)
	{
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet(moduleName == null ? "sheet1" : moduleName);
		HSSFFont headerFont = wb.createFont();
		headerFont.setFontName("黑体");
		headerFont.setBoldweight((short)150);
		headerFont.setFontHeightInPoints((short)14);
		HSSFCellStyle headerStyle = wb.createCellStyle();
		headerStyle.setAlignment((short)2);
		headerStyle.setVerticalAlignment((short)1);
		headerStyle.setFont(headerFont);
		HSSFFont subheadFont = wb.createFont();
		subheadFont.setFontHeightInPoints((short)11);
		HSSFCellStyle subheadStyle = wb.createCellStyle();
		subheadStyle.setAlignment((short)2);
		subheadStyle.setVerticalAlignment((short)1);
		subheadStyle.setFont(subheadFont);
		HSSFFont titleFont = wb.createFont();
		titleFont.setFontHeightInPoints((short)11);
		titleFont.setBoldweight((short)150);
		HSSFCellStyle titleStyle = wb.createCellStyle();
		titleStyle.setAlignment((short)2);
		titleStyle.setVerticalAlignment((short)1);
		titleStyle.setFillForegroundColor((short)31);
		titleStyle.setFillPattern((short)1);
		titleStyle.setFont(titleFont);
		titleStyle.setBorderTop((short)1);
		titleStyle.setBorderLeft((short)1);
		titleStyle.setBorderRight((short)1);
		titleStyle.setBorderBottom((short)6);
		HSSFCellStyle contentStyle = wb.createCellStyle();
		contentStyle.setBorderBottom((short)1);
		contentStyle.setBorderLeft((short)1);
		contentStyle.setBorderRight((short)1);
		contentStyle.setBorderTop((short)1);
		HSSFRow row = sheet.createRow(0);
		row.setHeightInPoints(20.0F);
		sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, displayFields.length - 1));
		HSSFCell cell = row.createCell(0);
		cell.setCellValue(moduleName);
		cell.setCellStyle(headerStyle);
		row = sheet.createRow(1);
		row.setHeightInPoints(15.0F);
		sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, displayFields.length - 1));
		cell = row.createCell(0);
		cell.setCellValue(new StringBuilder().append("表格生成时间：").append(DateUtil.getStringTime("yyyy年MM月dd日 HH:mm:ss", new Date())).toString());
		cell.setCellStyle(subheadStyle);
		row = sheet.createRow(2);
		row.setHeightInPoints(15.0F);
		for (int i = 0; i < displayFields.length; i++) {
		  cell = row.createCell(i);
		  cell.setCellValue(displayFields[i]);
		  cell.setCellStyle(titleStyle);
		  sheet.setColumnWidth(i, 6000);
		}
		int count = 3;
		for (Map data : dataList) {
		  row = sheet.createRow(count++);
		  for (int i = 0; i < queryFields.length; i++) {
		    String key = queryFields[i];
		    cell = row.createCell(i);
		    String value = (String)data.get(key);
		    if (value != null) {
		      cell.setCellValue(value.toString());
		    }
		    cell.setCellStyle(contentStyle);
		  }
		}
		return wb;
    }
	private HSSFWorkbook genExcelByTemplate(List<RowBase> list, String moduleName, File templateFile)
		    throws Exception
		  {
		    List exportObjects = new ArrayList();
		    for (RowBase rowBase : list) {
		      Map obj = rowBase.getOriginalObjects();
		      Map dicobj = rowBase.getCurrentObjects();
		      obj.putAll(dicobj);
		      exportObjects.add(obj);
		    }
		    String templateFilePath = templateFile.getAbsolutePath();
		    String outputFile = new StringBuilder().append(templateFile.getParentFile().getAbsolutePath()).append("temp").toString();
	    ExcelTemplate template = new ExcelTemplate(templateFilePath, outputFile);
	    template.setBaseDataService(this.baseService);
	    template.setMaxRow(5000);
	    return template.getWorkbook(exportObjects);
	}
	
	
}
