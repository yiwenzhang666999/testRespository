//========================================= 以下是常量声明 =========================================\\
//====================================================================================================\\
mini.OPERTYPES = ['=','>','<','!=','>=','<=','like','in'];
mini.OPERDATATYPES = ['number', 'string', 'date'];
mini.urls = {
	//导出Excel(从数据库查询数据)
	genExcel : bootPATH + '../excel/export.do',
	//导出Excel(前端提供数据)
	genExcelByData : bootPATH + '../excel/exportdata.do',
	//导出多页Excel
	genExcelSheets : bootPATH + '../excel/exportsheets.do',
	//导入Excel
	importExcel : bootPATH + '../excel/import.do',
	//下载导入Excel的结果
	downImportExcelResult : bootPATH + '../excel/downimportresult.do',
	//导出docx文档
	genDocx :  bootPATH + '../docxgen/bytemplate.do',
	//工作流图
	workflowGraph : bootPATH+"../workflow/resource/process-instance.do",
	//获取工作流图节点位置
	workflowGraphTrace : bootPATH+'../workflow/process/trace.do',
	//FsFile文件上传服务地址
	fileUploadUrl : bootPATH+'/uploader',
	//FsFile文件下载服务地址
	fileDownloadUrl : bootPATH+'/fileDownLoadServlet',
	//FsFile文件删除服务地址
	fileDelUrl : bootPATH+'/delFileServlet',
	//ibox载入内容时显示的图片
	iboxLoadingImg : bootPATH+'mini/themes/default/images/ibox/ibox-loading.gif',
	//LODOP打印控件下载地址
	lodopPlugin32 : bootPATH + 'lodop/install_lodop32.exe',
	lodopPlugin64 : bootPATH + 'lodop/install_lodop64.exe',
	//公文编辑器的页面地址
	officialDocEditor : bootPATH + '../common/commonList.do?url=/view/officialdoc/officialdoceditor',
	//上传图片文件存放路径
	imgFileRoot : bootPATH + '../upload-img/',
	//图片上传服务地址
	ImgUploadUrl : bootPATH + '../imgfile/imgupload.do',
	//图片删除服务地址
	ImgDelUrl : bootPATH + '../imgfile/imgdel.do',
	//上传视频文件存放路径
	videoFileRoot : bootPATH + '/upload-video/',
	//视频上传服务地址
	videoUploadUrl : bootPATH + '/videofile/videoupload.do',
	//视频删除服务地址
	videoDelUrl : bootPATH + '/videofile/videodel.do'
};
mini.regs = {
	field : /\{\w*?\}/g	//用于匹配写成{FIELD}形式的字段
};
//纸张大小，每种纸张规格数组代表竖向放置时的[宽, 高]
mini.PAGESIZE = {
	A4 : [210, 297],
	B5 : [182, 257]
};
mini.FORMITRMSELECTOR = '.mini-textbox-input,.mini-buttonedit-input,button[disabled!=disabled],'
		+ 'input[type=button],input[type=radio]';

 //=========================================== 以下是工具 ===========================================\\
//====================================================================================================\\

//工具
mini.fsUtil = {

	/**
	 * 判断对象是否为空（没有任何属性）
	 */
	isEmpty : function(o){
		if(typeof o !== 'object')
			throw new TypeError('isEmplty不接受非对象类型的参数');
		for(a in o){
			return false;
		}
		return true;
	},

	//生成Excel
	genExcel : function(args){
		var url = args.data ? mini.urls.genExcelByData : mini.urls.genExcel
		if (args.queryFields && args.queryFields instanceof Array){
			args.queryFields = args.queryFields.join(',');
		}
		if (args.displayFields && args.displayFields instanceof Array){
			args.displayFields = args.displayFields.join(',');
		}
		if(!args.excelTemplate) args.excelTemplate = args.tableName;
		if(!args.moduleName) args.moduleName = args.tableName;
		if(!args.fileName) 
			args.fileName = args.moduleName + mini.formatDate(new Date(),'yyMMdd');
		var formHtml = '<form action="'+url+'" method="post" style="display:none;">';
 		for(var key in args){
 			var value = args[key];
 			if(value){
 				if(typeof(value) == 'object'){
 					value = JSON.stringify(value);
 				}
 				if(typeof value == 'string')
 					value = value.replace(/\"/g,'&quot;');
 				formHtml += '<input type="hidden" name="'+key+'" value="'+value+'">';
 			}
 		}
 		formHtml += '</form>';
		$(formHtml).appendTo($('body')).submit();
	},

	genExcelSheets : function(templateFileName, tablesParam, outputFileName){
		var tableNames = [], whereStrings = [], orderByStrings = [], groupByStrings = [];
		for(var i=0; i<tablesParam.length; i++){
			var param = tablesParam[i];
			tableNames.push(param.tableName);
			whereStrings.push(param.whereString || 'nil');
			orderByStrings.push(param.orderByString || 'nil');
			groupByStrings.push(param.groupByString || 'nil');
		}
		outputFileName = outputFileName || templateFileName;
		if(outputFileName.indexOf('.xls')==-1) templateFileName += '.xls';
		var formHtml = '<form action="'+mini.urls.genExcelSheets+'" method="post" style="display:none;">';
		formHtml += '<input type="hidden" name="excelTemplate" value="'+templateFileName+'">';
		formHtml += '<input type="hidden" name="tableNames" value="'+ tableNames.join('&#') +'">';
		formHtml += '<input type="hidden" name="whereStrings" value="'+ whereStrings.join('&#') +'">';
		formHtml += '<input type="hidden" name="orderByStrings" value="'+ orderByStrings.join('&#') +'">';
		formHtml += '<input type="hidden" name="groupByStrings" value="'+ groupByStrings.join('&#') +'">';
		formHtml += '<input type="hidden" name="fileName" value="'+ outputFileName +'">';
		formHtml += '</form>';
		$(formHtml).appendTo($('body')).submit();
	},

	/*
	 * 导入xls文件
	 * @param tableName 对应数据库的表名
	 * @param defaultData 默认数据，将会添加到每一条记录中，格式为{字段名1:默认值1, 字段名2:默认值2, ...}
	 * @param showResult 是否显示导入结果
	 * @param configFile 配置文件，放置于WEB-INF/exceltemplate目录下。如果不传入此参数则根据小写tableName+'.json'查找配置文件
	 */
	importExcel : function(tableName, defaultData, configFile, serviceUrl, callback, returnSuccessRows, showResult){
		serviceUrl = serviceUrl || mini.urls.importExcel;
		if(returnSuccessRows){
			if(returnSuccessRows == true) returnSuccessRows = "$all";
			if(typeof returnSuccessRows == 'string'){
				var successLines = '  <input type="hidden" name="returnSuccessRows" value="'+returnSuccessRows+'"/>';
			}
		}
		var formHtml = [
			'<form action="'+serviceUrl+'" method="post" enctype="multipart/form-data" class="fs-importxls-form">',
			'	<div class="tip">请选择要导入的数据文件，必须为xls格式：</div>',
			'	<input type="hidden" name="tableName" value="'+tableName+'"/>',
			(showResult) ?
				'<input type="hidden" name="showResult" value="'+showResult+'"/>' : '',
			'	<input type="hidden" name="configFile" value="'+configFile+'"/>',
			typeof defaultData =='object' ? 
				'<input type="hidden" name="defaultData" value=\''+JSON.stringify(defaultData)+'\'/>' :
				'',
			successLines || '',
			'	<input class="file-chooser" type="file" name="file" accept=".xls"/>',
			'	<br/>',
			'	<input class="fore-common-btn" type="submit" value="开始导入">',
			'</form>'
		];
		if(navigator.userAgent.indexOf('MSIE') == -1){
			//非IE或IE11使用ibox方式
			mini.openIbox({
				requestType: 'html',
				title: '导入Excel',
				html: '<div></div>',
				onload: function(){
					var box = this;
					var fcw = $('<iframe>')
						.attr({'src': bootPATH + 'mini/_blank.html',width:350,htight:150,frameBorder:'0'})
						.css('border', 'none 0px')
						.load(function(){
							loadIframe(this, function(){box.destroy();});
						})
						.appendTo(box.$content.find('div'));
				}
			});
		}else{//IE10-使用mini的窗口
			mini.open({
				url: bootPATH + 'mini/_blank.html',
				showModal: true,
				width: 400,
				height: 200,
				title: '导入Excel',
				onload: function(){
					var box = this;
					var iframe = this.getIFrameEl(); 
					loadIframe(iframe);
					$(iframe).load(function(){
						loadIframe(iframe, function(){box.destroy();});
					});
				}
			});
		}
		var loadingId;
		function loadIframe(iframe, onFinish){
			loadingId && mini.get(loadingId) && mini.get(loadingId).destroy();
			var win = iframe.contentWindow;
			if(win.result){//result为导入Excel后服务器返回的数据
				var r = win.result;
				var d = '<p><a href="javascript:document.forms[0].submit()">下载导入结果</a></p>';
				var msg = ''
				if(r.success){
					if(r.successCount){
						var count = r.successCount+r.errorCount;
						msg = '<h3>共'+count+'条记录,成功导入'+ r.successCount + '条记录</h3>';
						if(r.errorCount){
							msg += '<br/>' + r.errorCount + '条记录未能导入';
							msg += '<br/>未能导入的行号：' + r.failedRows.join(',');
						}
					}else{
						msg = '<h3>没有导入任何记录</h3>';
					}
				}else{
					msg += '<h3>导入失败</h3>';
				}
				if(r.msgs.length<2){
					mini.alert(msg, '导入结果');
				}else{
					msg = msg + d + '<br/>' + r.msgs.join('<br/>');
					msg = '<div class="fs-importxls-report">' + msg + '</div>'
					msg += '<form action="'+mini.urls.downImportExcelResult+'" method="post">'
							+ '<input type="hidden" name="content" value="' + r.msgs.join('\r\n') +'"><form>'
					mini.openIbox({
						requestType: 'html',
						html: msg,
						title: '导入结果'
					})
				}
				if(typeof onFinish === 'function')
					onFinish(r);
				if(typeof callback === 'function')
					callback(r);
			}else{//认为是首次打开上传excel的iframe页面
				win.document.body.innerHTML = formHtml.join('');
				$(win.document.body).find('form').submit(function(){
					var value = this.file.value;
					if(!value){
						mini.alert('请选择要导入的xls格式文件');
						return false;
					}
					var parts = value.split('.');
					var suff = parts[parts.length-1].toLowerCase();
					if(suff !== 'xls'){
						mini.alert('只能上传xls格式的文件');
						return false;
					}
					loadingId = mini.loading('正在导入...');
				});
			}
		}
	},

	genDocx : function(template, mappings, filename){
		var formHtml = '<form action="'+mini.urls.genDocx+'" method="post" style="display:none;">';
		formHtml += '<input type="hidden" name="template" value="'+template+'"/>';
		formHtml += '<input type="hidden" name="mappings" value=\''+JSON.stringify(mappings)+'\'/>';
		if(filename)
			formHtml += '<input type="hidden" name="filename" value="'+filename+'"/>';
 		formHtml += '</form>';
		$(formHtml).appendTo($('body')).submit();
	},

	//编码字符串，以适合get参数传递
	encode : function(str){
		return encodeURIComponent(encodeURIComponent(str));
	},

	/**
	 * 获取表数据的简单方法
	 */
	searchTableData : function(tableName, onSuccess, whereString, orderByString,
			groupByString, addCaptionField, onError){
		if(typeof tableName == 'object'){
			var args = tableName;
			tableName = args.tableName;
			groupByString = args.groupByString;
			orderByString = args.orderByString;
			whereString = args.whereString;
			onSuccess = args.onSuccess;
			onError = args.onError;
			addCaptionField = args.addCaptionField;
			if(args.selectFields)
				var selectFields = args.selectFields;
		}
		var param = {
			addCaptionField: !!addCaptionField,
			fillChild: "No",
			groupByString: groupByString,
			orderByString: orderByString,
			whereString: whereString
		};
		if(selectFields)
			param.selectFields = selectFields;

		var callback = {
			callback : function(result) {
				var data = [];
				for(var i=0; i<result.length; i++){
					data.push($.extend(true, result[i].originalObjects,result[i].currentObjects));
				}
				try {
					data = mini.decode(data)
				} catch (e) {
					throw new Error(
							"autocomplete json is error")
				}
				onSuccess(data);
			},
			exceptionHandler : function(msg) {
				console.error("查找数据出错。tableName:"+tableName+".("+msg+")");
				if(mini_debugger)
					alert("查找数据出错。tableName:"+tableName+".("+msg+")");
				if(onError)
					onError(data)
			}
		};
		FsService.getEntityList(tableName,param,callback);
	},

	//简化获取分页数据的函数
	searchPageData : function(args){
		var queryFilter = {
			addCaptionField: !!args.addCaptionField,
			fillChild: "No",
			selectFields: args.selectFields || '*',
			groupByString: args.groupByString || '',
			orderByString: args.orderByString || '',
			whereString: args.whereString || ''
		};
		var pageInfo = {
			pageSize: args.pageSize || 25,
			pageIndex: args.pageIndex || 1
		};
		var callback = {
			callback: function(result){
				var records = result[0];
				var pageInfo = result[1];
				var dataList = [];
				for(var i=0; i<records.length; i++){
					var r = mini.fsUtil.isEmpty(records[i].currentObjects) ? 
							records[i].originalObjects :
							records[i].currentObjects;
					dataList.push(r);
				}
				if(typeof args.onSuccess == 'function'){
					args.onSuccess(dataList, pageInfo);
				}
			},
			exceptionHandler: function(msg){
				console.log(msg)
				if(typeof args.onError == 'function')
					args.onError(msg);
			}
		}
		FsService.pageSelect(args.tableName,queryFilter,pageInfo,callback);
	},

	/**
	 * 打开流程图窗口
	 * @param proId
	 * @param showTip 是否显示节点提示
	 */
	showGraphTrace : function(proId,showTip){
		mini.openIbox({
			requestType : 'img',
			target : mini.urls.workflowGraph + "?pid=" + proId + "&type=image",
			title : '查看工作流',
			onload : function(){
				var box = this;
				$.get(mini.urls.workflowGraphTrace,{pid:proId},function(infos){
					$.each(infos, function(i, v){
						var v = infos[i];
						var vars = v.vars;
						var tipContent = "<table class='need-border'>";
						$.each(vars, function(varKey, varValue) {
							if (varValue) {
								tipContent += "<tr><td class='label'>" + varKey + "</td><td>" + varValue + "<td/></tr>";
							}
						});
						tipContent += "</table>";
						var $popTip = $('<div>',{'id':'flow-graph-tip'}).css({
							position: 'absolute',
							display: 'none',
							background: '#eee',
							border: '1px solid #aaa',
							padding: 10,
							width: 400
						});
						var $border = $('<div/>', {
							'class': 'activity-attr-border activity-attr'
						}).css({
							position: 'absolute',
							left: (v.x - 1),
							top: (v.y - 1),
							width: (v.width - 4),
							height: (v.height - 3),
							border: v.currentActiviti ? '3px solid red' : ''//'1px solid pink'//为看到位置临时加粉色边框
						}).appendTo(box.$imgFrame);
						if(showTip)
							$border.on('mouseover',function(){
								$popTip.html(tipContent)
									.css('left',v.x+v.width)
									.css('top', v.y+v.height)
									.show();
							}).on('mouseout',function(){
								$popTip.hide();
							})
						$popTip.appendTo(box.$imgFrame);
					});
				});
 				function genTip(data){
 					var tips = [];
 					for(var attr in data){
 						tips.push(attr+'：'+data[attr]);
 					}
 					return tips.join('\n');
 				}
			},
			onerror : function(){
				mini.alert('工作流图像载入出错',1500);
				this.destroy();
			}
		});
	},
	//按钮变灰
	disableBtn : function(btn){
		for(var i=0; i<arguments.length; i++)
			$(arguments[i]).attr('disabled','disabled')
				.css({'background':'#eee', 'color':'#888', 'border':'solid 1px #aaa'});
	},
	//按钮变可用
	enableBtn : function(btn){
		for(var i=0; i<arguments.length; i++){
			var $btn = $(arguments[i]);
			//权限标志，如果权限上已控制按钮为不可用，则无论如何不能将按钮变为可用
			var authtag = $btn.attr('authtag');
			if(!authtag || authtag!='disabled'){
				var display = $btn.css('display');
				$btn.removeAttr('disabled')
				.removeAttr('style')
				.css('display',display);
			}
		}
	},

	//动态载入js文件
	loadScript : function(url){
		var script = document.createElement('script');
		script.type = "text/javascript";
		script.src = url;
		document.body.appendChild(script);
	},

	//动态加载css样式文件
	loadStyles : function(url){
		var link = document.createElement('link');
		link.rel = 'stylesheet';
		link.type = 'text/css';
		link.href = url;
		var head = document.getElementsByTagName('head')[0];
		head.appendChild(link);
	},

	toPlainText : function(miniTarget, arg){
		if(/keytext$/.test(miniTarget.id)) return;	//lookup控件文本框不处理
		if(arg === 'recover'){
			//恢复控件
			if(miniTarget instanceof mini.TextArea){
				miniTarget.setReadOnly(false);
			}else if(miniTarget.enable){
				miniTarget.enable();
			}
			if(miniTarget._borderEl) miniTarget._borderEl.style.borderWidth = '1px';
			if(miniTarget._buttonEl) miniTarget._buttonEl.style.display = "block";
			if(miniTarget.getValue && !miniTarget.getValue() && miniTarget.emptyText){
				$(miniTarget._textEl).attr('placeholder', miniTarget.emptyText);
			}
		}else{
			if(miniTarget instanceof mini.TextArea){
				miniTarget.setReadOnly(true);
			}else if(miniTarget.disable){
				miniTarget.disable();
			}
			$(miniTarget.el)
			.removeClass('mini-buttonedit-disabled')
			.removeClass('mini-textbox-disabled');
			if(miniTarget._borderEl) miniTarget._borderEl.style.borderWidth = '0px';
			if(miniTarget._buttonEl) miniTarget._buttonEl.style.display = "none";
			if(miniTarget.getValue && !miniTarget.getValue() && miniTarget.emptyText){
				$(miniTarget._textEl).attr('placeholder', '')
			}
		}
	}
};

//内部使用工具
mini._fsUtil = {

	enhanceTextBoxNumber : function(){
		var oldTextBox_getAttrs = mini.TextBox.prototype.getAttrs;
		mini.TextBox.prototype.getAttrs = function(A){
			var C = oldTextBox_getAttrs.call(this, A);
			mini._ParseString(A, C, [ "numberErrorText" ]);
			return C;
		}
		mini.VTypes["numberErrorText"] = '数字格式不正确';
		var oldTextBox__OnInputTextChanged = mini.TextBox.prototype.__OnInputTextChanged;
		//校验输入数字格式
		mini.VTypes.number = function(value,regs){
			if(!value) return true;
			if(!regs[0]){	//可输入任意数字
				var pattern = /^\-?[0-9]+\.?[0-9]*$/;
				return pattern.test(value);
			}
			regParts = regs[0].split('.');
			var intPart = regParts[0];
			var decPart = regParts[1];
			var signClaim = intPart.indexOf('-')==0 ? '-' :
				(intPart.indexOf('+')==0 ? '+' : null);
			var pattern = '^';
			var forceIntLength = intPart.indexOf('!')>0;
			var intLength = Math.abs(parseInt(intPart));
			if(signClaim == '-')	//必须是负数	
				pattern += '\\-{1}';
			else if(signClaim === null)	//不指定正负数
				pattern += '\\-?';
			if(isNaN(intLength))//指定整数部分长度
				pattern += '[0-9]+';
			else if(forceIntLength)	//强制整数部分长度
				pattern += '[0-9]{'+intLength+'}';
			else{ //指定了整数部分最大长度
				if(intLength===0)
					pattern += '0';
				else
					pattern += '[0-9]{1,'+intLength+'}';
			}
			if(decPart){	//如果有小数部分
				var forceDecLength = decPart.indexOf('!')>0;
				var decLength = Math.abs(parseInt(decPart));
				pattern += '(';
				if(isNaN(decLength)){
					pattern += '\\.';
					pattern += '[0-9]+';
				}else if(forceDecLength){
					pattern += '\\.';
					pattern += '[0-9]{'+decLength+'}';
				}else{
					pattern += '\\.';
					pattern += '[0-9]{1,'+decLength+'}';
				}
				pattern += ')?';
			}
			pattern = new RegExp(pattern+'$');
			console.log(pattern)
			return pattern.test(value);
		}
		//输入完成后检查并修正小数位数
		mini.TextBox.prototype.__OnInputTextChanged = function(e, b){
			oldTextBox__OnInputTextChanged.call(this, e, b);
			this.__fixDecLength();
			/*var text = this.getValue();
			if(markpre && signClaim==='-' && text.length>0 && text.substr(0,1)!=='-'){
				this.setValue('-' + text);
			}*/
		};

		mini.TextBox.prototype.__fixDecLength = function(){
			var markpre = mini._fsUtil.__getMarkpre(this.vtype);
			var signClaim = mini._fsUtil.__getSignClaim(this.vtype);	//正负数要求
			if(markpre
					&& this.vtype.indexOf('!')===this.vtype.length-1
					&& this.vtype.indexOf('.')>0){
				var text = this._textEl.value;
				var pattern = /^\-?[0-9]+\.?[0-9]*$/;
				if(!pattern.test(text)) return;
				var nums = text.split('.');
				var exts = this.vtype.replace('number', '').split('.');
				var sign = text.indexOf('-')==0 ? '-' : '';
				var pre = parseInt(exts[0]);
				var suf = parseInt(exts[1] ? exts[1] : 0);
				var prenum = nums[0];
				if(suf && text.indexOf('.')===-1){
					text += '.';
					for(var i=0; i<suf; i++)
						text += '0';
					this.setValue(text);
				}else if(suf && (nums[1].length<suf)){
					var l = suf - nums[1].length;
					for(var i=0; i<l; i++)
						text += '0';
					this.setValue(text);
				}else if(suf && (nums[1].length>suf)){
					var diff = nums[1].length - suf;
					this.setValue(text.substr(0, text.length-diff));
				}
			}
			
		}

		if(!mini.fsConfigs.force_digit_ipt) return;
		//输入数字时如果不符合格式规范会屏蔽
		var oldTextBox__OnInputKeyDown = mini.TextBox.prototype.__OnInputKeyDown;
		mini.TextBox.prototype.__OnInputKeyDown = function(e){
			oldTextBox__OnInputKeyDown.call(this, e);
			if(this.vtype.indexOf('number')!==0)
				return;
			var text = this._textEl.value
			var selStart = e.currentTarget.selectionStart;
			if(selStart===undefined){//针对老版本IE
				var range = document.selection.createRange()
				selStart = 0 - range.moveStart('character',-100);
			}
			var markpre = mini._fsUtil.__getMarkpre(this.vtype);
			var signClaim = mini._fsUtil.__getSignClaim(this.vtype);	//正负数要求
			if(markpre){
				var ext = this.vtype.replace(markpre, '');
				if(signClaim){
					ext = ext.substr(1);
				}
			}
			if(!e.shiftKey && (e.keyCode>=96 && e.keyCode<=105)
					|| (e.keyCode>=48 && e.keyCode<=57)){	//0-9
				if(markpre){
					var nums = text.split('.');
					var exts = ext.split('.');
					var sign = text.indexOf('-')==0 ? '-' : '';
					var dotPos = text.indexOf('.');
					var pre = parseInt(exts[0]);
					var suf = parseInt(exts[1] ? exts[1] : 0);
					if(dotPos===-1 || selStart<=dotPos){//在小数点前键入
						if(exts[0]==='0'){	//小数点前只能为0
							if(nums[0].length>0 || !(e.keyCode===48 || e.keyCode===96))
								e.preventDefault();
						}else if(exts[0]==='n'){

						}else if(nums[0].replace('-','').length >= pre){
							e.preventDefault();
						}
					}else{//在小数点后键入
						if(exts[1]==='n'){

						}else if(nums[1].length >= suf)
							e.preventDefault();
					}
				}
			}else if(e.keyCode==110||e.keyCode==190){// .
				if(text.indexOf('.')!==-1 || selStart==0 
						|| (markpre && this.vtype.indexOf('.')===-1)
						|| (selStart===1 && text.indexOf('-')===0))
					e.preventDefault();
			}else if(e.keyCode==109||e.keyCode==189){ // -
				if(signClaim==='+' || text.indexOf('-')===0 || selStart>0)
					e.preventDefault();
			}else if(e.keyCode==8		//backspace
					|| e.keyCode==46	//delete
					|| e.keyCode==37	//left
					|| e.keyCode==39){	//right

			}else if(e.keyCode==65 && e.ctrlKey){

			}else{
				e.preventDefault();
			}
		};
	},

	__getMarkpre : function(vtype){
		var markpre = 'number-';
		if(vtype.indexOf(markpre)<0){
			markpre = 'number:';
			if(vtype.indexOf('number:')<0){
				markpre = null;
			}
		}
		return markpre;
	},

	__getSignClaim : function(vtype){
		var markpre = mini._fsUtil.__getMarkpre(vtype);
		var signClaim = false;	//正负数要求
		if(markpre){
			var ext = vtype.replace(markpre, '')
			if(ext.substr(0,1)==='-'){
				signClaim = '-';
				ext = ext.substr(1)
			}else if(ext.substr(0,1)==='+'){
				signClaim = '+';
				ext = ext.substr(1)
			}
		}
		return signClaim;
	},

	//日期选择控件增加控件之间限定日期功能
	enhanceDatePicker : function(){
		mini.DatePicker.prototype.setMaxDate = function(maxDate){
			if(!maxDate) return;
			this.maxDate = maxDate;
			if(!mini.parseDate(maxDate)){
				this._maxDatePickerId = maxDate;
			}
		};
		mini.DatePicker.prototype.setMinDate = function(minDate){
			if(!minDate) return;
			this.minDate = minDate;
			if(!mini.parseDate(minDate)){
				this._minDatePickerId = minDate;
			}
		};
		var old_initEvents = mini.DatePicker.prototype._initEvents;
		var new_initEvents = function(){
			old_initEvents.call(this);
			this.on('buttonClick',function(){
				var maxDatePicker = mini.get(this._maxDatePickerId);
				var minDatePicker = mini.get(this._minDatePickerId);
				if(maxDatePicker && maxDatePicker instanceof mini.DatePicker){
					this.setMaxDate(maxDatePicker.getValue());
				}
				if(minDatePicker && minDatePicker instanceof mini.DatePicker){
					this.setMinDate(minDatePicker.getValue());
				}
			},this);
		}
		mini.DatePicker.prototype._initEvents = new_initEvents;
	},

	//对DataSource或其子类添加dwr方式获取数据功能
	updateDataSourceProto : function(dataSourceClass){
		dataSourceClass.prototype._doLoadAjax = mini.fsFuncStore.dataSource_doLoadAjax;
		dataSourceClass.prototype._ajaxDataSourceQuery = 
				mini.fsFuncStore.dataSource_ajaxDataSourceQuery;
		dataSourceClass.prototype._dwrDataSourceQuery = 
				mini.fsFuncStore.dataSource_dwrDataSourceQuery;
		dataSourceClass.prototype._dwrRecurSourceQuery = 
				mini.fsFuncStore.dataSource_dwrRecurSourceQuery
	},

	//对ListControl或其子类添加setTableName方法，使其可通过dwr方式获取数据
	updateListControlProto : function(theClass){
		theClass.prototype.setTableName = mini.fsFuncStore.listBox_loadByTableName;
	},

	/**对已存在的miniUI类添加String类型的属性。这里添加的属性无set、get方法
	 * @param theClass 要添加属性的类(function)
	 * @return 解析后的属性序列
	 */
	attachStringAttrs : function(theClass, strAttrs){
		var _getAttrs_old = theClass.prototype.getAttrs;
		theClass.prototype.getAttrs = function(A) {
			var B = _getAttrs_old.call(this,A)
			mini._ParseString(A, B, strAttrs);
			return B
		};
	},

	/**
	  * 对miniUI类添加genFilter方法，适用于validatorBase的子类
	  * @param classes 要添加方法的类(function)数组
	  */
	attachGenFilterMethod : function(classes){
		for(var i=0; i<classes.length; i++){
			classes[i].prototype.genFilter 
					= mini.fsFuncStore.validator_genFilter;
		}
	},

	fix_mini_doParse : function(){
		var old_doParse = mini._doParse;
		mini._doParse = function(I){
			if(I && typeof I.className == 'string')
				old_doParse.call(this, I);
		};
	},

	handleExcelImportResult : function(result){

	},

	//按tab或回车键跳到下一个输入项，按shift+tab/回车跳到上一个输入项
	//回车键实现此功能需要配置项enter_as_tab设置为true
	enhanceTab : function(){
		$(function(){
			$('body').delegate(mini.FORMITRMSELECTOR,'keydown',function(e){
				if(e.keyCode==9 || (mini.fsConfigs.enter_as_tab && e.keyCode==13)){
					var $all = $(mini.FORMITRMSELECTOR);
					var thisIndex = $all.index(this)
					if(!e.shiftKey){
						getNextValidItem(thisIndex + 1).focus();
					}else{
						getPreValidItem(thisIndex - 1).focus();
					}
					e.preventDefault();
					function getNextValidItem(index){
						var item = $all[index];
						if(!item){
							return getNextValidItem(0);
						}else if(!item.offsetWidth){//offsetWidth用于鉴别元素是否被隐藏
							return getNextValidItem(index+1);
						}else{
							return item;
						}
					}
					function getPreValidItem(index){
						if(index<0){
							return getPreValidItem($all.length-1);
						}else{
							var item = $all[index];
							if(!item.offsetWidth){
								return getPreValidItem(index-1)
							}else{
								return item;
							}
						}
					}
				}
			});
		});
	},

	_assembleWhereString : function(whereString, wherePara){
		for(var i=0; i<wherePara.length; i++){
			var type = wherePara[i].fieldType.toLowerCase();
			var para = wherePara[i].paraValueStr;
			if(type !== 'number'){
				var para = "'" + para + "'";
			}
			whereString = whereString.replace('?', para);
		}
		return whereString;
	}
};

//扩展封装miniUI时所需添加或替换的函数库
mini.fsFuncStore = {

	//增强mini.alert
	mini_alert : function() {
		var message = arguments[0];
		var wait, title, callback;
		for(var i=1; i<arguments.length; i++){
			var type = typeof arguments[i]
			switch(type){
				case 'number':
					wait = arguments[i];
					break;
				case 'string':
					title = arguments[i];
					break;
				case 'function':
					callback = arguments[i];
					break;
			}
		}
		var id = mini.MessageBox.show( {
			minWidth : 250,
			title : title || mini.MessageBox.alertTitle,
			buttons : [ "ok" ],
			message : message,
			iconCls : "mini-messagebox-warning",
			callback : callback
		});
		if(wait && wait>0)
			window.setTimeout(function(){
				mini.hideMessageBox(id);
				if(callback)
					callback('close');
			},wait);
		return id;
	},
	//增强Array.indexOf函数
	Array_indexOf : function() {
		var comparer = arguments[0];
		var start = 0;
		if(typeof arguments[1] == 'number')
			start = arguments[1];
		if(typeof arguments[1] == 'function')
			var func = arguments[1];
		else if(typeof arguments[2] == 'function')
			var func = arguments[2];
		var length = this.length;
		if(func){
			for ( var i = (start < 0) ? Math.max(0, length + start) : start || 0; i < length; i++)
				if(func(this[i],comparer))
					return i;
		}else{
			for ( var i = (start < 0) ? Math.max(0, length + start) : start || 0; i < length; i++)
				if (this[i] === comparer)
					return i;
		}
		return -1
	},
	 /**
	  * 生成用于sql where子句的条件
	  * @return 组合出的条件字符串。如果属性、输入值不全或不符合要求则不返回值。
	  */
	validator_genFilter : function(){
		this.fieldName = this.fieldName ? this.fieldName : this.name;
		if(!this.fieldName || !this.operType || !this.operDataType
			|| mini.OPERTYPES.indexOf(this.operType)<0
			|| (this.operType.toLowerCase()=='like' && this.operDataType.toLowerCase()!='string') )
			return;
		var op;
		var value;
		switch(this.operDataType.toLowerCase()){
			case('date'):
				if(!this.text) return;
				op = this.operType;
				//value = "#BDATE"+this.text+"#EDATE";
				value = this.text;
				break;
			case('datetime'):
				if(!this.text) return;
				op = this.operType;
				//value = "#BDATE"+this.text+"#EDATETIME";
				value = this.text;
				break;
			case('number'):
				if(!this.value) return;
				op = this.operType;
				value = this.value;
				if(this.operType.toLowerCase()=='in'){
					op = ' in ';
					value = value.split(',');
					var interrogations = [];
					for(var i=0; i<value.length; i++){
						interrogations.push('?');
					}
					var where = this.fieldName + op + "("+interrogations.join(',')+")"
				}
				break;
			case('string'):
				if(this._textEl && !this._textEl.value) return;//对于看不到任何值的情况，认为没有值
				var text = this.getValue() ? this.getValue() : this.text;
				if(!text) return;
				var str = "'"+text+"'";
				value = text;
				op = this.operType;
				if(this.operType.toLowerCase()=='like'){
					op = ' like ';
					str = "%"+text+"%";
					value = str;
				}if(this.operType.toLowerCase()=='in'){
					op = ' in ';
					value = text.split(',');
					var interrogations = [];
					for(var i=0; i<value.length; i++){
						interrogations.push('?');
					}
					var where = this.fieldName + op + "("+interrogations.join(',')+")"
				}
				break;
		}
		return {
			fileldName: this.fieldName, 
			operType: op, 
			value: value,
			whereString: where || (this.fieldName + op + '?')
		}
	},

	/**
	 * 给listBox设置表名，并载入数据
	 * @param tableName 表名
	 * @param whereString 用于sql的where子句
	 * @param orderByString 用于sql的order by子句
	 * @param outcallback 执行后的回调函数
	 */
	listBox_loadByTableName : function (param, outcallback){
		var thisListBox = this;
		if(!param){
			param = {
				tableName: this.tableName,
				whereString: this.whereString ? this.whereString : '',
				orderByString: this.orderByString ? this.orderByString : '',
				groupByString: this.groupByString ? this.groupByString : '',
				addCaptionField: this.addCaptionField ? this.addCaptionField : false
			};
			if(this.selectFields)
				param.selectFields = this.selectFields;
		}
		param.fillChild = 'No';
		var callback = {
			callback: function (result){
				var data = [];
				for(var i=0; i<result.length; i++){
					var obj = result[i].originalObjects
					if("__textFieldList" == thisListBox.textField){
						var textDataList = [];
						for(var j=0; j<thisListBox.textFieldList.length; j++){
							textDataList.push(obj[thisListBox.textFieldList[j]]);
						}
						obj[thisListBox.textField] = textDataList.join(' ');
					}else if("__textFieldReg" == thisListBox.textField){
						var textValue = thisListBox._textField;
						for(var j=0; j<thisListBox.textFieldList.length; j++){
							var fieldExp = thisListBox.textFieldList[j];
							var field = fieldExp.replace('{','').replace('}','');
							var value = obj[field];
							textValue = textValue.replace(fieldExp,value);
						}
						obj[thisListBox.textField] = textValue;
					}
					if(thisListBox.pinyinField){
						var py = pinyin(obj[thisListBox.pinyinField],{
							style: thisListBox.fullPinyin ? 0 : 3,
							heteronym: true
						});
						for(var j=0; j<py.length; j++){
							py[j] = py[j][0];
							if (!thisListBox.fullPinyin && py[j].length>1){
								py[j] = py[j].substr(0,1);
							}
						}
						obj._py_ = py.join('');
					}
					data.push(obj);
				}
				var C = {
					data : data,
					cancel : false
				};

				thisListBox.fire("preload", C);
				if (C.cancel == true)
					return;
				thisListBox.setData(C.data);
				try{
					thisListBox.fire("load");
				}catch(e){
					console.warn(e)
				}
				if(outcallback)
					outcallback();
				setTimeout(function() {
					thisListBox.doLayout();
					thisListBox.fire('afterload');
				}, 100)
			},
			exceptionHandler: function (msg){
				console.error(msg);
				if(mini_debugger)
					alert(msg);
			}
		};
		if(this.rootId){
			FsService.getNextAllChilds(param.tableName,this.rootId,callback);
		}else if(param.uniqueField){
			FsService.getUniqueValue(param.tableName, param.uniqueField, param.addCaptionField,param.whereString, callback);
		}else{
			FsService.getEntityList(param.tableName,param,callback);
		}
		
	},
	dataSource_doLoadAjax : function(param, K, D, E, F) {
		param = param || {};
		if (mini.isNull(param.pageIndex))
			param.pageIndex = 0;
		if (mini.isNull(param.pageSize))
			param.pageSize = this.pageSize;
		// 排序字段
		if(this.sortField){
			param.sortField = this.sortField.toUpperCase();
			var index = param.sortField.indexOf('_DESC')
			if(index>0){
				var field = param.sortField.replace('_DESC','');
				if(index == field.length){
					param.sortField = field;
				}
			}
		}
		// 排序方式
		if(this.sortOrder){
			param.sortOrder = this.sortOrder;
		}
		this.loadParams = param;
		var url = this._evalUrl();
		var type = this._evalType(url);
		var event = {
			url : url,
			async : this.ajaxAsync,
			type : type,
			data : param,
			params : param,
			cache : false,
			cancel : false
		};
		if (event.data != event.params && event.params != param)
			event.data = event.params;
		var G = mini._evalAjaxData(this.ajaxData, this);
		mini.copyTo(event.data, G);
		mini.copyTo(event, this.ajaxOptions);
		this._OnBeforeLoad(event);
		if (event.cancel == true)
			return;
		var A = {};
		A[this.pageIndexField] = param.pageIndex;
		A[this.pageSizeField] = param.pageSize;
		if (param.sortField)
			A[this.sortFieldField] = param.sortField;
		if (param.sortOrder)
			A[this.sortOrderField] = param.sortOrder;
		mini.copyTo(param, A);
		var H = this.getSelected();
		this._selectedValue = H ? H[this.idField] : null;
		var C = this;
		C._resultObject = null;
		//判断查询方式
		if(param.rootId){
			this._dwrRecurSourceQuery(event,C,param);
		}else if(!param.tableName){
			this._ajaxDataSourceQuery(event,C,E,F,param,K);
		}else{
			this._dwrDataSourceQuery(event,C,param);
		}
	},
	//根据根节点递归获得全部后代节点数据
	dataSource_dwrRecurSourceQuery : function(event,dataTable,param){
		if(!param.tableName){
			throw new Error("tableName为空,请检查配置。");
		}
		FsService.getNextAllChilds(param.tableName,param.rootId,{callback:function(result){
			if(result){
				var dataInfo = {"data":[],"total":0};
				var recoreds = result;
				var datas = [];
				for(var i=0;i<recoreds.length;i++){
					for(var a in recoreds[i].currentObjects){
						recoreds[i].originalObjects[a] = recoreds[i].currentObjects[a];
					}
					datas.push(recoreds[i].originalObjects);
				}
				dataInfo.data = datas;
				dataInfo.total = 0;
				if (!dataInfo.data)
					dataInfo.data = [];
				if (!dataInfo.total)
					dataInfo.total = 0;
				dataTable._resultObject = dataInfo;
				dataTable._originalData = mini.clone(dataInfo.data);
				var event = {
					xhr : "",
					text : "",
					textStatus : "",
					result : dataInfo,
					total : dataInfo.total,
					data : dataInfo.data.clone(),
					pageIndex : param[dataTable.pageIndexField],
					pageSize : param[dataTable.pageSizeField]
				};
				dataTable.pageIndex = event.pageIndex;
				dataTable.pageSize = event.pageSize;
				dataTable.setTotalCount(event.total);
				dataTable._OnPreLoad(event);
				dataTable.setData(event.data);
				if (dataTable._selectedValue
						&& dataTable.checkSelectOnLoad) {
					var selNode = dataTable
							.getbyId(dataTable._selectedValue);
					if (selNode)
						dataTable.select(selNode)
				}
				if (dataTable.getSelected() == null
						&& dataTable.selectOnLoad
						&& dataTable.getDataView().length > 0)
					dataTable.select(0);
				dataTable.fire("load", event);
			}
		},exceptionHandler:function(msg){
			console.error(msg);
			if(mini_debugger)
				alert(msg);
		}}); 
	},
	dataSource_ajaxDataSourceQuery : function(event,C,E,F,I,K){
		mini
		.copyTo(
				event,
				{
					success : function(E, M, B) {
						var H = null;
						try {
							// 将E
							// json数据转换成对象H.data,H.total;
							H = mini.decode(E)
						} catch (event) {
							if (mini_debugger == true)
								console.error('后台返回json无效，已忽略');
								if(mini_debugger) alert('后台返回json无效，已忽略');
						}
						// H 是对象，非数组
						if (H && !mini.isArray(H)) {
							// mini._getMap(),取对象的值
							H.total = mini._getMap(
									C.totalField, H);
							H.data = mini._getMap(
									C.dataField, H)
						} else if (H == null) {
							// 如果查询数据为空，则初始化前台数据
							H = {};
							H.data = [];
							H.total = 0
						} else if (mini.isArray(H)) {
							// 如果H是数组，将H数据组成前台数据格式
							var G = {};
							G.data = H;
							G.total = H.length;
							H = G
						}
						if (!H.data)
							H.data = [];
						if (!H.total)
							H.total = 0;
						// C
						// 当前对象，将查询出来的数据赋值给_resultObject;
						C._resultObject = H;
						// 封装L对象，不过我拿L对象不知道怎么用。
						var event = {
							xhr : B,
							text : E,
							textStatus : M,
							result : H,
							total : H.total,
							data : H.data.clone(),
							pageIndex : I[C.pageIndexField],
							pageSize : I[C.pageSizeField]
						};
						// 调试时没有执行
						if (mini.isNumber(H.error)
								&& H.error != 0) {
							event.textStatus = "servererror";
							event.errorCode = H.error;
							event.stackTrace = H.stackTrace;
							event.errorMsg = H.errorMsg;
							if (mini_debugger == true){
								console.error(J+event.textStatus+event.stackTrace);
								if(mini_debugger)
									alert(J + "\n"
										+ event.textStatus
										+ "\n"
										+ event.stackTrace);
							}
							C.fire("loaderror", event);
							if (D)
								event.call(C, event)
						} else if (F)
							// F为 undefined
							F(event);
						else {
							C.pageIndex = event.pageIndex;
							C.pageSize = event.pageSize;
							C.setTotalCount(event.total);
							//
							C._OnPreLoad(event);
							// 设置数据源
							C.setData(event.data);
							if (C._selectedValue
									&& C.checkSelectOnLoad) {
								var A = C
										.getbyId(C._selectedValue);
								if (A)
									C.select(A)
							}
							if (C.getSelected() == null
									&& C.selectOnLoad
									&& C.getDataView().length > 0)
								C.select(0);
							C.fire("load", event);
							// K undefined
							if (K)
								K.call(C, event)
						}
					},
					error : function(A, F, B) {
						var E = {
							xhr : A,
							text : A.responseText,
							textStatus : F
						};
						E.errorMsg = A.responseText;
						E.errorCode = A.status;
						console.error('获取数据错误' + "\n"
								+ E.errorCode
								+ "\n" + E.errorMsg);
						if (mini_debugger == true) 
							alert('获取数据错误' + "\n"
								+ E.errorCode
								+ "\n" + E.errorMsg);
						C.fire("loaderror", E);
						if (D)
							event.call(C, E)
					},
					complete : function(A, D) {
						var B = {
							xhr : A,
							text : A.responseText,
							textStatus : D
						};
						C.fire("loadcomplete", B);
						if (E)
							E.call(C, B);
						C._xhr = null
					}
				});
		if (this._xhr)
			this._xhr.abort();
		this._xhr = mini.ajax(event)
	},
	//dwr扩展方法
	dataSource_dwrDataSourceQuery : function(event,dataTable,param){
		var that = this;
		if(!param.tableName){
			throw new Error("tableName属性为空");
		}
		// 发送ajax请求
		var queryFilter = {};
		if(event.params.sortField){
			queryFilter.orderByString = event.params.sortField+" "+event.params.sortOrder;
		}else{
			queryFilter.orderByString = event.params.orderByString;
		}
		queryFilter.activitiKey = event.params.activitiKey;
		queryFilter.groupByString = event.params.groupByString;
		queryFilter.whereString = param.whereString;
		queryFilter.whereParameter = param.wherePara;
		if(param.selectFields)
			queryFilter.selectFields = param.selectFields;
		//是否翻译字段
		queryFilter.addCaptionField = event.params.addCaptionField ? event.params.addCaptionField : false;
		
		//查询子表的方法
		queryFilter.fillChild = event.params.fillChild;
		// 收集分页信息
		var pageInfo = {};
		pageInfo.pageCount = 9999
		pageInfo.pageSize = event.params.pageSize;
		pageInfo.pageIndex = event.params.pageIndex+1;
		pageInfo.rowCount = 0;
		var columns = event.params.columns;
		FsService.pageSelect(param.tableName,queryFilter,pageInfo,{callback:function(result){
			if(result){
				var H = {"data":[],"total":0};
				// 后台记录
				var recoreds = result[0];
				var recordLength = recoreds.length;
				if(that instanceof mini.DataTree && recordLength > mini.fsConfigs.BIG_DATA_WARNING_LINE){
					var msg = "获取数据量过大，仅保留前" + mini.fsConfigs.BIG_DATA_WARNING_LINE + "条数据";
					recordLength = mini.fsConfigs.BIG_DATA_WARNING_LINE;
					console.warn(msg);
					mini.alert(msg);
				}
				// 后台分页信息
				var pi = result[1];
				var datas = [];
				for(var i=0;i<recordLength;i++){
					//将currentObjects对象中的数据放入到originalObjects中
					var record = recoreds[i]
					for(var a in record.currentObjects){
						recoreds[i].originalObjects[a] = record.currentObjects[a];
					}
					//将数据中的日期对象按照列的dateFormat属性格式化为字符串
					for(var a in record.originalObjects){
						if(columns){
							var value = record.originalObjects[a];
							var index = columns.indexOf(a,function(curr,op){
								if(curr.field===op) return true;
							});
							if(index>=0){
								var colunm = columns[index];
								if(colunm.dateFormat && value instanceof Date){
									record.originalObjects[a] = mini.formatDate(value,colunm.dateFormat)
								}
							}
						}
					}
					datas.push(record.originalObjects);
				}
				H.data = datas;
				H.total = pi.rowCount;
				if (!H.data)
					H.data = [];
				if (!H.total)
					H.total = 0;
				dataTable._resultObject = H;
				dataTable._originalData = mini.clone(H.data);
				var event = {
					xhr : "",
					text : "",
					textStatus : "",
					result : H,
					total : H.total,
					data : H.data.clone(),
					pageIndex : param[dataTable.pageIndexField],
					pageSize : param[dataTable.pageSizeField]
				};
				dataTable.pageIndex = event.pageIndex;
				dataTable.pageSize = event.pageSize;
				dataTable.setTotalCount(event.total);
				dataTable._OnPreLoad(event);
				dataTable.setData(event.data);
				if (dataTable._selectedValue
						&& dataTable.checkSelectOnLoad) {
					var selNode = dataTable
							.getbyId(dataTable._selectedValue);
					if (selNode)
						dataTable.select(selNode)
				}
				if (dataTable.getSelected() == null
						&& dataTable.selectOnLoad
						&& dataTable.getDataView().length > 0)
					dataTable.select(0);
				dataTable.fire("load", event);
			}
		},exceptionHandler:function(msg){
			var event = {msg:msg, skip:false};
			that.fire("loaderror", event);
			if(event.skip) return;
			console.error(msg);
			if(mini_debugger) alert(msg);
		}}); 
	},

	DataTree_setData : function(data){
		if(typeof data === 'string'){
			data = JSON.parse(data);
			if (this.resultAsTree == false)
				data = mini.arrayToTree(data, this.nodesField, this.idField, this.parentField);
		}
		this.loadData(data);
	},

	DataTree_cascadeChild : function(node, callback, context) {
		if (!callback) return;
		if (!node) node = this.root;
		var children = node[this.nodesField];
		if (children) {
			children = children.clone();
			for ( var i = 0, l = children.length; i < l; i++) {
				var childNode = children[i];
				var r = callback.call(context || this, childNode, i, node);
				if (r === false) return;
				if (r === 'skip') continue;
				this.cascadeChild(childNode, callback, context)
			}
		}
	},

	DataTree_getCheckedNodes : function(checkType) {
		var checkedNodes = [], parentIds = {};
		this.cascadeChild(this.root, function(node, index, parent) {
			if (node.checked == true) {
				var isLeaf = this.isLeafNode(node);
				if (checkType === true) {
					checkedNodes.push(node);
					var ancestors = this.getAncestors(node);
					for ( var i = 0, l = ancestors.length; i < l; i++) {
						var G = ancestors[i];
						if (!parentIds[G._id]) {
							parentIds[G._id] = G;
							checkedNodes.push(G)
						}
					}
				} else if (checkType === "parent") {
					if (!isLeaf)
						checkedNodes.push(node)
				} else if (checkType === "leaf") {
					if (isLeaf)
						checkedNodes.push(node)
				} else if (checkType === "reduce") {
					checkedNodes.push(node);
					return 'skip';
				} else
					checkedNodes.push(node)
			}
		}, this);
		return checkedNodes
	}
}

//补丁库。对原miniUI的错误进行修正的替换函数
mini.fsPatch = {
	/**
	 * 滚动区域对鼠标滚轮事件的处理
	 * 在jQuery1.7及以上版本中，滚轮事件的event对象中没有wheelDelta和detail属性，
	 * 对于缺少这两个属性的情况，函数直接返回，采用默认事件处理
	 */
	ScrollGridView___OnMouseWheel : function(event) {
		var wheelDelta = event.wheelDelta;
		if (!wheelDelta)
			wheelDelta = -event.detail * 24;
		if(!wheelDelta)
			return;
		var newTop = this.getScrollTop() - wheelDelta, 
			top = this.getScrollTop();
		this.setScrollTop(newTop);
		if (top != this.getScrollTop() || this.isVirtualScroll())
			event.preventDefault()
	},

	/**
	 * 修正TextBox设置值为NaN的数字时直接显示“NaN”的问题
	 */
	TextBox_setValue : function(A){
		if (A === null || A === undefined || (typeof A=='number' && isNaN(A)))
			A = "";
		A = String(A);
		if (A.length > this.maxLength)
			A = A.substring(0, this.maxLength);
		if (this.value !== A) {
			this.value = A;
			this._valueEl.value = this._textEl.value = A;
			this._doEmpty()
		}
		if(this.vtype.indexOf('number')===0)
			this.__fixDecLength();
	},

	mini_doParse : function(I){
		if(typeof I.className == 'string')
			old_doParse.call(this, I);
	}
};

 //==================================== 以下是对原有类加工的代码 ====================================\\
//====================================================================================================\\
/**
 * 对miniUI源代码定义的类（function）进行加工。
 * 这里会重写或新增源代码中已声明的类中的属性或方法。通过改写prototype实现。
 * 注意：对一个类（function）重写或新增的属性和方法*不会*被继承到他的子类中，
 *	   但set、getAttrs等覆盖的方法通常会先执行父类的相应方法。
 *	   仅当确定新增的属性和方法不会对类的原有功能有任何影响时，才可在此操作类(function)的原型(prototype)，
 *	   否则在封装控件的代码中在构造函数或调用函数中对this对象操作。
 *	   这段代码必须放在工具和函数库代码之后，新的继承类代码之前。
 */

//加工DataTree，使其可以通过dwr方式获取数据
mini._fsUtil.updateDataSourceProto(mini.DataTree);
//加工DataTable，使其可以通过dwr方式获取数据
mini._fsUtil.updateDataSourceProto(mini.DataTable);
//加工ListBox，使其可以通过dwr方式获取数据
mini._fsUtil.updateListControlProto(mini.ListBox);
//为ValidatorBase添加属性，使其子类（表单控件）可添加、访问这些属性。这里添加的属性无set、get方法
mini._fsUtil.attachStringAttrs(mini.ValidatorBase,[ "operType","operDataType","fieldName" ]);
//为ValidatorBase添加 生成用于sql where字句的条件，其子类（表单控件）可使用此方法。
mini._fsUtil.attachGenFilterMethod([mini.DatePicker, mini.TextBox, mini.AutoComplete,
		mini.TextArea, mini.ComboBox, mini.Password, mini.Spinner, mini.TreeSelect ]);
//对滚轮事件处理进行修正
mini.Tree.prototype.__OnMouseWheel = mini.fsPatch.ScrollGridView___OnMouseWheel;
mini.DataGrid.prototype.__OnMouseWheel = mini.fsPatch.ScrollGridView___OnMouseWheel;
mini.TreeGrid.prototype.__OnMouseWheel = mini.fsPatch.ScrollGridView___OnMouseWheel;
//对设置NaN进行修正
mini.TextBox.prototype.setValue = mini.fsPatch.TextBox_setValue;
//修正页面中存在数组形式className的元素是出错的问题
mini._fsUtil.fix_mini_doParse();
//取消树的20条数据的限制
mini.DataTree.prototype.pageSize=9999;
/**
 * Array对象获取对象位置的方法。增加了通过比较函数获取位置的功能
 * 调用方式： arr.indexOf(comparer,[start],[func])
 * @param comparer 比较因子，如果没有func则直接与每个元素比较，如果有func则作为func的第二个参数
 * @param start
 * @param func 比较函数，其参数为(当前被比较的元素，比较因子)，返回true即表示匹配成功
 */
Array.prototype.indexOf = mini.fsFuncStore.Array_indexOf;
//表格默认初始时加载
mini.DataTable.prototype.autoLoad = true;
//给TextBox添加数字输入限制和小数补全功能
mini._fsUtil.enhanceTextBoxNumber();
/**
 * 增强mini.alert，增加超时自动关闭功能，除消息内容外参数位置随意
 * 使用方式：mini.alert(message[,title][,wait][,callback])
 * @param message 提示文字
 * @param title 弹出框的标题
 * @param wait 超时关闭的时间
 * @param callback 关闭时的回调函数，参数：type[ok|close]
 */
mini.alert = mini.fsFuncStore.mini_alert;
//让DatePicker可以根据另一个DatePicker控件限制自己的时间选择范围
mini._fsUtil.enhanceDatePicker();
//按tab键跳到下一个输入项，按shift+tab跳到上一个输入项
mini._fsUtil.enhanceTab();
//改进tree的setData方法，使其可组装数据位树状
mini.DataTree.prototype.setData = mini.fsFuncStore.DataTree_setData;
//DataTree的cascadeChild函数当其回调函数返回'skip'则跳过递归子节点
mini.DataTree.prototype.cascadeChild = mini.fsFuncStore.DataTree_cascadeChild;
//Tree的getCheckedNodes函数增加归约获取节点的功能（子节点全部选取时仅获取最高级节点），参数为'reduce'
mini.DataTree.prototype.getCheckedNodes = mini.fsFuncStore.DataTree_getCheckedNodes;
 //====================================== 以下是封装控件的代码 ======================================\\
//====================================================================================================\\


/**
 * #FsDataGrid
 * 扩展功能：1.通过表名获取数据
 *		   2.绑定弹出的表单
 * 新增属性：1.tableName			表名
 *		   2.whereString			查询表的where子句
 *		   3.orderByString		查询表的order by子句
 *		   4.queryFormId			
 *		   5.popFormUrl	
 *		   8.serverSync			与服务器同步(若为fasle，数据修改只反映到表格中，而非保存到服务器)
 *		   9.relationTableName	关系表的表名。如果有此属性，则grid根据tableName载入数据作为载体，根据relationTableName载入的数据用于勾选
 *		   10.refreshAfterSave	是否保存后刷新，如果为false则不刷新修改表格的行数据，默认false
 *		   11.idFieldForChild		作为子表外键关联的主键，默认为idField
 *		   12.addCaptionField	 是否获取字典项字段所对应的名称。默认为true，开启此功能会影响查询效率
 *		   13.excelTemplate	   导出Excel的模板文件名（模板名需小写）
 * 新增事件：1.popupBoxLoad		弹出新增/编辑窗口时执行		参数：box[弹出窗口的miniUI对象]
 *		   2.afterlayout		表格布局结束（任何显示上的变化都会触发）
 *		   3.popformloaded	弹出form载入完成
 *		   4.beforeformsave	弹出form保存前执行，如果e.cancel==true则取消保存
 **/
mini.FsDataGrid = function() {
	mini.FsDataGrid.superclass.constructor.call(this);
};
mini.extend(mini.FsDataGrid, mini.DataGrid, {
	uiCls : "mini-fs-datagrid",
	addCaptionField : true,
	idDataType : 'number',
	popFormWidth : 400,
	popFormHeight : 300,
	moduleName : "",
	serverSync : true,
	closePopWinAfetrSave : true,
	refreshAfterSave : false,
	showSaveSuccessTip : true,
	showSaveFailTip : true,
	showCommitSuccessTip : true,
	showCommitFailTip : true,
	confirmOnSave : false,
	confirmOnSubmit : true,
	_prepareParse : [],//需要渲染的id
	loadingMsg : "正在加载...",
	getAttrs : function(A) {
		var B = mini.FsDataGrid.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName",
								  "whereString",
								  "selectFields",
								  "orderByString", 
								  "groupByString",
								  "idDataType",
								  "popFormId", 
								  "queryFormId",
								  "idFieldForChild",
								  "foreignField", 
								  "foreignDataType",
								  "relationTableName",
								  "popFormUrl",
								  "moduleName",
								  "addBtnId", 
								  "editBtnId", 
								  "toolbarId",
								  "activitiKey",
								  "refreshAfterSave",
								  "excelTemplate",
								  "onpopformloaded",
								  "onbeforeformsave",
								  "ongridsavesuccess",
								  "onaftergridsave",
								  "onpopformsavesuccess",
								  "onpopformsavefail",
								  "onpopfrombuilt",
								  "oncommitsuccess",
								  "oncommitfail",
								  "onbeforecommit",
								  "onremovesuccess",
								  "onbeforeremove",
								  "onbeforesearch",
								  "onbeforeadd",
								  "onbeforeedit",
								  "onbeforeexportexcel",
								  "onloaderror"
								]);
		mini._ParseBool(A, B, ["isChild", 
							   "addCaptionField",
							   "serverSync",
							   "closePopWinAfetrSave",
							   "showSaveSuccessTip",
							   "showSaveFailTip",
							   "showCommitSuccessTip",
							   "showCommitFailTip",
							   "confirmOnSave",
							   "confirmOnSubmit"]);
		mini._ParseInt(A, B, [ "popFormWidth", "popFormHeight" ]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var isChild = C.isChild;
		delete C.isChild;
		var relationTableName = C.relationTableName;
		delete C.relationTableName;
		var idDataType = C.idDataType;
		delete C.idDataType;
		var orderByString = C.orderByString;
		delete C.orderByString;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var whereString = C.whereString;
		delete C.whereString;
		var addCaptionField = C.addCaptionField;
		delete C.addCaptionField;
		var tableName = C.tableName;
		delete C.tableName;
		var queryFormId = C.queryFormId;
		delete C.queryFormId;
		var popFormUrl = C.popFormUrl;
		delete C.popFormUrl;
		var popFormWidth = C.popFormWidth;
		delete C.popFormWidth;
		var popFormHeight = C.popFormHeight;
		delete C.popFormHeight;
		var addBtnId = C.addBtnId;
		delete C.addBtnId;
		var editBtnId = C.editBtnId;
		delete C.editBtnId;
		var toolbarId = C.toolbarId;
		delete C.toolbarId;
		var moduleName = C.moduleName;
		delete C.moduleName;
		var popFormId = C.popFormId;
		delete C.popFormId;
		mini.FsDataGrid.superclass.set.call(this, C);
		if (!mini.isNull(isChild))
			this.setIsChild(isChild);
		if (!mini.isNull(relationTableName))
			this.setRelationTableName(relationTableName);
		if (!mini.isNull(idDataType))
			this.setIdDataType(idDataType);
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(whereString)){
			this._originWhereString = whereString;
			this.setWhereString(whereString);
		}
		if (!mini.isNull(addCaptionField))
			this.setAddCaptionField(addCaptionField);
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		if (!mini.isNull(queryFormId))
			this.setQueryFormId(queryFormId);
		if (!mini.isNull(popFormUrl))
			this.setPopFormUrl(popFormUrl);
		if (!mini.isNull(popFormWidth))
			this.setPopFormWidth(popFormWidth);
		if (!mini.isNull(popFormHeight))
			this.setPopFormHeight(popFormHeight);
		if (!mini.isNull(addBtnId))
			this.setAddBtnId(addBtnId);
		if (!mini.isNull(editBtnId))
			this.setEditBtnId(editBtnId);
		if (!mini.isNull(toolbarId))
			this.setToolbarId(toolbarId);
		if (!mini.isNull(moduleName))
			this.setModuleName(moduleName);
		if (!mini.isNull(popFormId))
			this.setPopFormId(popFormId);
		// this._initBtns();
		return this;
	},
	_initEvents : function(){
		mini.FsDataGrid.superclass._initEvents.call(this);
		var grid = this;
		this.on('drawcell',function(e){grid.__drawRowBtns(e);});
		this.on('drawcell',function(e){grid.__drawFlowChartLink(e);});
		this.on('drawcell',function(e){grid.__drawAuditState(e);});
		this.on('drawcell',function(e){grid.__drawFileList(e);});
		//this.on('drawcell',function(e){grid.__colorFlowState(e);});
		this.on('afterLayout',function(e){grid.__parseRowBtns(e)});
		this.on('afterLayout',function(e){
			//渲染文件列表
			for(var i=0, l=this._prepareParse.length; i<l; i++){
				mini.parse(this._prepareParse[i]);
			}
		});
		this.on('selectionchanged',this._rowselect);
		this.on('cellclick',this.__clickCell,this);
		this.on('popformsavesuccess', function(e){
			if(e.saveType === "insert"){
				this._dataSource.setTotalCount(this._dataSource.getTotalCount()+1);
			}
		}, this);
		this.on('removesuccess', function(e){
			this._dataSource.setTotalCount(this._dataSource.getTotalCount()-e.rows.length);
		}, this)
	},
	//根据工作流状态对行进行全行着色
	__colorFlowState : function(e){
		if(e.columnIndex===0){
			var grid = this;
			var row = e.row;
			//暂用taskid进行判断，以后根据工作流实际判断参数修改
			if(row.S_PROCESSINSTANCEID){
				if(row.TASKID){
					//着色要放到布局完成的事件中执行
					grid.on('afterLayout',function(){
						//颜色样式在js\mini\themes\default\grid.css中定义，以后根据需要添加
						grid.addRowCls(row,'mini-grid-flow-red');
					});
				}
			}
		}
	},
	_rowselect : function(e){
		this._dealToolBtns();
	},
	_dealToolBtns : function(){
		var rows = this.getSelecteds();
		var $bar = $('#'+this.toolbarId);
		if(!$bar.length)
			return;
		var that = this;
		if(rows.length>1){
			mini.fsUtil.disableBtn($bar.find(
				'.mini-fs-edit-button,.mini-fs-audit-button,'+
				'.mini-fs-viewflow-button,.mini-fs-graphtrace-button'));
			var nodel = false;
			for(var i=0; i<rows.length; i++){
				if(rows[i].S_PROCESSINSTANCEID){
					nodel = true;
					break;
				}
			}
			if(nodel){
				mini.fsUtil.disableBtn($bar.find('.mini-fs-del-button'));
			}else{
				mini.fsUtil.enableBtn($bar.find('.mini-fs-del-button'));
			}
			return;
		}else if(rows.length==1){
			var row = rows[0];
			//如果taskId为空，编辑与审核变灰(如果有S_PROCESSINSTANCEID,则有工作流;当TASKID为空时)
			if(row.S_PROCESSINSTANCEID){
				mini.fsUtil.disableBtn($bar.find('.mini-fs-edit-button'));
				mini.fsUtil.disableBtn($bar.find('.mini-fs-del-button'));
				if(row.TASK_STATE=='已结束')
					mini.fsUtil.disableBtn($bar.find('.mini-fs-graphtrace-button'));
				else
					mini.fsUtil.enableBtn($bar.find('.mini-fs-graphtrace-button'));
			}else{
				mini.fsUtil.enableBtn($bar.find('.mini-fs-edit-button'));
				mini.fsUtil.enableBtn($bar.find('.mini-fs-del-button'));
				mini.fsUtil.disableBtn($bar.find('.mini-fs-graphtrace-button'));
			}
			if(row.TASKID){
				mini.fsUtil.enableBtn($bar.find('.mini-fs-audit-button'));
			}else{
				mini.fsUtil.disableBtn($bar.find('.mini-fs-audit-button'));
			}
			mini.fsUtil.enableBtn($bar.find('.mini-fs-viewflow-button'));
		}else if(rows.length==0){
			var btns = [
				'.mini-fs-viewflow-button',
				'.mini-fs-audit-button',
				'.mini-fs-graphtrace-button',
				'.mini-fs-edit-button',
				'.mini-fs-del-button'
			]
			mini.fsUtil.disableBtn($bar.find(btns.join(',')));
		}
	},
	__drawFileList : function(e){
		if(e.column.type != 'filecolumn' || !e.cellHtml)
			return;
		var id = this.id + 'file' + e.record[this.getIdField()];
		this._prepareParse.push(id);
		e.cellHtml = '<input id="'+id+'" class="mini-fs-file" value="'+e.value+'" inline="true">';
	},
	__drawFlowChartLink : function(e){
		var grid = this;
		if(e.column.type != 'flowchartcolumn')
			return;
		var proid = e.row.S_PROCESSINSTANCEID;
		if(!proid || e.row.TASK_STATE=='已结束')
			return;
		var colorStyle = e.row.TASKID ? 'style="color:red"' : '';
		e.cellHtml = '<a href="javascript:mini.fsUtil.showGraphTrace(' + proid + ')" '
				+ colorStyle+'>' + e.cellHtml + '</a>';
	},
	__drawAuditState : function(e){
		if(e.column.type != 'auditstate' || !e.row.TASKID)
			return;
		e.cellHtml = '<span style="color:red;cursor:pointer;">'+e.cellHtml+'</span>'
	},
	__clickCell : function(e){
		if(e.column.type != 'auditstate' || !e.row.TASKID)
			return;
		this._onAudit(true);
	},
	//添加航按钮的html片段
	__drawRowBtns : function(e){
		var grid = this;
		if(e.column.type=='buttoncolumn'){
			var btnHtml = {
//				edit: '<a class="mini-button fs-gird-row-btn inrowedit">编辑</a>',
//				del: '<a class="mini-button fs-gird-row-btn inrowdel">删除</a>',
//				approve: '<a class="mini-button fs-gird-row-btn inrowapprove">审批</a>',
//				view: '<a class="mini-button fs-gird-row-btn inrowview">查看</a>'
			};
			var inuseBtn = [];
			var defBtn = e.column.defaultValue;
			if(!defBtn)
				defBtn = 'edit,del,approve,view';
			defBtn = defBtn.split(',');
			for (var i=0; i<defBtn.length; i++){
				if((defBtn[i]!='approve'&&defBtn[i]!='view') || 
						e.row.TASKID)
				inuseBtn.push(btnHtml[defBtn[i]]);
			}
			e.cellHtml = e.cellHtml ? e.cellHtml : '';
			e.cellHtml += inuseBtn.join(' ');
			var header = e.column.header;
			if(header.indexOf('mini-datagrid-rowbuttons')>0){
				var $tempDiv = $(e.sender.el)
					.append('<div id="tempfsgridrowbtn">'+header+'</div>')
					.find('#tempfsgridrowbtn');
				var userBtns = $tempDiv.find('.mini-datagrid-rowbuttons').html();
				e.cellHtml += userBtns;
				$tempDiv.remove();
				$(e.sender.el).find('.mini-datagrid-rowbuttons').remove();
			}
		}
	},
	//转化行按钮样式并为默认按钮添加事件
	__parseRowBtns : function(e){
		var grid = this;
		var $btns = $(e.sender.el).find('.fs-gird-row-btn');
		if(!$btns.length)
			return;
		mini.parse(grid.el.id);
		$btns.filter('.inrowedit').unbind('click').click(function(){
			var row = grid.getSelected();
			grid._editRow(row);
		});
		$btns.filter('.inrowdel').unbind('click').click(function(){
			var row = grid.getSelected();
			grid.delRows([row]);
		});
		$btns.filter('.inrowapprove').unbind('click').click(function(){
			var row = grid.getSelected();
			grid._showApprove(row);
		});
		$btns.filter('.inrowview').unbind('click').click(function(){
			var row = grid.getSelected();
			grid._showViewHistory(row);
		});
	},
	_showApprove : function(row){
		var grid = this;
		var id = row[this.getIdField()];
		var taskId = row.TASKID;
		if(!this.getPopFormUrl()){
			throw new Error("异常信息:dataGridId不能为空!");			
		}
		var url = this.getPopFormUrl()+"&taskId="
				+taskId+"&tableName=FS_APPROVE_HISTORY&bussTableName="+this.tableName+"&bussId="+id;
		var title = grid.getModuleName();
		mini.openIbox({
			url : url,
			title : '审批'+title,
			onload:function(){
				var form = new mini.FsForm(this.iboxId,grid.tableName);
				form.setData(row);
			}
		});
	},
	_showViewHistory : function(row){

	},
	// _initBtns : function(){
	// 	var that = this;
	// 	$('#'+this.addBtnId).click(function(){
	// 		that.showAddBox();
	// 	});
	// 	$('#'+this.editBtnId).click(function(){
	// 		that.showEditBox();
	// 	});
	// },
	setIsChild : function(isChild){
		this.isChild = isChild;
		this.setShowPager(false);
		this.setPageSize(9999);
	},
	setRelationTableName : function(relationTableName){
		this.relationTableName = relationTableName;
		this.setIsChild(true);
		this.setMultiSelect(true);
		this.changeSelectToCheckStyle();
	},
	getRelationTableName : function(){
		return this.relationTableName;
	},
	setIdDataType : function(idDataType){
		idDataType = idDataType.toLowerCase();
		if(mini.OPERDATATYPES.indexOf(idDataType)>=0)
			this.idDataType = idDataType;
		else{
			console.error('"'+idDataType+'"不是有效的数据类型，将使用默认数据类型"number"。');
			if(mini_debugger) 
				alert('"'+idDataType+'"不是有效的数据类型，将使用默认数据类型"number"。');
		}
	},
	getIdDataType : function(){
		return this.idDataType;
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
	},
	getselectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this.whereString = whereString;
	},
	getWhereString : function(){
		return this.whereString;
	},
	setAddCaptionField : function(addCaptionField){
		this.addCaptionField = addCaptionField;
	},
	isAddCaptionField : function(){
		return this.addCaptionField;
	},
	/**
	 * 设置表名并载入数据
	 * @param tableName
	 */
	setTableName : function(tableName) {
		this.tableName = tableName;
		if(!(this.autoLoad || (this.getAutoLoad && this.getAutoLoad())) || (this.isChild && !this.relationTableName))
			return;
		this.loadByTableName();
	},
	/**
	 * 重写父类函数，在布局结束后增加afterLayout事件的触发
	 */
	doLayout : function() {
		mini.FsDataGrid.superclass.doLayout.call(this);
		this.fire('afterLayout');
	},
	loadByTableName : function(){
		var param = {
			tableName : this.tableName,
			addCaptionField: this.addCaptionField,
			fillChild: "No",
			orderByString: this.orderByString ? this.orderByString : "",
			groupByString: this.groupByString ? this.groupByString : "",
			whereString: this.whereString ? this.whereString : "",
			activitiKey: this.activitiKey ? this.activitiKey : "",
			columns : this._columnModel.columns
		};
		if(this.selectFields)
			param.selectFields = this.selectFields;
		this._dataSource.load(param);
	},
	refresh : function(){
		this.loadByTableName();
	},
	setQueryFormId : function(queryFormId){
		this.queryFormId = queryFormId;
		try{
			this.getQueryForm();
		}catch(e){console.error(e)}
	},
	getQueryFormId : function(){
		return this.queryFormId;
	},
	setPopFormUrl : function(popFormUrl){
		this.popFormUrl = popFormUrl;
	},
	getPopFormUrl : function(){
		return this.popFormUrl;
	},
	setPopFormWidth : function(popFormWidth){
		this.popFormWidth = popFormWidth;
	},
	getPopFormWidth : function(){
		return this.popFormWidth;
	},
	setPopFormHeight : function(popFormHeight){
		this.popFormHeight = popFormHeight;
	},
	getPopFormHeight : function(){
		return this.popFormHeight;
	},
	setAddBtnId : function(addBtnId){
		this.addBtnId = addBtnId;
	},
	getAddBtnId : function(){
		return this.addBtnId;
	},
	setEditBtnId : function(editBtnId){
		this.editBtnId = editBtnId;
	},
	getEditBtnId : function(){
		return this.editBtnId;
	},
	setModuleName : function(moduleName){
		this.moduleName = moduleName;
	},
	getModuleName : function(){
		return this.moduleName;
	},
	setPopFormId : function(popFormId){
		this.popFormId = popFormId;
	},
	getPopFormId : function(){
		return this.popFormId;
	},
	setToolbarId : function(toolbarId){
		this.toolbarId = toolbarId;
		this._buildToolbar();
	},
	getToolbarId : function(){
		return this.toolbarId;
	},
	getQueryForm : function(){
		var grid = this;
		if(this._queryForm)
			return this._queryForm;
		else{
			var form = new mini.FsForm(this.queryFormId);
			this._queryForm = form;
			form.on('search',function(e){
				var where = grid.whereString ? 
						grid.whereString : '1=1';
				where = e.whereString ? 
						e.whereString + ' and ' + where: 
						where ;
				var param = {
					tableName : grid.tableName,
					addCaptionField: grid.addCaptionField,
					fillChild: "No",
					orderByString: grid.orderByString ? grid.orderByString : "",
					groupByString: this.groupByString ? this.groupByString : "",
					whereString: where + ' ',
					wherePara: e.wherePara || [],
					activitiKey: grid.activitiKey
				};
				grid._queryWhereString = where;
				grid._queryPara = param.wherePara;
				var event = {param:param, cancel:false};
				grid.fire('beforesearch', event);
				if(!event.cancel)
					grid.load(param);
			});
			$(form.el).find('.mini-fs-reset-button').click(function(){
				grid._dataSource.sortField = '';
				grid._dataSource.sortOrder = '';
			});
			return form;
		}
	},
	getForm : function(){
		var grid = this;
		if(this._form)
			return this._form;
		else{
			this._form = new mini.FsForm(
				this.popFormId,this.tableName,this.getIdField());
			if(this.activitiKey)
				this._form.setActivitiKey(this.activitiKey);
			this._form.afterSave = function(data,saveType){
				var row = grid.getSelected();
				if(saveType=='update'){
					grid.updateRow ( row, data );
				}else if(saveType=='insert'){
					grid.addRow (data, grid.indexOf(row));
				}
				mini.alert('保存成功');
			};
			this._form.afterOK = function(data,saveType){
				var row = grid.getSelected();
				if(saveType=='update'){
					grid.updateRow ( row, data );
				}else if(saveType=='insert'){
					grid.addRow (data, grid.indexOf(row));
				}
				grid.getFormWindow().hide();
			}
			return this._form;
		}
	},
	getFormWindow : function(){
		var grid = this;
		if(this._formWindow)
			return this._formWindow;
		else{
			var win = mini.get(this.popFormId);
			if(!win){
				win = {
					hide : function(){},
					show : function(){}
				};
			}else{
				$(win.el)
					.find('.mini-fs-close-button')
					.click(function(){
						if(grid.getForm().isChanged())
							mini.confirm("有内容已经更改，确定要关闭吗？", "确认操作", function (action){
								if(action=='ok')
									win.hide();
							});
						else
							win.hide();
					});
			}
			this._formWindow = win;
			return this._formWindow;
		}
	},
	//给工具条内的按钮绑定事件
	_buildToolbar : function(){
		var $bar = $('#'+this.toolbarId);
		if(!$bar.length)
			return;
		var that = this;
		//新增按钮
		$bar.find('.mini-fs-add-button').click(function(){that._onAdd()});
		//编辑按钮
		$bar.find('.mini-fs-edit-button').click(function(){that._onEdit()});
		//批量删除按钮
		$bar.find('.mini-fs-del-button').click(function(){that._onDel()});
		//可编辑表格保存按钮
		$bar.find('.mini-fs-save-button').click(function(){that.saveCurrentPage()});
		//导出Excel按钮
		$bar.find('.mini-fs-export-button').click(function(){that._onExportExcel()});
		//导出当页内容到Excel按钮
		$bar.find('.mini-fs-export-page-button').click(function(){
			that._onExportExcelOnePage()
		});
		//审核按钮
		$bar.find('.mini-fs-audit-button').click(function(){that._onAudit(true)});
		//查看历史工作流程按钮
		$bar.find('.mini-fs-viewflow-button').click(function(){that._onAudit(false)});
		//查看工作流图按钮
		$bar.find('.mini-fs-graphtrace-button').click(function(){that._showGraphRrace()});
		//工具条内的简单查找按钮
		$bar.find('.mini-fs-search-button').click(function(){that._onSearch()});
		//工具条内的简单查找文本框
		$bar.find('.mini-fs-search-box').keyup(function(e){
			if(e.keyCode==13)
				that._onSearch();
		});
		mini.fsUtil.disableBtn($bar.find(
			'.mini-fs-edit-button,.mini-fs-del-button,' +
			'.mini-fs-audit-button,.mini-fs-viewflow-button,.mini-fs-graphtrace-button'));
	},
	//请求后台导出Excel
	_onExportExcel : function(){
		var columns = this._columnModel.columns;
		var queryFields = [];
		var displayFields = [];
		for(var i=0; i<columns.length; i++){
			if(columns[i].field){
				queryFields.push(columns[i].field);
				displayFields.push(columns[i].header.trim());
			}
		}
		var where = this._queryWhereString ? 
				mini._fsUtil._assembleWhereString(this._queryWhereString, this._queryPara) :
				this.whereString;
		var args = {
			tableName : this.tableName,
			queryFields : queryFields,
			displayFields : displayFields,
			whereString : where,
			moduleName : this.moduleName,
			orderByString : this.orderByString,
			groupByString : this.groupByString,
			template : this.excelTemplate
		}
		var e = {
			cancel: false,
			args: args
		}
		this.fire('beforeexportexcel', e);
		if(e.cancel) return;
		mini.fsUtil.genExcel(e.args);
	},
	//请求后台导出Excel，仅当前页内容
	_onExportExcelOnePage : function(){
		var columns = this._columnModel.columns;
		var queryFields = [];
		var displayFields = [];
		for(var i=0; i<columns.length; i++){
			if(columns[i].field){
				queryFields.push(columns[i].field);
				displayFields.push(columns[i].header.trim());
			}
		}
		var args = {
			tableName : this.tableName,
			queryFields : queryFields,
			displayFields : displayFields,
			whereString : this._queryWhereString ? this._queryWhereString : this.whereString,
			moduleName : this.moduleName,
			orderByString : this.orderByString,
			groupByString : this.groupByString,
			template : this.template,
			data: JSON.stringify(this._dataSource.source)
		}
		var e = {
			cancel: false,
			args: args
		}
		this.fire('beforeexportexcel', e);
		if(e.cancel) return;
		mini.fsUtil.genExcel(e.args);
	},
	_showGraphRrace : function(){
		var row = this.getSelected();
		var proid = row.S_PROCESSINSTANCEID;
		if(!proid || row.TASK_STATE=='已结束')
			return;
		mini.fsUtil.showGraphTrace(proid);
	},
	_onAdd : function(){
		var e = {cancel:false};
		this.fire('beforeadd',e);
		if(e.cancel) return;
		if(this.popFormUrl){
			this._popupBox();
		}else if(this.popFormId){
			this._showFormWindow();
		}else{
			var newRow = {  };
			var columns = this._columnModel._fieldColumns;
			for(var field in columns)
				if(columns[field] && (columns[field].defaultValue || columns[field].defaultValue===0))
					newRow[field] = columns[field].defaultValue;
			this.addRow(newRow, 0);
		}
	},
	_onEdit : function(){
		var e = {cancel:false};
		this.fire('beforeedit',e);
		if(e.cancel) return;
		var row = this.getSelected();
		if (row) {
			this._editRow(row);
	   }else {
			mini.alert("请选中一条记录！");
	   }
	},
	_editRow : function(row){
		if (row) {
			if(this.popFormUrl){
				this._popupBox(row);
			}else if(this.popFormId){
				this._showFormWindow(row);
			}
	   }
	},
	/**
	 * 打开审批或查看审批状态（也可作为查看表单内容）的窗口
	 * @param enableAudit true：开放审批功能审批；false：禁止审批操作，只能查看。
	 */
	_onAudit : function(enableAudit){
		var grid = this;
		var row = this.getSelected();
		if(!row){
			mini.alert("请选中一条记录！");
		}
		var id = row[this.getIdField()];
		var taskId = row.TASKID;
		if(!taskId && enableAudit){
			mini.alert("任务ID为空,不能进行工作流审核。");
			return;
		}
		var data = {};
		if(!enableAudit)
		taskId = '';
		if(!this.getPopFormUrl()){
			throw new Error("异常信息:dataGridId不能为空!");			
		}
		var url = this.getPopFormUrl();
		url += (url.indexOf('?')==-1 ? '?' : '&') + "taskId="
				+taskId+"&tableName=FS_APPROVE_HISTORY&bussTableName="+this.tableName+"&bussId="+id;
		var title = grid.getModuleName();
		mini.openIbox({
			url : url,
			title : (enableAudit?'审批':'查看')+title,
			onload:function(){
				var box = this;
				grid._formWindow = box;
				var form = new mini.FsForm({
					formId : this.iboxId,
					tableName : grid.tableName,
					idField : grid.getIdField(),
					idFieldForChild : grid.idFieldForChild,
					data : row,
					isFlow : true,
					noButton : !enableAudit,
					ondataloaded : function(e){
						e.box = box;
						grid.fire('popformloaded', e);
					},
					onconstructfinish : function(e){
						grid.fire('popfrombuilt', {form:e.sender, box:box})
					},
					showSaveSuccessTip : grid.showSaveSuccessTip,
					showSaveFailTip : grid.showSaveFailTip,
					showCommitSuccessTip : grid.showCommitSuccessTip,
					showCommitFailTip : grid.showCommitFailTip,
					confirmOnSubmit : grid.confirmOnSubmit,
					confirmOnSave : grid.confirmOnSave
				});
				grid._form = form;
				form.on('beforecommit',function(e){
					grid.fire('beforecommit', e);
				})
				form.on('commitsuccess',function(e){
					if(grid.refreshAfterSave){
						grid.reload();
					}else{
						grid.updateRow(row, e.data);
						grid._dealToolBtns(row);
					}
					box.destroy();
					grid.fire('commitsuccess',{data:e.data});
				});
				form.on('commitfail',function(e){
					grid.fire('commitfail', {msg:e.msg})
				});
				$(form.el).find('.mini-fs-close-button').click(function(){
					if(form.isChanged())
						mini.confirm(
							"有内容已经更改，确定要关闭吗？", 
							"确认操作", 
							function (action){
							if(action=='ok')
								box.destroy();
							}
						);
					else
						box.destroy();
				});
			}
		});
	},
	_onDel : function(){
		var that = this;
		var rows = that.getSelecteds();
		if(rows.length==0){
			var row = that.getSelected();
			if(!row){
				mini.alert('请选择要删除的数据',2500);
				return;
			}else{
				rows.push(row);
			}
		}
		this.delRows(rows);
	},
	delRows : function(rows){
		var that = this;
		var l = rows.length;
		var e = {rows:rows, cancel:false};
		this.fire('beforeremove', e);
		if(e.cancel)
			return;
		mini.confirm(
			"确定删除这"+l+"条数据？", 
			"确认操作", 
			function (action){			
				if (action == "ok") {
					if(that.serverSync)
						that._delOnServer(rows);
					else{
						that.removeRows(rows,false);
						that.fire('removesuccess',{rows:rows});
					}
				}
			}
		);
	},
	_delOnServer : function(rows){
		var that = this;
		var idField = that.getIdField();
		var ids = [];
		for(var i=0; i<rows.length; i++){
			if(rows[i][this.getIdField()]){
				if(that.idDataType=='string')
					ids.push("'"+rows[i][idField]+"'");
				else
					ids.push(rows[i][idField]);
			}
		}
		if(ids.length){
			var queryFilter = {
				whereString : idField + " in ("+ids.join(",")+")"
			};
			var option = {
				callback : function(){
					if(that._dataSource.removeNodes)
						that.removeNodes(rows);
					else if(that._dataSource.removeRange)
						that.removeRows(rows,false);
					that.fire('removesuccess',{rows:rows});
				},
				exceptionHandler : function(msg){
					mini.alert('删除失败('+msg+')');
				}
			};
			FsService.del(that.tableName,queryFilter,option);
		}else{
			that.removeRows(rows,false);
		}
	},
	saveCurrentPage : function(){
		var rows = this.getChanges();
		if(!rows.length){
			mini.alert('没有需要保存的数据');
			return;
		}
		this.saveRowsOneByOne(rows);
	},
	/**
	 * 一次性向服务器上保存多条表格中的数据
	 * 注：服务器端保存多条数据的方法(saveList)存在问题，且不支持事务，暂时不使用此函数，而使用saveRowsOneByOne
	 */
	saveRows : function(rows){
		this.loading('正在保存...');
		var grid = this;
		var oldDataList = this._dataSource._originalData;
		var idField = this.getIdField();
		var inuse = [];
		var rowBaseList = [];
		var originList = [];
		for(var i=0; i<rows.length; i++){
			if(["added","modified"].indexOf(rows[i]._state)>=0){
				var curr = rows[i];
				var oldData = curr._state=='modified' ? 
					oldDataList[oldDataList.indexOf(curr[idField],function(a,b){
						return b==a[idField];
					})] :
					null;
				inuse.push(rows[i]);
				originList.push(oldData);
				rowBaseList.push([
					oldData,
					curr,
					null,
					null
				]);
			}
		}
		if(!inuse.length){
			mini.alert('没有需要保存的数据',2500);
			grid.unmask();
			return;
		}
		var jsonStr = JSON.stringify(rowBaseList);
		rows = inuse;
		var option ={
			callback : function(rowBaseList){
				for(var i=0; i<rowBaseList.length; i++){
					var obj = rowBase.currentObjects;
					if(originList[i]){
						mini.copyTo(originList[i],obj);
					}else{
						oldDataList.push(obj);
						grid.updateRow(rows[i],obj);
					}
					delete row[i]._state;
				}
				grid.unmask();
			},
			exceptionHandler : function(msg){
				mini.alert('保存失败');
				grid.unmask();
			}
		};
		FsService.saveList(this.tableName,jsonStr,option);
	},
	/**
	 * 一条一条地向服务器保存表格中改变或新增的数据
	 * @param 从datagrid上获取的行对象
	 */
	saveRowsOneByOne : function(rows){
		this.loading('正在保存...');
		var grid = this;
		var inuse = [];
		for(var i=0; i<rows.length; i++){
			if(["added","modified"].indexOf(rows[i]._state)>=0)
				inuse.push(rows[i]);
		}
		if(!inuse.length){
			//mini.alert('没有需要保存的数据',2500);
			grid.unmask();
			var e = {
				totalCount : 0,
				successCount : 0,
				failCount : 0
			};
			grid.fire('aftergridsave',e);
			return;
		}
		rows = inuse;
		var total = rows.length;
		var successCount = 0;
		var failCount = 0;
		var oldDataList = this._dataSource._originalData;
		var idField = this.getIdField();
		if (typeof window['DWREngine'] == 'undefined')
			window.DWREngine = dwr.engine;
		window.DWREngine.setAsync(false);
		for(var i=0; i<rows.length; i++){
			var curr = rows[i];
			var oldData = curr._state=='modified' ? 
					oldDataList[oldDataList.indexOf(curr[idField],function(a,b){
						return b==a[idField];
					})] :
					null;
			saveToServer(curr,oldData);
		}
		window.DWREngine.setAsync(true);
		//为了让服务器返回的数据可以找到其对应的原始数据和行，这里用一个内部函数产生闭包
		function saveToServer(curr,oldData){
			var ajaxData = [
				oldData,
				curr,
				null,
				null
			];
			var jsonStr = JSON.stringify(ajaxData);
			var option ={
					callback : function(rowBase){
						var obj = rowBase.currentObjects;
						successCount++;
						if(oldData)
							mini.copyTo(oldData,obj);
						else{
							oldDataList.push(obj);
							grid.updateRow(curr,obj);
						}
						delete curr._state;
						end();
					},
					exceptionHandler : function(msg){
						failCount++;
						end();
					}
			};
			FsService.save(grid.tableName,jsonStr,option);
		}
		function end(){
			var e = {
				totalCount : total,
				successCount : successCount,
				failCount : failCount
			};
			if(total>(successCount+failCount))
				return;
			if(failCount==0){
				mini.alert('保存成功',2500);
				grid.fire('gridsavesuccess',e);
			}else if(successCount==0){
				mini.alert('保存全部失败');
			}else{
				mini.alert('部分数据保存失败');
			}
			grid.unmask();
			grid.fire('aftergridsave',e);
		}
	},
	_onSearch : function(){
		var $bar = $('#'+this.toolbarId);
		if(!$bar.length)
			return;
		var that = this;
		var serchBoxes = $bar.find('.mini-fs-search-box');
		var filter = {};
		for(var i=0; i<serchBoxes.length; i++){
			var box = serchBoxes[i];
			filter[$(box).attr('field')] = $(box).val();
		}
		this.search(filter);
	},
	/**
	 * 查找并将结果展示在表格中
	 * @param filter 查找的条件(模糊匹配)，格式为：{字段1:过滤字符1, 字段2:过滤字符2}
	 **/
	search : function(filter){
		var where = this.whereString ? this.whereString : "1=1";
		for(var field in filter){
			where += " and "+field+" like '%"+filter[field]+"%' ";
		}
		var param = {
			tableName : this.tableName,
			addCaptionField: this.addCaptionField,
			fillChild: "No",
			orderByString: this.orderByString ? this.orderByString : "",
			groupByString: this.groupByString ? this.groupByString : "",
			whereString: where
		};
		this.load(param);
	},
	/**
	 * 在mini.Window中显示表单并加载数据。
	 * @param data 要加载的数据
	 */
	_showFormWindow : function(data){
		var form = this.getForm();
		var formWin = this.getFormWindow();
		form.clear();
		form.setData(data);			
		formWin.show();
	},
	/**
	 * 以弹出新页面窗口的方式显示表单并加载数据。
	 * @param data 要加载的数据
	 */
	_popupBox : function(data){
		var grid = this;
		var form = null;
		mini.openIbox({
			url: this.popFormUrl,
			title: (data?'编辑':'添加')+grid.getModuleName(),
			width: this.popFormWidth,
			height: this.popFormHeight,
			onload: function(){
				grid.fire("popupBoxLoad",{box:this});
				var box = this;
				grid._formWindow = box;
				var form = new mini.FsForm({
					formId : this.iboxId,
					tableName : grid.tableName,
					idField : grid.getIdField(),
					idFieldForChild : grid.idFieldForChild,
					data : data,
					isFlow : false,
					ondataloaded : function(e){
						e.box = box;
						grid.fire('popformloaded', e);
					},
					onconstructfinish : function(e){
						grid.fire('popfrombuilt', {form:e.sender, box:box})
					},
					showSaveSuccessTip : grid.showSaveSuccessTip,
					showSaveFailTip : grid.showSaveFailTip,
					showCommitSuccessTip : grid.showCommitSuccessTip,
					showCommitFailTip : grid.showCommitFailTip,
					confirmOnSubmit : grid.confirmOnSubmit,
					confirmOnSave : grid.confirmOnSave
				});
				grid._form = form;
				form.beforeSave = grid.beforeFormSave;
				form.on('beforesave',function(e){
					grid.fire('beforeformsave', e);
				});
				if(grid.activitiKey)
					form.setActivitiKey(grid.activitiKey);
				$(form.el).find('.mini-fs-close-button').click(function(){
					if(form.isChanged())
						mini.confirm(
							"有内容已经更改，确定要关闭吗？", 
							"确认操作", 
							function (action){
								if(action=='ok')
									box.destroy();
							}
						);
					else
						box.destroy();
				});



				form.on('savesuccess',function(e){
					var idField = grid.getIdField();
					var row = grid.findRow(function(row){
						if(row[idField] == e.obj[idField])
							return true;
					});
					if(grid.refreshAfterSave){
						grid.reload();
					}else{
						if(row){
							grid.updateRow(row, e.obj);
							grid._dealToolBtns(row);
						}
						else
							grid.addRow(e.obj,0);
					}
					grid.fire('popformsavesuccess',e);
					if(grid.closePopWinAfetrSave)
						box.destroy();
				});
				form.afterOK = function(data,saveType){
					var row = grid.getSelected();
					if(saveType=='update'){
						grid.updateRow ( row, data );
					}else if(saveType=='insert'){
						grid.addRow (data, grid.indexOf(row));
					}
					box.destroy();
				};
				form.on('savefail',function(e){
					grid.fire('popformsavefail',{msg:e.msg});
				});
				form.showSaveSuccessTip = grid.showSaveSuccessTip;
				form.showSaveFailTip = grid.showSaveFailTip;
				form.showCommitSuccessTip = grid.showCommitSuccessTip;
				form.showCommitFailTip = grid.showCommitFailTip;
				form.confirmOnSubmit = grid.confirmOnSubmit;
				form.confirmOnSave = grid.confirmOnSave;
			},
			ondestroy:function(action){
				var box = this;
				if(form && form.isChanged()){
					mini.confirm(
						"有内容已经更改，确定要关闭吗？", 
						"确认操作", 
						function (action){
						if(action=='ok')
							box.destroy();
						}
					);
					return false;
				}
			}
	   });
	},
	/**
	 * 作为form元素加载数据
	 * @param foreignValue 外键值
	 **/
	loadAsChild : function(foreignValue){
		if(foreignValue===null || foreignValue===undefined){
			return;
		}
		if(!this.foreignField){
			//TODO:根据表关系数据表获取外键信息，如果可以获取到则无需返回
			return;	
		}
		if(this.relationTableName){
			var that = this;
			var callback = function(data){
				setTimeout(function(){that._checkItems(data);},200);
				//TODO:check项目的时候有可能列表还没有载入，暂时超时处理
			};
			var where = this.foreignField+"="+foreignValue;
			if(this.whereString)
				where += " and " + this.whereString;
			mini.fsUtil.searchTableData(
				this.relationTableName, callback, where);
		}else{
			var where = this.foreignField + "=";
			var dataType = this.foreignDataType ? this.foreignDataType : 'string';
			where += dataType.toLowerCase()=='number' ?
					foreignValue : ("'"+foreignValue+"'");
			this.whereString = this._originWhereString ? 
					this._originWhereString+" and "+where : where;
			this.loadByTableName();
		}
	},
	_checkItems : function(data){
		var that = this;
		var rows = that.findRows(function(row){
			for(var i=0; i<data.length; i++)
				if(row[that.getIdField()] == data[i][that.getIdField()])
					return true;
		});
		that.selects(rows);
	},
	getValueAsChild : function(){
		var rows = [];
		if(this.relationTableName){
			rows = this.getSelecteds();
		}else{
			rows = this.getData();
		}
		var childList = [];
		for(var j=0;j<rows.length;j++){
			for(var name in rows[j])
				if(rows[j][name] instanceof Date)
					rows[j][name] = mini.formatDate(rows[j][name], 'yyyy-MM-dd HH:mm:ss')
			var rowBase = {
					originalObjects:null,
					currentObjects:rows[j],
					childValues:null
			};
			childList.push(rowBase);
		}
		return childList;
	},
	/**
	 * 清除数据：如果作为一般表格，清除所有行；如果是作为展示的载体（relationTableName有值）则清除所有勾选
	 */
	clear : function(){
		if(this.relationTableName)
			this.deselectAll();
		else
			this.clearData();//无法清除分页信息。对于子表由于无分页栏可以满足需求
	},
	/**
	 * 将选择记录的方式和checkbox一样，点击一条记录时反转此记录的选择状态
	 */
	changeSelectToCheckStyle : function(){
		this.on('beforeRowSelect',function(e){
			e.cancel = true;
		});
		this.on('cellclick',function(e){
			if(e.sender.isSelected(e.row))
				e.sender.deselect(e.row)
			else
				e.sender.select(e.row);
		});
	}
});
mini.regClass(mini.FsDataGrid, "fsdatagrid");


/**
 * #FsTree 
 * 扩展功能: 1.可根据表名获取树的数据（一个自关联表或两个关联表）
 *		   2.可绑定一个fsForm，与其实现数据联动
 *		   3.可与按钮绑定（前提为已绑定fsForm），实现对树节点的增、删操作
 * 新增属性: 1.tableName:		 数据来源的表。若为自关联表则只需一个表名；若为上下级表则两个表名用逗号分隔
 *		   2.formContainerId： 关联的form所在容器的ID
 *		   3.addSiblingBtnId： 新增同级节点按钮的ID
 *		   4.addChildBtnId： 	 新增子节点按钮的ID
 *		   5.delBtnId：		 删除节点按钮的ID
 *		   6.whereString:		 查询表的where子句(仅单表有效)
 *		   7.orderByString:	 查询表的order by子句(仅单表有效)
 *		   8.autoSelect:		 树载入完成后，自动选择第一个叶子节点，默认true
 * 扩展属性: 1.idField:		若使用两个关联表，两个表的ID字段名用逗号隔开
 *		   2.parentField: 若使用两个关联表，参数格式为："第一个表的父节点ID字段名,第二个表的外键字段名"
 *		   3.textField:   若使用两个关联表，两个表的显示文本字段用逗号隔开
 */
mini.FsTree = function() {
	mini.FsTree.superclass.constructor.call(this);
};
mini.extend(mini.FsTree, mini.Tree, {
	uiCls : "mini-fs-tree",
	expandOnNodeClick : false,
	autoSelect : false,
	addCaptionField : false,
	autoLoad : true,
	searchBoxStyle: 'width:200px;',
	searchBoxTip: '',
	loadingMsg : "正在加载...",
	_initEvents : function() {
		mini.FsTree.superclass._initEvents.call(this);
		this.on('beforenodeselect',this.__onBeforeNodeSelect,this);
		this.on("nodeselect",this.__onNodeSelect,this);
		this.on("load", this.__onLoad, this);
	},
	getAttrs : function(A) {
		var B = mini.FsTree.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName",
								  "selectFields",
								  "whereString",
								  "orderByString", 
								  "groupByString",
								  "foreignField", 
								  "foreignDataType",
								  "relationTableName", 
								  "rootId",
								  "rootParentId",
								  "formContainerId",
								  "addSiblingBtnId",
								  "addChildBtnId",
								  "delBtnId",
								  "supWhereString", 
								  "subWhereString",
								  "leafFlagField",
								  "searchField",
								  "searchBoxStyle",
								  "searchBoxTip",
								  "valueField",
								  "onbeforeremovenodes",
								  "onsavesuccess",
								  "ondeletesuccess",
								  "onaddsibling", 
								  "onaddchild", 
								  "onaddnode" ]);
		mini._ParseBool(A, B, [ "isChild", 
								"autoSelect", 
								"addCaptionField", 
								"lazy", 
								"lazySearch", 
								"autoLoad"]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var formContainerId = C.formContainerId;
		var addSiblingBtnId = C.addSiblingBtnId;
		var addChildBtnId = C.addChildBtnId;
		var delBtnId = C.delBtnId;
		var autoLoad = C.autoLoad;
		delete C.autoLoad;
		var lazy = C.lazy;
		delete C.lazy;
		var autoSelect = C.autoSelect;
		delete C.autoSelect;
		var valueField = C.valueField;
		delete C.valueField;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var orderByString = C.orderByString;
		delete C.orderByString;
		var whereString = C.whereString;
		delete C.whereString;
		var supWhereString = C.supWhereString;
		delete C.supWhereString;
		var subWhereString = C.subWhereString;
		delete C.subWhereString;
		var tableName = C.tableName;
		delete C.formContainerId;
		delete C.addSiblingBtnId;
		delete C.addChildBtnId;
		delete C.delBtnId;
		delete C.tableName;
		mini.FsTree.superclass.set.call(this, C);
		if (!mini.isNull(autoLoad))
			this.setAutoLoad(autoLoad);
		if (!mini.isNull(autoSelect))
			this.setAutoSelect(autoSelect);
		if (!mini.isNull(lazy))
			this.setLazy(lazy);
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(valueField))
			this.setValueField(valueField);
		if (!mini.isNull(whereString)){
			this._originWhereString = whereString;
			this.setWhereString(whereString);
		}
		if (!mini.isNull(supWhereString)){
			this._originSupWhereString = supWhereString;
			this.setSupWhereString(supWhereString);
		}
		if (!mini.isNull(subWhereString)){
			this._originSubWhereString = subWhereString;
			this.setSubWhereString(subWhereString);
		}
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		if (!mini.isNull(formContainerId))
			this.setFormContainerId(formContainerId);
		if (!mini.isNull(addSiblingBtnId))
			this.setAddSiblingBtnId(addSiblingBtnId);
		if (!mini.isNull(addChildBtnId))
			this.setAddChildBtnId(addChildBtnId);
		if (!mini.isNull(delBtnId))
			this.setDelBtnId(delBtnId);
		return this;
	},
	setAutoLoad : function(autoLoad){
		this.autoLoad = autoLoad;
		this._dataSource.autoLoad = autoLoad;
	},
	isAutoLoad : function(){
		return this.autoLoad;
	},
	setLazy : function(lazy){
		var tree = this;
		this.lazy = lazy;
		if(lazy){
			this.on('beforeexpand',function(event){
				event.cancel = true;
				tree._loadNode(event.node);
			});
		}
	},
	isLazy : function(){
		return this.lazy;
	},
	setValueField : function(valueField){
		this.valueField = valueField;
	},
	getValueField : function(){
		return this.valueField;
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
	},
	getSelectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
		if(this._queryData)
			this._queryData.orderByString = orderByString;
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this.whereString = whereString;
		if(this._queryData)
			this._queryData.whereString = whereString;
	},
	setSupWhereString : function(supWhereString){
		this.supWhereString = supWhereString;
		if(this._queryData)
			this._queryData.supWhereString = supWhereString;
	},
	setSubWhereString : function(subWhereString){
		this.subWhereString = subWhereString;
		if(this._queryData)
			this._queryData.subWhereString = subWhereString;
	},
	getWhereString : function(){
		return this.whereString;
	},
	setFormContainerId : function(formContainerId) {
		var thisTree = this;
		this.formContainerId = formContainerId;
	},
	getFormContainerId : function() {
		return this.formContainerId;
	},
	setAutoSelect : function(autoSelect){
		this.autoSelect = autoSelect;
	},
	isAutoSelect : function(){
		return this.autoSelect;
	},
	_afterApply : function(){
		//建立懒加载树的搜索框
		if(this.lazy && this.lazySearch){
			var that = this;
			var searchId = 'fs-lts-'+this._id;
			var html = [
				'<input class="mini-fs-autocomplete" ',
					'id="'+searchId+'"',
					'tableName="'+this.tableName+'"',
					'textField="'+this.getTextField()+'"',
					'valueField="'+this.getIdField()+'"',
					this.searchField ? 'searchField="'+this.searchField+'"' : '',
					'valueFromSelect="true"',
					'emptyText="'+this.searchBoxTip+'"',
					'style="'+this.searchBoxStyle+'"',
				'/>'
			]
			var $searchEl = $(html.join(''));
			$(this.el).prepend($searchEl);
			mini.parse(searchId);
			this._searchBox = mini.get(searchId);
			this._searchEl = $searchEl[0];
			this._searchBox.on('valuechanged', function(e){
				that.expandToNodeById(e.value);
			})
		}
	},
	getValueAndText : function(value){
		var that = this;
		if(!this.valueField)
			return mini.FsTree.superclass.getValueAndText.call(this, value);
		if(typeof value === 'object')
			return [value[this.valueField], value[this.getTextField()]];
		var textField = this.getTextField();
		var values = value.split(',');
		var nodes = this.findNodes(function(node){
			if(values.indexOf(node[that.valueField]) >= 0)
				return true;
		});
		values = [];
		var texts = [];
		for(var i=0; i<nodes.length; i++){
			values.push(nodes[i][this.valueField]);
			texts.push(nodes[i][textField]);
		}
		return [values.join(','), texts.join(',')];
	},
	//展开到指定id的节点并选择，对懒加载树和一般单表树都有效
	expandToNodeById : function(id){
		if(!id) return;
		var node = this.getNode(id);
		if(node){
			this.expandToNode(node);
			return;
		}
		var tree = this;
		var levelLink = [];
		fillLevelLink(id);
		function fillLevelLink(id){
			levelLink.push(id);
			mini.fsUtil.searchTableData({
				tableName: tree.tableName,
				whereString: tree.getIdField() + "=" + id,
				addCaptionField: false,
				selectFields: tree.getIdField() + ',' + tree.getParentField(),
				onSuccess: function(data){
					if(data && data.length){
						var parentId = data[0][tree.getParentField()]+'';
						var parentNode = tree.getNode(parentId);
						if(parentNode){
							levelLink.push(parentId);
							expand(parentNode)
						}else{
							fillLevelLink(parentId);
						}
					}else{
						console.error('懒加载数查找节点时没有找到当前树中的节点');
					}
				}
			});
		}
		function expand(){
			var currId = levelLink.pop()+'';
			var currNode = tree.getNode(currId);
			if(!levelLink.length){
				tree.expandToNode(currNode);
			}else{
				tree._loadNode(currNode, expand);
			}
		}
		
	},
	expandToNode : function(node){
		this.collapseAll();
		this.expandPath(node);
		this.selectNode(node);
	},
	__onLoad : function(){
		if(this.autoSelect){
			var first = this.getFirstLeaf();
			this.selectNode(first);
		}

	},
	getFirstLeaf : function(node){
		if(node===undefined)
			node = this.getRootNode();
		if(this.isLeaf(node)){
			return node;
		}else{
			var children = this.getChildNodes(node);
			for(var i=0; i<children.length; i++){
				return this.getFirstLeaf(children[i]);
			}
		}
	},
	/**
	 * 绑定新增同级节点的事件处理
	 * @param 新增同级节点按钮的ID
	 */
	setAddSiblingBtnId : function(addBtnId){
		var thisTree = this;
		this.addSiblingBtnId = addBtnId;
		$('#'+addBtnId).click(function(){	//新增同级节点的代码
			var node = thisTree.getSelectedNode();
			if(!node){mini.alert('请先选择节点'); return;}
			if(node && !node._newNode){
				var parent = thisTree.getParentNode(node);
				var newNode = {}
				newNode._newNode = true;
				newNode[thisTree.getTextField()] = '【新增】';
				if(thisTree.subParentField){
					newNode[thisTree.subParentField] = parent[thisTree.supIdField];
				}
				thisTree.addNode ( newNode,parent.children.length, parent )
				parent = thisTree.getParentNode(node);
				var newNode = parent.children[parent.children.length-1];
				thisTree.selectNode(newNode);
				thisTree.fire('addsibling',{node:newNode});
				thisTree.fire('addnode',{node:newNode});
			}
		});
	},
	/**
	 * 绑定新增子节点的事件处理
	 * @param 新增子节点按钮的ID
	 */
	setAddChildBtnId: function(btnid){
		var thisTree = this;
		this.addChildBtnId = btnid;
		$('#'+btnid).click(function(){	//新增子节点的代码
			var node = thisTree.getSelectedNode();
			if(!node){mini.alert('请先选择节点'); return;}
			if(node && !node._newNode){
				var newNode = {}
				newNode._newNode = true;
				newNode[thisTree.getTextField()] = '【新增】';
				var idField = thisTree.subIdField ? thisTree.subIdField : thisTree.getIdField();
				var parentField = thisTree.subParentField ? thisTree.subParentField : thisTree.getParentField();
				newNode[parentField] = node[idField];
				thisTree.addNode ( newNode,0, node )
				var parent = thisTree.getSelectedNode ();
				var newNode = parent.children[0];
				thisTree.selectNode(newNode);
				var form = thisTree.getForm();
				thisTree.fire('addchild',{node:newNode});
				thisTree.fire('addnode',{node:newNode});
			}
		});
	},
	/**
	 * 绑定删除节点的事件处理
	 * @param 删除节点按钮的ID
	 */
	setDelBtnId : function(delBtnId){
		thisTree = this;
		this.delBtnId = delBtnId;
		$('#'+delBtnId).click(function(){	//删除节点的代码
			var nodes = [];
			nodes = thisTree.getCheckedNodes(false);
			var event = {
				cancel:false, 
				nodes:nodes
			}
			if(nodes.length==0 && thisTree.getSelectedNode()){
				var sel = thisTree.getSelectedNode();
				nodes.push(sel);
				nodes = nodes.concat(thisTree.getAllChildNodes(sel));
			}
			thisTree.fire('beforeremovenodes', event);
			if(event.cancel) return;
			if(nodes.length==0){mini.alert('请选择要删除的节点');return;}
			mini.confirm("确定要删除选定的节点吗？","确认操作",function(r){
				if(r=='ok'){
					thisTree.delNodesData(nodes,function(){
						thisTree.removeNodes(nodes);
						var form = thisTree.getForm();
						if(form) form.clear();
						thisTree.fire("deletesuccess",{nodes:nodes})
					},thisTree.onRpcFault);
				}
			});
		});
	},
	setTableName : function(tableName) {
		this.tableName = tableName;
		if(!this.autoLoad) return;
		if(this.isChild && !this.relationTableName)
			return;
		this.loadByTableName();
	},
	//展开节点，用于懒加载
	_loadNode : function(node, callback){
		var tree = this;
		//如果已有子节点则直接展开（确保子节点为真正节点而不是空节点）
		if(node && node.children && node.children[0][tree.getIdField()]){
			tree.expandNode(node);
			return;
		}
		tree.loading();
		var where = this.whereString ? this.whereString + ' and ' : ' ';
		if(node){//查询一个节点的子节点
			where += this.getParentField() + '=' + node[this.getIdField()];
		}else{//加载根节点
			if(this.rootParentId){
				where += this.getParentField() + " in ("+this.rootParentId+") ";
			}else if(this.rootId){
				//如有rootId则根据rootId加载根节点，rootId可以为多个值。
				where += this.getIdField() + " in ("+this.rootId+") ";
			}else{
				//如果没有rootId则将没有指明父节点的节点作为根节点
				where += this.getParentField() + " is null ";
			}
		}
		var param = {
			tableName : this.tableName,
			selectFields : this.selectFields,
			groupByString : this.groupByString,
			orderByString : this.orderByString,
			whereString : where,
			addCaptionField : false,
			onSuccess : function(data){
				tree.unmask();
				if(node)
					tree.removeNodes(node.children);
				if(!data.length) return;
				for(var i=0; i<data.length; i++){
					if(!data[i][tree.leafFlagField]){
						data[i].expanded = false;
						//给新获取到的节点加一个空的子节点使其显示为文件夹状，如果用isLeaf=false会导致其他问题
						data[i].children = [{}];
					}
				}
				tree.addNodes(data, node||null);
				if(node){
					tree.expandNode(node);
					if(typeof callback === 'function'){
						callback(node);
					}
					tree.fire("load");
				}
				if(!node && tree.getExpandOnLoad()!==false){
					var roots = tree.getRootNode().children;
					for(var i=0; i<roots.length; i++){
						tree._loadNode(roots[i]);
					}
				}
			},
			onError : function(msg){
				mini.alert('数据加载失败');
				tree.unmask();
			}
		}
		mini.fsUtil.searchTableData(param);
	},
	/**
	 * 通过表名载入数据
	 */
	loadByTableName : function(){
		if(this.lazy){//懒加载，仅支持单表
			this.clearData();
			this._loadNode();
		}else{//全部加载，支持两表
			var tableName = this.tableName;
			var data = {};
			var tableNames = tableName.split(',');
			if(tableNames.length>1){
				this.tableName = tableNames[1];
				data.tableName = tableNames[1];
				data.supTableName = tableNames[0];
				data.subTableName = tableNames[1];
				data.addCaptionField = this.addCaptionField;
				this.supIdField = data.supIdField = this._dataSource.idField.split(',')[0];
				this.subIdField =  data.subIdField = this._dataSource.idField.split(',')[1];
				this.supParentField = data.supParentField = this._dataSource.parentField.split(',')[0];
				this.subParentField = data.subParentField = this._dataSource.parentField.split(',')[1];
				this.supTextField = data.supTextField = this._dataSource.textField.split(',')[0];
				this.subTextField = data.subTextField = this._dataSource.textField.split(',')[1];
				this._column.field="_text";
				this._dataSource.idField = '_id';
				this._dataSource.parentField = '_pid';
				this._dataSource.textField = '_text';
				this.idField = '_id';
				this.parentField = '_pid';
				this.textField = '_text';
				this._dataSource._dwrDataSourceQuery = this.__dwrDataSourceQuery;
			}
			data.tableName = tableName;
			data.addCaptionField = this.addCaptionField;
			data.fillChild = "No";
			data.selectFields = this.selectFields;
			data.orderByString = this.orderByString ? this.orderByString : "";
			data.groupByString = this.groupByString ? this.groupByString : "",
			data.whereString = this.whereString ? this.whereString : "";
			data.supWhereString = this.supWhereString ? this.supWhereString : "";
			data.subWhereString = this.subWhereString ? this.subWhereString : "";
			if(this.rootId || this.rootId===0){
				data.rootId = this.rootId;
			}
			this._queryData = data;
			this._dataSource.load(data);
		}
	},
	refresh : function(){
		if(this.lazy){//懒加载，仅支持单表
			this.clearData();
			this._loadNode();
		}else{
			this._dataSource.load(this._queryData);
		}
	},
	/**
	 * 获取绑定的form，如果尚未绑定则建立绑定并获取
	 */
	getForm : function(){
		var that = this;
		if(!this.form){
			thisTree = this;
			if(this.formContainerId){
				var idField = this.subIdField ? this.subIdField : this.getIdField();
				this.form = new mini.FsForm(this.formContainerId,this.tableName,idField);
				this.form.beforeSave = function(){
					//这里添加保存前的内容
					return true;
				}
				this.form.on('savesuccess',function(e){
					var node = thisTree.getSelectedNode();
					var opt = e.obj;
					opt._newNode = false;
					if(thisTree.subTextField){
						opt[thisTree.textField] = opt[thisTree.subTextField];
					}
					thisTree.updateNode(node,opt);
					that.form.setData(opt);
					mini.alert('保存成功');
					that.fire('savesuccess',{data:e.data});
				});
			}else
				return null;
		}
		return this.form;
	},
	/**
	 * 删除节点对应的后台数据
	 * @param nodes 要删除的节点数组
	 * @param onSuccess 删除成功的回调函数
	 * @param onError 删除失败的回调函数
	 */
	delNodesData : function(nodes, onSuccess, onError){	
		var idField = this.subIdField ? this.subIdField : this.getIdField();
		if(nodes.length==1){
			var children = this.getChildNodes(nodes[0]);
			for(var i=0; i<children.length; i++){
				nodes.push(children[i]);
			}
		}
		var ids = [];
		for(var i=0; i<nodes.length; i++){
			if(nodes[i]._canNotSelect) continue;
			var id = nodes[i][idField];
			if(typeof id =="number"){
				ids.push(id);
			}else{
				ids.push("'" + id + "'");
			}
		}
		if(ids.length){
			var where = idField + " in (" + ids.join(',') + ")";
			var option ={
					callback:onSuccess,
					exceptionHandler:onError
			};
			var queryFilter = {};
			queryFilter.whereString = where;
			FsService.del(this.tableName,queryFilter,option); 
		}
	},
	onRpcFault : function(data){
		mini.alert(data)
	},
	/**
	 * 节点选择时给绑定的form赋值
	 * @param sender 选择的节点
	 */
	__onNodeSelect : function(sender){
		var form = this.getForm();
		if(form){
			form.clear();
			form.setData(sender.node);
		}
	},
	/**
	 * 选择节点前的操作
	 * @param e 事件对象
	 */
	__onBeforeNodeSelect : function(e){
		var thisTree = this;
		var nowNode = this.getSelectedNode();
		if (nowNode && nowNode._newNode){
			//miniUI的confirm不会阻塞浏览器，这里采用操作后重新选择节点的方式。
			e.cancel = true;
			mini.confirm("新建节点尚未保存，是否丢弃？","确认操作",function(r){
				if(r=="ok"){
					thisTree.removeNode(nowNode);
					thisTree.selectNode(e.node);
				}else{
					e.cancel = true;
				}
			});
//注释掉的代码为浏览器阻塞方式确认操作，有些浏览器在点击树节点后再弹出mini确认窗口会选择全屏
//			if(confirm("新建节点尚未保存，是否丢弃？"))
//				this.removeNode(nowNode);
//			else
//				e.cancel = true;
		}
		if(e.node._canNotSelect)
			e.cancel = true;
	},
	/**
	 * 两级表dwr方式获取数据
	 */
	__dwrDataSourceQuery : function(event,C,I,F,K){
		var thisDataSource = this;
		var queryFilter = {};
		if(event.params.sortField){
			queryFilter.orderByString = event.params.sortField+" "+event.params.sortOrder;
		}else{
			queryFilter.orderByString = event.params.orderByString;
		}
		queryFilter.groupByString = event.params.groupByString;
		queryFilter.whereString = I.supWhereString;
		queryFilter.addCaptionField = event.params.addCaptionField;
		queryFilter.fillChild = event.params.fillChild;
		var pageInfo = {};
		pageInfo.pageCount = 9999
		pageInfo.pageSize = 9999,//event.params.pageSize;
		pageInfo.pageIndex = event.params.pageIndex+1;
		pageInfo.rowCount = 0;
		FsService.pageSelect(I.supTableName,queryFilter,pageInfo,{callback:function(result){
			if(result){
				var H = {"data":[],"total":0};
				var recoreds = result[0];
				var recordLength = recoreds.length;
				if(recordLength > mini.fsConfigs.BIG_DATA_WARNING_LINE){
					var msg = "获取数据量过大，仅保留前" + mini.fsConfigs.BIG_DATA_WARNING_LINE + "条数据";
					recordLength = mini.fsConfigs.BIG_DATA_WARNING_LINE;
					console.warn(msg);
					mini.alert(msg);
				}
				var pi = result[1];
				var datas = [];
				var ids = [];
				for(var i=0;i<recordLength;i++){
					var obj = recoreds[i].originalObjects;
					obj[thisDataSource.idField] = obj[I.supIdField];
					obj[thisDataSource.textField] = obj[I.supTextField];
					obj[thisDataSource.parentField] = obj[I.supParentField];
					//obj._canNotSelect = true;	//节点无法被选择（点击选中，而非check，也无法被删除）
					obj.tableName = I.supTableName;
					obj.isLeaf = false;
					obj.asyncLoad = false;
					datas.push(obj);
					ids.push(obj[I.supIdField]);
				}
				if(ids.length){
					queryFilter.whereString = I.subWhereString;
					queryFilter.whereString += I.subParentField + ' in (' + ids.join(',') + ')';
				}else{
					queryFilter.whereString = '1=0'
				}
				FsService.pageSelect(I.subTableName,queryFilter,pageInfo,{callback:function(result){
					if(result){
						var H = {"data":[],"total":0};
						var recoreds = result[0];
						var recordLength = recoreds.length;
						if(recordLength > mini.fsConfigs.BIG_DATA_WARNING_LINE){
							var msg = "获取数据量过大，仅保留前" + mini.fsConfigs.BIG_DATA_WARNING_LINE + "条数据";
							recordLength = mini.fsConfigs.BIG_DATA_WARNING_LINE;
							console.warn(msg);
							mini.alert(msg);
						}
						var pi = result[1];
						//var datas = [];
						for(var i=0;i<recordLength;i++){
							var obj = recoreds[i].originalObjects;
							obj[thisDataSource.idField] = 'sub'+obj[I.subIdField];
							obj[thisDataSource.textField] = obj[I.subTextField];
							obj[thisDataSource.parentField] = obj[I.subParentField];
							obj.tableName = I.subTableName;
							datas.push(obj);
						}
						H.data = datas;
						H.total = pi.rowCount;
						if (!H.data)
							H.data = [];
						if (!H.total)
							H.total = 0;
						C._resultObject = H;
						var event = {
							xhr : "",
							text : "",
							textStatus : "",
							result : H,
							total : H.total,
							data : H.data.clone(),
							pageIndex : I[C.pageIndexField],
							pageSize : I[C.pageSizeField]
						};
						C.pageIndex = event.pageIndex;
						C.pageSize = event.pageSize;
						C.setTotalCount(event.total);
						C._OnPreLoad(event);
						C.setData(event.data);
						if (C._selectedValue
								&& C.checkSelectOnLoad) {
							var A = C
									.getbyId(C._selectedValue);
							if (A)
								C.select(A)
						}
						if (C.getSelected() == null
								&& C.selectOnLoad
								&& C.getDataView().length > 0)
							C.select(0);
						C.fire("load", event);
					}
				},exceptionHandler:function(msg){
					mini.alert(msg);	
				}}); 
			}
		},exceptionHandler:function(msg){
			mini.alert(msg);	
		}}); 
	},
	loadAsChild : mini.FsDataGrid.prototype.loadAsChild,
	_checkItems : function(data){
		var that = this;
		var nodes = that.findNodes(function(node){
			for(var i=0; i<data.length; i++)
				if(node[that.getIdField()] == data[i][that.getIdField()])
					return true;
		});
		that.checkNodes(nodes);
	},
	getValueAsChild : function(){
		var nodes = [];
		if(this.relationTableName){
			nodes = this.getCheckedNodes(false);
		}else{
			nodes = this.getData();
		}
		var childList = [];
		for(var j=0;j<nodes.length;j++){
			var rowBase = {
					originalObjects:null,
					currentObjects:nodes[j],
					childValues:null
			};
			childList.push(rowBase);
		}
		return childList;
	},
	/**
	 * 清除数据：如果作为一般表格，清除所有行；如果是作为展示的载体（relationTableName有值）则清除所有勾选
	 */
	clear : function(){
		if(this.relationTableName)
			this.deselectAll();
		else
			this.load({});
	},
	/**
	 * 将当前选中的节点的所有祖先节点展开
	 * @param closeOther 是否合起其他无关节点，默认false
	 */
	expandSelected : function(closeOther){
		var tree = this
		var node = tree.getSelected();
		if(closeOther)
			tree.collapseAll();
		while(node){
			tree.expandNode(node);
			node = tree.getParentNode(node);
		}
		this.scrollIntoView(this.getSelected());
	},

	/**
	 * 针对特定业务需求（业务数据关联行政区域字典）封装的生成where条件的函数。
	 * 第一种情况：适用于短码，参数为业务表省市县乡村这样的字段按行政级别从大到小的顺序组成数组，
	 *             对于一个节点其下所有节点全部勾选的情况只取这个节点，并用其相应的字段名称组成where条件；
	 * 第二种情况：适用于长码，参数为业务表长码字段的字符串。
	 */
	genWhereString : function(fields){
		if(typeof fields === 'string'){
			if(fields.indexOf(',') == -1){
				fields = fields.toUpperCase();
				var nodes = this.getCheckedNodes('leaf');
				var values = [];
				for(var i=0; i<nodes.length; i++){
					var value = nodes[i][fields];
					if(value)
						values.push("'" + value + "'");
				}
				if(values.length)
					return ' ' + fields + ' in (' + values.join(',') + ') ';
				else
					return '';
			}else{
				fields = fields.split(',');
			}
		}
		if(typeof fields === 'object' && fields.length){
			var nodes = this.getCheckedNodes('reduce');
			var wheres = {};
			for(var k=0; k<fields.length; k++){
				fields[k] = fields[k].toUpperCase();
				wheres[fields[k]] = [];
			}
			for(var i=0; i<nodes.length; i++){
				var subwhere = '';
				var node = nodes[i];
				var useField = null;
				var useValue = null;
				for(var k=0; k<fields.length; k++){
					var field = fields[k];
					var fieldValue = node[field];
					if(fieldValue){
						useField = field;
						useValue = fieldValue;
					}
				}
				if(useField)
					wheres[useField].push("'"+useValue+"'");
			}
			var whereStringList = [];
			for(var field in wheres){
				if(wheres[field].length)
					whereStringList.push(field + ' in (' + wheres[field].join(',') + ')' ); 
			}
			var whereString = whereStringList.join(' or ');
			switch(whereStringList.length){
				case 0: return '';
				case 1: return ' ' + whereString + ' ';
				default: return ' (' + whereString + ') ';
			}
		}
	}
});
mini.regClass(mini.FsTree, "fstree");


/**
 * #FsTreeGrid
 * 扩展功能：1.通过表名获取数据
 * 新增属性：1.tableName		表名
 *		   2.whereString		查询表的where子句
 *		   3.orderByString	查询表的order by子句
 *		   4.nextComboId		级联的下一个comboBox或treeselect
 *		   5.parentField		被级联时的过滤字段。如果此属性有值，则在初始时不会加载数据
 **/
mini.FsTreeGrid = function() {
	mini.FsTreeGrid.superclass.constructor.call(this);
};
mini.extend(mini.FsTreeGrid, mini.TreeGrid, {
	uiCls : "mini-fs-treegrid",
	addCaptionField : true,
	autoLoad : true,
	refreshAfterSave : false,
	loadingMsg : "正在加载...",
	getAttrs : function(A) {
		var B = mini.FsTreeGrid.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName",
								  "selectFields",
								  "whereString",
								  "orderByString", 
								  "groupByString",
								  "foreignField", 
								  "foreignDataType",
								  "relationTableName",
								  "addSiblingBtnId",
								  "addChildBtnId",
								  "delBtnId",
								  "toolbarId",
								  "moduleName",
								  "popFormUrl",
								  "idDataType",
								  "rootId",
								  "rootParentId", 
								  "refreshAfterSave",
								  "onpopfrombuilt",
								  "onpopformloaded",
								  "onbeforeformsave",
								  "onpopformsavesuccess",
								  "onpopformsavefail",
								  "onremovesuccess",
								  "onbeforeremove" ]);
		mini._ParseBool(A, B, ["isChild", "lazy", "addCaptionField", "autoLoad"]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var addSiblingBtnId = C.addSiblingBtnId;
		var addChildBtnId = C.addChildBtnId;
		var delBtnId = C.delBtnId;
		var autoLoad = C.autoLoad;
		delete C.autoLoad;
		var lazy = C.lazy;
		delete C.lazy;
		var toolbarId = C.toolbarId;
		delete C.toolbarId;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var orderByString = C.orderByString;
		delete C.orderByString;
		var whereString = C.whereString;
		delete C.whereString;
		var tableName = C.tableName;
		delete C.addSiblingBtnId;
		delete C.addChildBtnId;
		delete C.delBtnId;
		delete C.tableName;
		mini.FsTreeGrid.superclass.set.call(this, C);
		if (!mini.isNull(autoLoad))
			this.setAutoLoad(autoLoad);
		if (!mini.isNull(lazy))
			this.setLazy(lazy);
		if (!mini.isNull(whereString)){
			this._originWhereString = whereString;
			this.setWhereString(whereString);
		}
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		if (!mini.isNull(addSiblingBtnId))
			this.setAddSiblingBtnId(addSiblingBtnId);
		if (!mini.isNull(addChildBtnId))
			this.setAddChildBtnId(addChildBtnId);
		if (!mini.isNull(delBtnId))
			this.setDelBtnId(delBtnId);
		if (!mini.isNull(toolbarId))
			this.setToolbarId(toolbarId);
		return this;
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
	},
	getselectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this.whereString = whereString;
	},
	getWhereString : function(){
		return this.whereString;
	},
	setToolbarId : function(toolbarId){
		this.toolbarId = toolbarId;
		this._buildToolbar();
	},
	getToolbarId : function(){
		return this.toolbarId;
	},
	//给工具条内的按钮绑定事件
	_buildToolbar : function(){
		var $bar = $('#'+this.toolbarId);
		if(!$bar.length)
			return;
		var that = this;
		//新增下级按钮
		$bar.find('.mini-fs-addchild-button').click(function(){that._onAddChild()});
		//新增同级按钮
		$bar.find('.mini-fs-addsibling-button').click(function(){that._onAddSibling()});
		//编辑按钮
		$bar.find('.mini-fs-edit-button').click(function(){that._onEdit()});
		//查看按钮
		$bar.find('.mini-fs-view-button').click(function(){that._onEdit('readonly')});
		//批量删除按钮
		$bar.find('.mini-fs-del-button').click(function(){that._onDel()});
	},
	_onAddChild : function(){
		if(this.getData().length==0)
			return this._addNode(null);
		var rows = this.getSelectedNodes();
		if(rows.length!==1){
			mini.alert('请选择一条记录');
			return;
		}
		this._addNode(rows[0]);
	},	
	_onAddSibling : function(){
		if(this.getData().length==0)
			return this._addNode(null);
		var rows = this.getSelectedNodes();
		if(rows.length==0){
			mini.alert('请选择一条记录');
			return;
		}
		var parent;
		for(var i=0; i<rows.length; i++){
			var currParent = this.getParentNode(rows[i])
			if(parent && currParent!=parent){
				mini.alert('无法确定欲添加节点所在位置，请重新选择一条记录');
				return;
			}
			if(!parent){
				parent = currParent;
			}
		}
		this._addNode(parent);
	},
	_addNode : function(parent){
		var newNode = {};
		if(parent)
			newNode[this.getParentField()] = parent[this.getIdField()];
		this._openFormBox(
			newNode,
			function(e){
				if(this.refreshAfterSave){
					this.refresh();
				}else{
					this.addNode(e.obj, 0, parent);
					this.expandNode(parent);
				}
			},
			function(e){
				mini.alert('保存失败');
			}
		);
	},
	_onEdit : function(readonly){
		var that = this;
		var rows = this.getSelectedNodes();
		if(rows.length!==1){
			mini.alert('请选择一条记录');
			return;
		}
		this._openFormBox(
			rows[0],
			function(e){
				that.updateNode(rows[0], e.obj);
			},
			function(e){
				mini.alert('保存失败');
			},
			!!readonly
		);
	},
	_openFormBox : function(data, onSaveSuccess, onError, readonly){
		var grid = this;
		var idField  =this.getIdField();
		mini.openIbox({
			url: this.popFormUrl,
			title: (readonly ? '查看' : (data[idField]?'编辑':'添加')) + (grid.moduleName||''),
			onload: function(){
				grid.fire("popupBoxLoad",{box:this});
				var box = this;
				var form = new mini.FsForm({
					formId : this.iboxId,
					tableName : grid.tableName,
					idField : idField,
					idFieldForChild : grid.idFieldForChild,
					data : data,
					noButton : readonly,
					ondataloaded : function(e){
						grid.fire('popformloaded', {form:e.sender, box:box});
					},
					onconstructfinish : function(e){
						if(readonly) this.banDataInput();
						grid.fire('popfrombuilt', {form:e.sender, box:box});
					},
					showSaveSuccessTip : grid.showSaveSuccessTip,
					showSaveFailTip : grid.showSaveFailTip,
					showCommitSuccessTip : grid.showCommitSuccessTip,
					showCommitFailTip : grid.showCommitFailTip,
					confirmOnSubmit : grid.confirmOnSubmit,
					confirmOnSave : grid.confirmOnSave
				});
				grid._form = form;
				form.beforeSave = grid.beforeFormSave;
				form.on('beforesave',function(e){
					var parentField = grid.getParentField();
					if(!e.data[parentField]){
						e.data[parentField] = data[parentField];
					}
					grid.fire('beforeformsave', e);
				});
				$(form.el).find('.mini-fs-close-button').click(function(){
					if(form.isChanged())
						mini.confirm(
							"有内容已经更改，确定要关闭吗？", 
							"确认操作", 
							function (action){
								if(action=='ok')
									box.destroy();
							}
						);
					else
						box.destroy();
				});
				form.on('savesuccess',function(e){
					if(typeof onSaveSuccess == 'function'){
						onSaveSuccess.call(grid, e);
					}
					grid.fire('popformsavesuccess',e);
					box.destroy();
				});
				form.on('savefail',function(e){
					grid.fire('popformsavefail',{msg:e.msg});
					if(typeof onError == 'function'){
						onError.call(grid, e);
					}
				});
			}
		});
	},
	_onDel : function(){
		var that = this;
		var rows = this.getSelectedNodes();
		if(rows.length==0){
			mini.alert('请选择一条记录');
			return;
		}
		var e = {rows:rows, cancel:false};
		this.fire('beforeremove', e);
		if(e.cancel) return;
		var whoHaveChild = [];
		var children = []
		for(var i=0; i<rows.length; i++){
			if(rows[i].children){
				whoHaveChild.push('<span style="color:red">'+rows[i][this.getTreeColumn()]+'</span>');
				children = children.concat(that.getAllChildNodes(rows[i]));
			}
		}
		rows = rows.concat(children);
		var warn = '确定删除吗？';
		if(whoHaveChild.length){
			//warn = whoHaveChild.join('、') + '的<span style="color:red">全部子节点</span>也将被删除。' + warn;
			warn = '选中节点的全部子节点也将被删除。' + warn;
		}
		mini.confirm(warn, '确认操作', function(choose){
			if(choose == 'ok'){
				mini.FsDataGrid.prototype._delOnServer.call(that,rows);
			}
		});
	},
	setAutoLoad : mini.FsTree.prototype.setAutoLoad,
	isAutoLoad : mini.FsTree.prototype.isAutoLoad,
	setLazy : mini.FsTree.prototype.setLazy,
	isLazy : mini.FsTree.prototype.isLazy,
	setTableName : mini.FsDataGrid.prototype.setTableName,
	loadByTableName : mini.FsTree.prototype.loadByTableName,
	refresh : mini.FsTree.prototype.refresh,
	_loadNode : mini.FsTree.prototype._loadNode,
	setAddSiblingBtnId : mini.FsTree.prototype.setAddSiblingBtnId,
	setAddChildBtnId : mini.FsTree.prototype.setAddChildBtnId,
	setDelBtnId : mini.FsTree.prototype.setDelBtnId,
	loadAsChild : mini.FsDataGrid.prototype.loadAsChild,
	_checkItems : mini.FsDataGrid.prototype._checkItems,
	getValueAsChild : mini.FsDataGrid.prototype.getValueAsChild
});
mini.regClass(mini.FsTreeGrid, "fstreegrid");


/**
 * #FsTreeSelect
 * 扩展功能：1.通过表名获取数据（同FsTree一样可从一个或两个表获取数据）
 *		   2.封装了多选选项清空功能（开发者无需自己写onCloseClick函数）
 * 新增属性：1.tableName		表名
 *		   2.whereString		查询表的where子句
 *		   3.orderByString	查询表的order by子句
 *		   4.onlyLeafSelect	是否仅叶子节点可以选择（默认false）
 *		   5.nextComboId		联动的下一个下拉控件（FsTreeSelect或FsComboBox），多个控件用逗号分隔
 *		   6.parentComboField	被上一级联动时的筛选字段
 *		   7.autoLoad			是否自动加载数据。一般用于级联，当此控件被级联且值为false时初始选项，
 *							  父控件为空值是也无选项。默认为true。
 *		   8.idField			如果有此属性，树的idField为此值，否则使用valueField为树的idField
 **/
mini.FsTreeSelect = function() {
	mini.FsTreeSelect.superclass.constructor.call(this);
};
mini.extend(mini.FsTreeSelect, mini.TreeSelect, {
	uiCls : "mini-fs-treeselect",
	onlyLeafSelect : false,
	autoLoad : true,
	lazy : false,
	delay : false,
	_loaded : false,
	_whereString : '1=1',
	loadWithForm : false,
	_initEvents : function() {
		mini.FsTreeSelect.superclass._initEvents.call(this);
		this.on('closeClick',this.__onCloseClick,this);
		this.on('load', this._loadText,this);
		this.on('load', this._loadNextCombo,this);
		this.on('beforenodeselect', this._onbeforenodeselect,this);
		this.on('focus', this._delayLoad, this);
	},
	getAttrs : function(A) {
		var B = mini.FsTreeSelect.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName",
								  "selectFields",
								  "whereString",
								  "orderByString", 
								  "idField",
								  "nextComboId",
								  "parentComboField",
								  "rootId",
								  "rootParentId" ]);
		mini._ParseBool(A, B, [	  "onlyLeafSelect", 
								  "autoLoad",
								  "lazy",
								  "delay", 
								  "loadWithForm"]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var idField = C.idField;
		delete C.idField;
		var parentComboField = C.parentComboField;
		delete C.parentComboField;
		var nextComboId = C.nextComboId;
		delete C.nextComboId;
		var rootId = C.rootId;
		delete C.rootId;
		var rootParentId = C.rootParentId;
		delete C.rootParentId;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var lazy = C.lazy;
		delete C.lazy;
		var orderByString = C.orderByString;
		delete C.orderByString;
		var whereString = C.whereString;
		delete C.whereString;
		var tableName = C.tableName;
		delete C.tableName;
		var onlyLeafSelect = C.onlyLeafSelect;
		delete C.onlyLeafSelect;
		mini.FsTreeSelect.superclass.set.call(this, C);
		if (!mini.isNull(idField))
			this.setIdField(idField);
		if (!mini.isNull(parentComboField))
			this.setParentComboField(parentComboField);
		if (!mini.isNull(nextComboId))
			this.setNextComboId(nextComboId);
		if (!mini.isNull(rootId))
			this.setRootId(rootId);
		if (!mini.isNull(rootParentId))
			this.setRootParentId(rootParentId);
		if (!mini.isNull(lazy))
			this.setLazy(lazy);
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(whereString))
			this.setWhereString(whereString);
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		if (!mini.isNull(onlyLeafSelect))
			this.setOnlyLeafSelect(onlyLeafSelect);
		return this;
	},
	setValue : function(value){
		mini.FsTreeSelect.superclass.setValue.call(this,value+'');
		this._loadNextCombo();
		this._delayLoad();
	},
	getValue : function(){
		var that = this;
		var valueField = that.getValueField();
		var value = this.value;
		if(!this.value) return "";
		if(this.valueFromSelect && !this.lazy){//懒加载树在获取值的时候无法保证能从树上找到节点，所以只能不考虑valueFromSelect
			var values = value.split(',');
			var realValues = [];
			var nodes = this.tree.findNodes(function(node){
				for(var i=0; i<values.length; i++){
					if(node[valueField] == values[i]){
						realValues.push(node[valueField]);
						return true;
					}
				}
			});
			return (this._loaded ? realValues.join(',') : value) || null;
		}else{
			return this.value;
		}
	},
	_loadText : function(){
		//如果是懒加载则不再赋值，因为当前的树上找不到
		this.lazy || this.setValue(this.value);
	},
	/**
	 * 重写父类的方法，建立弹出的树状菜单
	 */
	_createPopup : function() {
		mini.TreeSelect.superclass._createPopup.call(this);
		this.tree = new mini.FsTree();
		this.tree.setShowTreeIcon(true);
		this.tree
				.setStyle("border:0;width:100%;height:100%;overflow:hidden;");
		this.tree.setResultAsTree(this.resultAsTree);
		this.tree.render(this.popup._contentEl);
		this.tree.setCheckRecursive(this.checkRecursive);
		this.tree
				.setShowFolderCheckBox(this.showFolderCheckBox);
		//this.tree.setAutoSelect(false);
		this.tree.setExpandOnLoad(0);
		this.tree.on("nodeclick", this.__OnNodeClick, this);
		this.tree
				.on("nodecheck", this.__OnCheckedChanged, this);
		this.tree.on("expand", this.__OnTreeExpand, this);
		this.tree.on("collapse", this.__OnTreeCollapse, this);
		this.tree.on("beforenodecheck",
				this.__OnTreeBeforeNodeCheck, this);
		this.tree.on("beforenodeselect",
				this.__OnTreeBeforeNodeSelect, this);
		this.tree.allowAnim = false;
		var A = this;
		this.tree.on("beforeload", function(B) {
			A.fire("beforeload", B)
		}, this);
		this.tree.on("load", function(B) {
			A.fire("load", B)
		}, this);
		this.tree.on("loaderror", function(B) {
			A.fire("loaderror", B)
		}, this)
	},
	setIdField : function(A) {
		if (this.tree){
			this.tree.setIdField(A);
			this.tree.setValueField(this.getValueField());
		}
		this.idField = A
	},
	getIdField : function() {
		return this.idField
	},
	setOnlyLeafSelect : function(onlyLeafSelect){
		this.onlyLeafSelect = onlyLeafSelect;
	},
	getOnlyLeafSelect : function(){
		return this.onlyLeafSelect;
	},
	setParentComboField : function(parentComboField){
		this.parentComboField = parentComboField;
	},
	getParentComboField : function(){
		return this.parentComboField;
	},
	setNextComboId : function(nextComboId){
		this.nextComboId = nextComboId;
	},
	getNextComboId : function(){
		return this.nextComboId;
	},
	setRootId : function(rootId){
		this.rootId = rootId;
		this.tree.rootId = rootId;
	},
	getRootId : function(){
		return this.rootId;
	},
	setRootParentId : function(rootParentId){
		this.rootParentId = rootParentId;
		this.tree.rootParentId = rootParentId;
	},
	getParentRootId : function(){
		return this.rootParentId;
	},
	setLazy : function(lazy){
		this.lazy = lazy;
		if (this.tree)
			this.tree.setLazy(lazy);
	},
	isLazy : function(){
		return this.lazy;
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
		if (this.tree)
			this.tree.setSelectFields(selectFields);
	},
	getSelectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
		if (this.tree)
			this.tree.setOrderByString(orderByString);
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this._whereString = whereString;
		this.whereString = whereString;
		if (this.tree)
			this.tree.setWhereString(whereString);
	},
	getWhereString : function(){
		return this.whereString;
	},
	/**
	 * 设置表名并载入数据
	 * @param tableName
	 */
	setTableName : function(tableName) {
		this.tableName = tableName;
		if(this.autoLoad && !this.delay && !this.loadWithForm)
			this.load();
	},
	load : function(){
		this._loaded = true;
		this.getPopup();
		this.tree.selectFields = this.selectFields;
		//懒加载时从父控件取值组成whereString, idFiled的情况不考虑
		if (this._parentCombo && this._parentCombo.delay && 
				!this._parentCombo._loaded && !this.idField) {
			var p = this._parentCombo;
			var _parentComboValue = p.getValue();
			this.whereString = this.parentComboField + "='" + _parentComboValue + "'" 
						+ " and " + (this.whereString ? this.whereString : "1=1");
		};
		this.tree.whereString = this.whereString;
		this.tree.lazy = this.lazy;
		this.tree.setTableName(this.tableName);
		var tree = this.tree;
		tree.on('nodeselect',function(e){
			var parentNode = tree.getParentNode(e.node);
			if(parentNode && parentNode._level!=-1 && !tree.getParentNode(e.node).expanded)
				tree.expandSelected(true);
		},tree);
	},
	_delayLoad : function(){
		if(!this.delay || this._loaded || !this.autoLoad)
			return;
		this.load();
	},
	_getNextcombos : function(){
		if(!this.nextComboId)
			return [];
		if(!this._nextCombos){
			var comboIdList = this.nextComboId.split(',');
			this._nextCombos = [];
			for(var i=0; i<comboIdList.length; i++){
				var combo = mini.get(comboIdList[i]);
				if(combo && (combo instanceof mini.FsComboBox || combo instanceof mini.FsTreeSelect)){
					combo._parentCombo = this;
					this._nextCombos.push(combo);
				}
				else{
					console.warn('未能找到id为"'+comboIdList[i]+'"的级联控件，已忽略');
					if(mini_debugger) alert('未能找到id为"'+comboIdList[i]+'"的级联控件');
				}
			}
		}
		return this._nextCombos;
	},
	/**
	 * 加载级联的下一级ComboBox的数据
	 */
	_loadNextCombo : function(){
		var value = this.getValue();
		this._getNextcombos();
		if(!this._nextCombos)
			return;
		for(var i=0; i<this._nextCombos.length; i++){
			var nextCombo = this._nextCombos[i];
			if(value || value===0)
				nextCombo.whereString = nextCombo.parentComboField + "='" + value + "'"
					+ " and " + nextCombo._whereString;
			else if(nextCombo.autoLoad)
				nextCombo.whereString = nextCombo._whereString;
			else
				nextCombo.whereString = "1=0";
			nextCombo.load();
		}
	},
	__onCloseClick : function(e){
		this.setText("");
		this.setValue("");
	},
	_onbeforenodeselect : function(e){
		if(this.onlyLeafSelect && !e.isLeaf)
			e.cancel = true;
	}
});
mini.regClass(mini.FsTreeSelect, "fstreeselect");

/**
 * #FsForm
 * 注意：FsForm只能对已经解析好的miniUI控件进行功能绑定，
 *	   所以不要在页面载入时就实例化FsForm或Form，
 *	   可以仅在需要时才实例化Form，推荐采用单例模式使用Form。
 * 扩展功能：1.对表单数据的保存（关联到表）
 *		   2.关联子表
 * 扩展事件：1.beforesave 保存前执行，如果e.cacel==true则取消保存
 */
 /**
  * FsForm构造函数
  * @param formId【必须】 表单容器的HTML元素id
  * @param tableName 主表的表名
  * @param idField 主表的id字段
  * @param serverSync 是否即时保存到服务器
  */
mini.FsForm = function(formId,tableName,idField,serverSync){
	if(typeof formId == 'string'){
		mini.FsForm.superclass.constructor.call(this,formId);
		if(tableName) 
			this.setTableName(tableName);
		if(idField) 
			this.setIdField(idField);
		if(serverSync!==undefined) 
			this.serverSync = serverSync;
	}else if(typeof formId == 'object'){
		var args = formId;
		mini.FsForm.superclass.constructor.call(this, args.formId);
		if(args.tableName) 
			this.setTableName(args.tableName);
		if(args.idField) 
			this.setIdField(args.idField);
		if(args.idFieldForChild)
			this.idFieldForChild = args.idFieldForChild;
		if(args.serverSync!==undefined) 
			this.serverSync = args.serverSync;
		if(args.isFlow)
			this.isFlow = true;
		if(args.noButton)
			this.noButton = true;
		if(args.onconstructfinish)
			this.on('constructfinish', args.onconstructfinish, this)
		if(args.ondataloaded)
			this.on('dataloaded',args.ondataloaded);
		if(args.data){
			if(args.data.EDITFLAG){//用于标识工作流的表单也可编辑
				this.editFlag = true;
			}
			this.setData(args.data,false);
		}
		this.showSaveSuccessTip = args.showSaveSuccessTip===false ? false : true;
		this.showSaveFailTip = args.showSaveFailTip===false ? false : true;
		this.showCommitSuccessTip = args.showCommitSuccessTip===false ? false : true;
		this.showCommitFailTip = args.showCommitFailTip===false ? false : true;
		this.confirmOnSubmit = !!args.confirmOnSubmit;
		this.confirmOnSave = !!args.confirmOnSave;
	}
	this._init();
	this.fire('constructfinish');
}
mini.extend(mini.FsForm,mini.Form,{
	childControls : [],
	saveType : 'insert',
	serverSync : true,
	isFlow : false,
	flowFormExp : '.fore-common-approval-form',	//工作流表单区域容器的jQuery选择器表达式
	_init : function(){
		this._getChildControls();
		if(this.isFlow && !this.editFlag)
			this.banDataInput();
		this._bindBtn();
		this._loadFields();
	},
	_getChildControls : function(){
		var $ctrls = $(this.el).find(
			"div.mini-fs-datagrid,div.mini-fs-treegrid,div.mini-fs-tree,"+
			"div.mini-fs-checkboxlist,div.mini-fs-radiobuttonlist");
		this.childControls = [];
		for(var i=0; i<$ctrls.length; i++){
			var id = $ctrls[i].id;
			var ctrl =  mini.get(id);
			if(ctrl && ctrl.isChild){
				this.childControls.push(ctrl);
			}
		}
		return this.childControls;
	},
	//dwr批量统一加载表单内的控件，一次最多20个
	_loadFields : function(){
		var ctrls = this.getFields();
		var prepares = [];
		for(var i=0; i<ctrls.length; i++){
			var ctrl = ctrls[i];
			if(ctrl.loadWithForm && ctrl.autoLoad && !ctrl.delay && !ctrl._loaded && ctrl.load){
				prepares.push(ctrl);
			}
		}
		for(var j=0, l=prepares.length; j<l; j+=20){
			window.dwr.engine.beginBatch();
			for(var i=0; i+j<l && i<20; i++){
				prepares[j+i].load();
			}
			window.dwr.engine.endBatch();
		}
	},
	//把工作流表单区域外的所有表单控件转换为文字显示
	banDataInput : function(){
		var form = this;
		this.loading();
		$(this.el).find('.fore-req-sign').hide();
		var fields = this.getFields();
		//setTimeout(function(){
			for(var i=0; i<fields.length; i++){
				if(fields[i] instanceof mini.Hidden || 
				 		$(fields[i].el).closest(this.flowFormExp).length)
				 	continue;
				 mini.fsUtil.toPlainText(fields[i]);
				//if(fields[i].disable) fields[i].disable();
				// var text = fields[i].text ? 
				// 		fields[i].text : (fields[i].value ? fields[i].value : '');
				// $(fields[i].el).after(text);
				// fields[i].destroy();
				form.unmask();
			}
		//},1)
		this._getChildControls();
		for(var i=0; i<this.childControls.length; i++){
			var ctrl = this.childControls[i];
			if(ctrl.toolbarId)
				$('#'+ctrl.toolbarId).hide();
			if(ctrl.allowCellEdit)
				ctrl.setAllowCellEdit(false);
		}
	},
	_bindBtn : function(){
		var form = this;
		if(this.noButton){
			$(this.el).find(".mini-fs-save-button").hide();
			$(this.el).find(".mini-fs-commit-button").hide();
			$(this.el).find(".mini-fs-reset-button").hide();
			$(this.el).find(".mini-fs-ok-button").hide();
		}
		var data = this.getData();
		if(!data.S_PROCESSINSTANCEID){
			$(this.el).undelegate(".mini-fs-save-button", 'click').delegate(".mini-fs-save-button", 'click', function(){
				if(form.confirmOnSave){
					mini.confirm('是否确定保存？', '确认操作', function(action){
						if(action == 'ok'){
							form.loading('正在保存');
							form.saveOrUpdate(false);
						}
					})
				}else{
					form.loading('正在保存');
					form.saveOrUpdate(false);
				}
			});
			$(this.el).undelegate(".mini-fs-commit-button", 'click').delegate(".mini-fs-commit-button", 'click', function(){
				if(form.confirmOnSubmit){
					mini.confirm('是否确定提交？', '确认操作', function(action){
						if(action == 'ok'){
							form.loading('正在提交');
							form.saveOrUpdate(true);
						}
					})
				}else{
					form.loading('正在提交');
					form.saveOrUpdate(true);
				}
			});
		}else{
			$(this.el).find(".mini-fs-save-button").hide();
			//TODO: 禁用非工作流表单
			if(data.TASKID){
				$(this.el).undelegate(".mini-fs-commit-button", 'click').delegate(".mini-fs-commit-button", 'click', function(){
					if(form.confirmOnSubmit){
					mini.confirm('是否确定提交？', '确认操作', function(action){
						if(action == 'ok'){
							form.loading('正在提交');
							form.flowCommit();
						}
					})
				}else{
					form.loading('正在提交');
					form.flowCommit();
				}
				});
			}else{
				$(this.el).find(".mini-fs-commit-button").hide();
			}
		}
		
		$(this.el).find(".mini-fs-search-button").unbind().click(function(){
			form.fireSearch();
		});
		$(this.el).find(".mini-fs-reset-button").unbind().click(function(){
			form.reset();
		});
		$(this.el).find(".mini-fs-ok-button").unbind().click(function(){
			form.onOK();
		});
	},
	fireSearch : function(){
		this.fire('search',this.getFilters());
	},
	setTableName : function(tableName){
		this.tableName = tableName;
	},
	getTableName : function(){
		return this.tableName;
	},
	setIdField : function(idField){
		this.idField = idField;
	},
	getIdField : function(){
		return this.idField;
	},
	setActivitiKey : function(activitiKey){
		this.activitiKey = activitiKey;
	},
	getActivitiKey : function(){
		return this.activitiKey;
	},
	setSaveType : function(saveType){
		saveType = saveType.toLowerCase();
		if(saveType=='insert' || saveType=='update')
			this.saveType = saveType;
	},
	getSaveType : function(){
		return this.saveType;
	},
	/**
	 * 为表单的域设置数据
	 * @param data 数据对象
	 * @param setUndefinedValue 是否将域对应data中未定义的值设置为空，默认true
	 */
	setData : function(data,setUndefinedValue){
		if(this.idField && data[this.idField])
			this.oldDatas = data;
		else
			this.oldDatas = undefined;
		this.setSaveType(this.oldDatas ? 'update' : 'insert');
		if(!data) return;

		var deep = true;
		if (typeof data != "object")
			data = {};
		var fields = this.getFieldsMap();
		for ( var fieldName in fields) {
			var field = fields[fieldName];
			if (!field)
				continue;
			if (field.setValue) {
				var value = data[fieldName];
				if (deep == true)
					value = mini._getMap(fieldName, data);
				if (value === undefined && setUndefinedValue === false)
					continue;
				if (value === null)
					value = "";
				if (field.delay) {
					value = value + '';
					field.value = value;
					field._valueEl.value = field.value;
					var t = data[fieldName+'_DESC'] ? data[fieldName+'_DESC'] : value;
					field.text = field._textEl.value = t;
					field._doEmpty();
					field._getNextcombos();
				}else{
					field.setValue(value)
				}
			}
			if (field.setText && field.textName) {
				var text = data[field.textName];
				if (deep == true)
					text = mini._getMap(field.textName, data);
				if (mini.isNull(text))
					text = "";
				field.setText(text)
			}
			//懒加载的下拉树通过翻译字段显示文本
			if (field instanceof mini.FsTreeSelect && field.lazy){
				var text = data[fieldName+'_DESC'];
				if(text){
					field.setText(text);
				}
			}
		}

		//子表控件赋值
		this._getChildControls();
		var fkey = this.idFieldForChild ? this.idFieldForChild : this.idField;
		for(var i=0; i<this.childControls.length; i++){
			var ctrl = this.childControls[i];
			ctrl.loadAsChild(data[fkey]);
		}
		this.setChanged(false);
		this.fire('dataloaded',{form:this,data:data});
		if(this.ondataloaded){
			this.ondataloaded();
		}
	},
	clear : function(){
		this._getChildControls();
		mini.FsForm.superclass.clear.call(this);
		delete this.oldDatas;
		for(var i=0; i<this.childControls.length; i++){
			var ctrl = this.childControls[i];
			if(ctrl.clear)
				ctrl.clear();
			else if(ctrl.clearData)
				ctrl.clearData();
			else if(ctrl.load)
				ctrl.load({});
		}
	},
	getTexts : function(){
		var result = {};
		var fields = this.getFields();
		for ( var i = 0, l = fields.length; i < l; i++) {
			var field = fields[i];
			if(field.getText)
				result[field.name+'_DESC'] = field.getText();
		}
		return result;
	},
	/**
	 * 保存表单，可同时提交工作流
	 * @param isCommit 是否提交工作流，默认false
	 */
	saveOrUpdate : function(isCommit, callback){
		var form = that = this;
		if(!this.serverSync)
			return this.onOK();
		// 执行保存前的方法;
		if(this.beforeSave && this.beforeSave()===false){
			form.unmask();
			return;
		}
		if(!this.saveType)
			throw new Error("保存或更新标识不正确,无法保存!");
		this.validate();
		if(!this.isValid()) {
			form.unmask();
			return;
		}
		if(!this._validateGridChildren()){
			form.unmask();
			return;
		}
		var data = this.getData(false,true);
		var texts = this.getTexts();
		var ajaxData = [
			this.oldDatas ? this.oldDatas : null,
			data,
			this._getChildValue(),
			isCommit ? {
							activitiKey: this.activitiKey,
							variables: {}
						}
					: null
		];
		var e = {
			cancel : false,
			data : data,
			texts : texts,
			ajaxData : ajaxData
		};
		this.fire('beforesave',e);
		if(e.cancel){
			form.unmask();
			return;
		}
		data = e.data;
		texts = e.texts;
		ajaxData = e.ajaxData;
		var jsonStr = JSON.stringify(ajaxData);
		var option ={
				callback : function(rowBase){
					that.unmask();
					var obj = rowBase.currentObjects;
					that.setChanged(false);
					var saveType = that.oldDatas ? 'update' : 'insert';
					that.oldDatas = obj;
					that.saveType = 'update';
					if(typeof callback === 'function'){
						callback(obj);
					}
					if(that.afterSave)
						that.afterSave(obj,that.saveType);
					mini.copyTo(obj,texts);
					that.fire('savesuccess',{form:form,data:obj,obj:obj,saveType:saveType});
					if(form.showSaveSuccessTip)
						mini.alert('保存成功',2000);
				},
				exceptionHandler : function(msg){
					form.fire('savefail',{msg:msg});
					that.unmask();
					if(form.showSaveFailTip)
						mini.alert('保存失败('+msg+')',2000);
				}
		};
		FsService.save(this.tableName,jsonStr,option);
	},
	flowCommit : function(){
		var form = that = this;
		this.validate();
		if(!this.isValid()) {
			form.unmask();
			return;
		}
		var data = this.getData();
		var e = {
			cancel : false,
			data : data
			
		};
		this.fire('beforecommit',e);
		if(e.cancel){
			form.unmask();
			return;
		}
		data = e.data;
		var taskId = data.TASKID;
		if(taskId){
			data.taskId = taskId;
			data.PROCESSINSTANCEID = data.S_PROCESSINSTANCEID;
			data.busTableName = this.tableName;
			var option ={
					callback : function(result){
						that.unmask();
						if(result && result.currentObjects != null){
					  		that.fire('commitsuccess', {data: result.currentObjects});
					  		if(that.showCommitSuccessTip)
					  			mini.alert("提交成功!",2000);
					  	}else{
					  		that.fire('commitfail',
					  			{msg:'提交回调函数被调用，但未得到成功保存的数据'})
					  		if(that.showCommitFailTip)
					  			mini.alert("提交失败!",2000);
					  	}
					},
					exceptionHandler : function(msg){
						that.unmask();
						that.fire('commitfail',{msg:msg})
						if(that.showCommitFailTip)
							mini.alert('提交失败('+msg+')',2000);
					}
			};
			var e = {
					cancel : false,
					data : data
					
				};
				this.fire('beforesave',e);
				if(e.cancel){
					form.unmask();
					return;
				}
				data = e.data;
			var ajaxData = [
							this.oldDatas ? this.oldDatas : null,
							data,
							this._getChildValue()
							
						];
			var jsonStr = JSON.stringify(ajaxData);
			FsService.complete("",jsonStr,option);
		}
	},
	_validateGridChildren : function(){
		this._getChildControls();
		for(var i=0; i<this.childControls.length; i++){
			var childControl = this.childControls[i];
			if(! childControl instanceof mini.FsDataGrid)
				continue;
			childControl.validate();
			if (childControl.isValid() == false){
				mini.alert('请检查'
					+(childControl.moduleName ? childControl.moduleName : '')
					+'表格输入内容');
				return false;
			}
		}
		return true;
	},
	_getChildValue : function(){
		var results = {};
		this._getChildControls();
		for(var i=0; i<this.childControls.length; i++){
			var childControl = this.childControls[i];
			if(childControl.serverSync)
				continue;
			var tableName = childControl.relationTableName ? 
					childControl.relationTableName : childControl.tableName
			results[tableName] = childControl.getValueAsChild();
		}
		return results;
	},
	/**
	 * 只收集数据并调用确认后函数，不保存数据到服务器。
	 */
	onOK : function(){
		// 执行保存前的方法;
		if(this.beforeOK && !this.beforeOK())
			return;
		this.validate();
		if(!this.isValid()) 
			return;
		var that = this;
		var data = this.getData(false,true);
		if(this.afterOK)
			this.afterOK(data);
	},
	getFilters : function(){
		var fields = this.getFields();
		var whereStrings = [];
		var values = []
		for(var i=0; i<fields.length; i++){
			if(fields[i].genFilter){
				var filter = fields[i].genFilter()
				if(filter){
					whereStrings.push(filter.whereString);
					if(filter.value instanceof Array){//针对in的情况
						for(var j=0; j<filter.value.length; j++){
							var globalParameter = {
								paraValueStr: filter.value[j], 
								fieldType: fields[i].operDataType||'string'
							};
							values.push(globalParameter);
						}
					}else{
						var globalParameter = {
							paraValueStr: filter.value, 
							fieldType: fields[i].operDataType||'string'
						};
						values.push(globalParameter);
					}
				}
			}
		}
		return {
			whereString: whereStrings.join(' and '),
			wherePara: values
		}
	},
	genWhereString : function(){
		var whereObj = this.getFilters();
		// var whereString = whereObj.whereString;
		// for(var i=0; i<whereObj.wherePara.length; i++){
		// 	var type = whereObj.wherePara[i].fieldType.toLowerCase();
		// 	var para = whereObj.wherePara[i].paraValueStr;
		// 	if(type !== 'number'){
		// 		var para = "'" + para + "'";
		// 	}
		// 	whereString = whereString.replace('?', para);
		// }
		// return whereString;
		return mini._fsUtil._assembleWhereString(whereObj.whereString, whereObj.wherePara);
	}
});

/**
 * #FsListBox
 * 扩展功能：1.通过表名获取数据
 *		   2.级联(仅在通过表名获取数据时可用)
 * 新增属性：1.tableName		表名
 *		   2.whereString		查询表的where子句
 *		   3.orderByString	查询表的order by子句
 **/
mini.FsListBox = function() {
	mini.FsListBox.superclass.constructor.call(this);
};
mini.extend(mini.FsListBox, mini.ListBox, {
	uiCls : "mini-fs-listbox",
	autoLoad : true,
	getAttrs : function(A) {
		var B = mini.FsListBox.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName",
								  "selectFields",
								  "whereString",
								  "orderByString", 
								  "groupByString" ]);
		mini._ParseBool(A, B, ["autoLoad"]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var orderByString = C.orderByString;
		delete C.orderByString;
		var whereString = C.whereString;
		delete C.whereString;
		var groupByString = C.groupByString;
		delete C.groupByString;
		var tableName = C.tableName;
		delete C.tableName;
		mini.FsListBox.superclass.set.call(this, C);
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(whereString))
			this.setWhereString(whereString);
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(groupByString))
			this.setGroupByString(groupByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		return this;
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
	},
	getselectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this.whereString = whereString;
	},
	getWhereString : function(){
		return this.whereString;
	},
	setGroupByString : function(groupByString){
		this.groupByString = groupByString;
	},
	getGroupByString : function(){
		return this.groupByString;
	},
	// setTableName : function(tableName){
	// 	this.tableName = tableName;
	// 	if(this.autoLoad)
	// 		this.load();
	// },
	getTableName : function(){
		return this.tableName;
	},
	/**
	 * 加载数据
	 */
	// load : function(){
	// 	var that = this;
	// 	var callback = function(){
	// 		that.data = that._listbox.data;
	// 		var valueAndText = that._listbox.getValueAndText(that.value);
	// 		that.text = valueAndText[1];
	// 		if(that._textEl) that._textEl.value = valueAndText[1];
	// 		that.setText(that.text);
	// 	}
	// 	this._listbox.setTableName(this.tableName,this.whereString,
	// 			this.orderByString,this.groupByString,callback);
	// },
	getSelectedData : function(){
		var value = this.getValue();
		var data = this._listbox.data;
		var valueFiled = this.getValueField();
		for(var i=0; i<data.length; i++)
			if(data[i][valueFiled] === value)
				return data[i];
		return null;
	}
});
mini.regClass(mini.FsListBox, "fslistbox");

/**
 * #FsComboBox
 * 扩展功能：1.通过表名获取数据
 *		   2.级联(仅在通过表名获取数据时可用)
 * 新增属性：1.tableName		表名
 *		   2.whereString		查询表的where子句
 *		   3.orderByString	查询表的order by子句
 *		   4.nextComboId		级联的下一个comboBox或treeselect
 *		   5.parentField		被级联时的过滤字段。如果此属性有值，则在初始时不会加载数据
 *		   6.searchField		键入内容时查询的目标字段，多个字段可用逗号分隔。textField无论如何都会被搜索
 *		   7.autoLoad			[boolean]是否自动加载数据。一般用于级联，当此控件被级联且值为false时初始时不加载选项。
 *							  另外，父控件为空值时也不加载选项。默认为true。
 *		   8.pinyinField		拼音查询的字段，将会把这个字段的汉字转为拼音以待查询（不使用数据库的拼音字段）
 *		   9.fullPinyin		[boolean]拼音查询使用全拼还是仅首字母（默认使用拼音首字母）
 *		   10.uniqueField	被合并重复的字段（此属性被设置时）
 **/
mini.FsComboBox = function() {
	mini.FsComboBox.superclass.constructor.call(this);
};
mini.extend(mini.FsComboBox, mini.ComboBox, {
	uiCls : "mini-fs-combobox",
	searchField : 'S_PYM',
	_whereString : "1=1",
	autoLoad : true,
	addCaptionField : false,
	_loaded : false,
	delay : false,			//当下拉框（无初始值）被展开时才获取数据，以避免集中远程请求，提高性能，适用于无初始值的情况
	loadWithForm : false,	//控件所在容器被new为FsForm时才被统一加载，以减少远程请求，提高加载效率
							//delay和loadWithForm均为提高性能而设计，只能使用一种。
	_initEvents : function() {
		mini.FsComboBox.superclass._initEvents.call(this);
		this.on('load', this._loadNextCombo);
		this.on('focus', this._delayLoad, this);
	},
	getAttrs : function(A) {
		var B = mini.FsComboBox.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName",
								  "whereString",
								  "selectFields",
								  "orderByString", 
								  "groupByString",
								  "nextComboId",
								  "idField",
								  "parentField", 
								  "parentComboField", 
								  "searchField", 
								  "pinyinField",
								  "uniqueField" ]);
		mini._ParseBool(A, B, [   "autoLoad", 
								  "fullPinyin", 
								  "addCaptionField", 
								  "delay", 
								  "loadWithForm"]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var idField = C.idField;
		delete C.idField;
		var parentField = C.parentField;
		delete C.parentField;
		var uniqueField = C.uniqueField;
		delete C.uniqueField;
		var pinyinField = C.pinyinField;
		delete C.pinyinField;
		var fullPinyin = C.fullPinyin;
		delete C.fullPinyin;
		var parentComboField = C.parentComboField;
		delete C.parentComboField;
		var nextComboId = C.nextComboId;
		delete C.nextComboId;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var orderByString = C.orderByString;
		delete C.orderByString;
		var whereString = C.whereString;
		delete C.whereString;
		var tableName = C.tableName;
		delete C.tableName;
		mini.FsComboBox.superclass.set.call(this, C);
		if(!mini.isNull(idField))
			this.setIdField(idField);
		if (!mini.isNull(parentField))
			this.setParentField(parentField);
		if(!mini.isNull(uniqueField))
			this.setUniqueField(uniqueField);
		if (!mini.isNull(pinyinField))
			this.setPinyinField(pinyinField);
		if (!mini.isNull(fullPinyin))
			this.setFullPinyin(fullPinyin);
		if (!mini.isNull(parentComboField))
			this.setParentComboField(parentComboField);
		if (!mini.isNull(nextComboId))
			this.setNextComboId(nextComboId);
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(whereString))
			this.setWhereString(whereString);
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		return this;
	},
	//override
	setValue : function(A) {
		if (this.value !== A) {
			var B = this._listbox.getValueAndText(A);
			this.value = A;
			this._valueEl.value = this.value;
			this.text = this._textEl.value = B[1];
			this._doEmpty();
			this._loadNextCombo();
			this._delayLoad();
		} else {
			B = this._listbox.getValueAndText(A);
			this.text = this._textEl.value = B[1]
		}
	},
	//override
	setTextField : function(A) {
		if(A.indexOf(',')>-1 && A.indexOf('{')==-1){	//通过逗号分隔多个字段
			this._textField = A;
			this.textField = "__textFieldList";
			this.textFieldList = A.split(',');
			if(this._listbox){
				this._listbox.setTextField(this.textField);
				this._listbox._textField = this._textField;
				this._listbox.textFieldList = this.textFieldList;
			}
		}else if(A.indexOf('{')>-1){	//通过花括号表示的由多个字段组合
			this._textField = A;
			this.textFieldList = [];
			var match = mini.regs.field.exec(A);
			while(match){
				this.textFieldList.push(match[0]);
				match = mini.regs.field.exec(A);
			}
			this.textField = "__textFieldReg";
			if(this._listbox){
				this._listbox.setTextField(this.textField);
				this._listbox._textField = this._textField;
				this._listbox.textFieldList = this.textFieldList;
			}
		}else{	//仅一个字段
			if (this._listbox)
				this._listbox.setTextField(A);
			this.textField = A
		}
	},
	setPinyinField : function(pinyinField){
		this.pinyinField = pinyinField;
		this._listbox.pinyinField = pinyinField;
	},
	getPinyinField : function(){
		return this._listbox.pinyinField;
	},
	setFullPinyin : function(fullPinyin){
		this.fullPinyin = fullPinyin;
		this._listbox.fullPinyin = fullPinyin;
	},
	isFullPinyin : function(){
		return this._listbox.fullPinyin;
	},
	setIdField : function(idField){
		this.idField = idField;
	},
	getIdField : function(){
		return this.idField;
	},
	setParentField : function(parentField){
		this.parentField = parentField;
		this.parentComboField = parentField;
	},
	getParentField : function(){
		return this.parentField;
	},
	setUniqueField : function(uniqueField){
		this.uniqueField = uniqueField;
	},
	getUniqueField : function(){
		return this.uniqueField;
	},
	setParentComboField : function(parentComboField){
		this.parentComboField = parentComboField;
	},
	getParentComboField : function(){
		return this.parentComboField;
	},
	setNextComboId : function(nextComboId){
		this.nextComboId = nextComboId;
	},
	getNextComboId : function(){
		return this.nextComboId;
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
	},
	getselectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this._whereString = whereString;
		this.whereString = whereString;
	},
	getWhereString : function(){
		return this.whereString;
	},
	setTableName : function(tableName){
		this.tableName = tableName;
		if(this.autoLoad && !this.delay && !this.loadWithForm)
			this.load();
	},
	getTableName : function(){
		return this.tableName;
	},
	/**
	 * 加载数据
	 */
	load : function(){
		this._loaded = true;
		var that = this;
		var callback = function(){
			that.data = that._listbox.data;
			var valueAndText = that._listbox.getValueAndText(that.value);
			that.text = valueAndText[1];
			if(that._textEl) that._textEl.value = valueAndText[1];
			that.setText(that.text);
		}
		//懒加载时从父控件取值组成whereString, idFiled的情况不考虑
		if (this._parentCombo && this._parentCombo.delay && 
				!this._parentCombo._loaded && !this.idField) {
			var p = this._parentCombo;
			var _parentComboValue = p.getValue();
			this.whereString = this.parentComboField + "='" + _parentComboValue + "'" 
						+ " and " + (this.whereString ? this.whereString : "1=1");
		};
		var param = {
			tableName: this.tableName,
			whereString: this.whereString ? this.whereString : '',
			orderByString: this.orderByString ? this.orderByString : '',
			groupByString: this.groupByString ? this.groupByString : '',
			uniqueField: this.uniqueField,
			addCaptionField: this.addCaptionField
		};
		if(this.selectFields)
			param.selectFields = this.selectFields;
		this._listbox.setTableName(param,callback);
		//加载数据后，重新设置弹出框高度
		this._listbox.on('afterload',function(){
			var scrollHeight = this._viewEl.scrollHeight;
			var height = this.data.length ? 
				(scrollHeight>that.popupMaxHeight ? that.popupMaxHeight : scrollHeight) : 
				this.getHeight();
			that.getPopup().setHeight(height);
			// if(!that._textEl.value){
			// 	that.setValue("");
			// }
		},this._listbox);
	},
	_delayLoad : function(){
		if(!this.delay || this._loaded || !this.autoLoad)
			return;
		this.load();
	},
	getSelectedData : function(){
		var value = this.getValue();
		var data = this._listbox.data;
		var valueFiled = this.getValueField();
		for(var i=0; i<data.length; i++)
			if(data[i][valueFiled] === value)
				return data[i];
		return null;
	},
	_getNextcombos : function(){
		if(!this.nextComboId)
			return [];
		if(!this._nextCombos){
			var comboIdList = this.nextComboId.split(',');
			this._nextCombos = [];
			for(var i=0; i<comboIdList.length; i++){
				var combo = mini.get(comboIdList[i]);
				if(combo && (combo instanceof mini.FsComboBox || combo instanceof mini.FsTreeSelect)){
					combo._parentCombo = this;
					this._nextCombos.push(combo);
				}else{
					console.warn('未能找到id为"'+comboIdList[i]+'"的级联控件，已忽略');
					if(mini_debugger) 
						alert('未能找到id为"'+comboIdList[i]+'"的级联控件，已忽略');
				}
			}
		}
		return this._nextCombos;
	},
	/**
	 * 加载级联的下一级ComboBox的数据
	 */
	_loadNextCombo : function(){
		this._getNextcombos();
		if(!this._nextCombos)
			return;
		var value = this.getValue();
		if(this.idField){
			if(this.getSelectedData())
				value = this.getSelectedData()[this.idField] || "";
			else
				value = '';
		}
		for(var i=0; i<this._nextCombos.length; i++){
			var nextCombo = this._nextCombos[i];

			// if(value || value===0)
			// 	nextCombo.whereString = nextCombo.parentComboField + "='" + value + "'" 
			// 		+ " and " + nextCombo._whereString;
			// else if(nextCombo.autoLoad)
			// 	nextCombo.whereString = nextCombo._whereString;
			// else
			// 	nextCombo.whereString = "1=0";
			// nextCombo.load();

			if(value || value===0){
				nextCombo.whereString = nextCombo.parentComboField + "='" + value + "'" 
					+ " and " + nextCombo._whereString;
				nextCombo.load();
			}
			//2014-3-28添加，修正设置空置后未联动问题
			else if(value===''){
				nextCombo.whereString = "1=0";
				nextCombo.load();
				//nextCombo.setValue('');
			}
		}
	},
	_doQuery : function(value) {
		if (this.multiSelect == true)
			return;
		var C = [];
		for ( var i = 0; i < this.data.length; i++) {
			var data = this.data[i];
			var fields = this.searchField ? this.searchField.split(',') : [];
			if(fields.indexOf(this.textField)<0)
				fields.push(this.textField);
			if(this.pinyinField)
				fields.push('_py_');
			for(var k=0; k<fields.length; k++){
				var F = data[fields[k]];
				if (typeof F == "string") {
					F = F.toUpperCase();
					value = value.toUpperCase();
					if (F.indexOf(value) != -1){
						C.push(data);
						break;
					}
				}
			}
		}
		this._listbox.setData(C);
		this._filtered = true;
		if (value !== "" || this.isShowPopup()) {
			this.showPopup();
			var A = 0;
			if (this._listbox.getShowNullItem())
				A = 1;
			var G = this;
			G._listbox._focusItem(A, true)
		}
	}
});
mini.regClass(mini.FsComboBox, "fscombobox");

/**
 * #FsActivityBox
 * 扩展功能：1.初始时通过activitiKey获取数据
 * 新增属性：1.activitiKey		
 **/
mini.FsActivityBox = function() {
	mini.FsActivityBox.superclass.constructor.call(this);
};
mini.extend(mini.FsActivityBox, mini.ComboBox, {
	uiCls : "mini-fs-activitybox",
	textField : 'text',
	valueField : 'text',
	getAttrs : function(A) {
		var B = mini.FsActivityBox.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "activitiKey"]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var activitiKey = C.activitiKey;
		delete C.activitiKey;
		mini.FsActivityBox.superclass.set.call(this, C);
		if (!mini.isNull(activitiKey))
			this.setActivitiKey(activitiKey);
		return this;
	},
	setActivitiKey : function(activitiKey){
		this.activitiKey = activitiKey;
		this.load();
	},
	getActivitiKey : function(){
		return this.activitiKey;
	},
	/**
	 * 加载数据
	 */
	load : function(){
		if(!this.activitiKey)
			return;
		var that = this;
		var thisListBox = this._listbox;
		var callback = {
			callback: function (result){
				var data = [];
				for(var i=0; i<result.length; i++){
					data.push({text:result[i],value:result[i]});
				}
				var C = {
					data : data,
					cancel : false
				};
				thisListBox.fire("preload", C);
				if (C.cancel == true)
					return;
				thisListBox.setData(C.data);
				thisListBox.fire("load");
				setTimeout(function() {
					thisListBox.doLayout();
					that.data = that._listbox.data;
					var valueAndText = that._listbox.getValueAndText(that.value);
					that.text = valueAndText[1];
					if(that._textEl) that._textEl.value = valueAndText[1];
				}, 100)
			},
			exceptionHandler: function (msg){
				console.error('获取activityBox数据时出错（'+msg+'）')
				if(mini_debugger) alert('获取activityBox数据时出错（'+msg+'）');
			}
		};
		FsService.findActivitys(this.activitiKey,callback);
	}
});
mini.regClass(mini.FsActivityBox, "fsactivitybox");

/**
 * #FsAutoComplete
 * 扩展功能：1.通过表名获取数据
 * 新增属性：1.tableName		表名
 *		   2.whereString		查询表的where子句
 *		   3.orderByString	查询表的order by子句
 * 变更属性：1.searchField		如果要多字段匹配用逗号隔开
 **/
mini.FsAutoComplete = function() {
	mini.FsAutoComplete.superclass.constructor.call(this);
};
mini.extend(mini.FsAutoComplete, mini.AutoComplete, {
	uiCls : "mini-fs-autocomplete",
	searchField : '',
	getAttrs : function(A) {
		var B = mini.FsAutoComplete.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName","selectFields","whereString","orderByString" ]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var orderByString = C.orderByString;
		delete C.orderByString;
		var whereString = C.whereString;
		delete C.whereString;
		var tableName = C.tableName;
		delete C.tableName;
		mini.FsAutoComplete.superclass.set.call(this, C);
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(whereString))
			this.setWhereString(whereString);
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		return this;
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
	},
	getselectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this.whereString = whereString;
	},
	getWhereString : function(){
		return this.whereString;
	},
	setTableName : function(tableName){
		this.tableName = tableName;
		this.load();
	},
	getTableName : function(){
		return this.tableName;
	},
	/**
	 * 重写父类方法：根据输入的字符串查找列表
	 * @param 输入的字符串
	 */
	_doQuery : function(text) {
		if (!this.tableName){
			mini.FsAutoComplete.superclass._doQuery.call(this, text);
			return;
		}
		var that = this;
		var fields = this.searchField ? this.searchField.split(',') : [];
		if(fields.indexOf(this.textField)<0)
			fields.push(this.textField);
		var whereList = [];
		for(var i=0; i<fields.length; i++)
			whereList.push(fields[i] + " like '%" + text + "%'");
		var param = {
			addCaptionField: false,
			fillChild: "No",
			selectFields: this.selectFields,
			groupByString: this.groupByString,
			orderByString: this.orderByString,
			whereString: (this.whereString ? (this.whereString+' and ') : "") + 
						"("+whereList.join(" or ")+")"
		};
		var callback = {
			callback : function(result) {
				var data = [];
				for(var i=0; i<result.length; i++){
					data.push(result[i].originalObjects);
				}
				try {
					data = mini.decode(data)
				} catch (e) {
					throw new Error(
							"autocomplete json is error")
				}
				that._listbox.setData(data);
				that.showPopup();
				that._listbox._focusItem(0, true);
				that.data = data;
				that.fire("load", {
					data : data
				})
			},
			exceptionHandler : function(msg) {
				that.showPopup("error")
			}
		};
		FsService.getEntityList(this.tableName,param,callback);
	}
});
mini.regClass(mini.FsAutoComplete, "fsautocomplete");


/**
 * #FsCheckBoxList
 * 扩展功能：1.通过表名获取数据
 * 新增属性：1.tableName		表名
 *		   2.whereString		查询表的where子句
 *		   3.orderByString	查询表的order by子句
 *		   4.showSelectAllButton 是否显示全选和清空按钮，默认false
 **/
mini.FsCheckBoxList = function() {
	mini.FsCheckBoxList.superclass.constructor.call(this);
};
mini.extend(mini.FsCheckBoxList, mini.CheckBoxList, {
	uiCls : "mini-fs-checkboxlist",
	showSelectAllButton : false,
	autoLoad: true,
	getAttrs : function(A) {
		var B = mini.FsCheckBoxList.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "tableName","whereString","orderByString", "groupByString",
								  "selectFields", "relationTableName", 
								  "foreignField", "foreignDataType" ]);
		mini._ParseBool(A, B, ["isChild","showSelectAllButton"]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var showSelectAllButton = C.showSelectAllButton;
		delete C.showSelectAllButton;
		var selectFields = C.selectFields;
		delete C.selectFields; 
		var orderByString = C.orderByString;
		delete C.orderByString;
		var whereString = C.whereString;
		delete C.whereString;
		var tableName = C.tableName;
		delete C.tableName;
		mini.FsCheckBoxList.superclass.set.call(this, C);
		if (!mini.isNull(showSelectAllButton))
			this.setShowSelectAllButton(showSelectAllButton);
		if (!mini.isNull(selectFields))
			this.setSelectFields(selectFields);
		if (!mini.isNull(whereString))
			this.setWhereString(whereString);
		if (!mini.isNull(orderByString))
			this.setOrderByString(orderByString);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		return this;
	},
	_create : function() {
		mini.FsCheckBoxList.superclass._create.call(this);
		this._buttonEl = $('<div class="mini-btnLine" style="display:none"></div>').appendTo($(this.el)).get(0);
	},
	setSelectFields : function(selectFields){
		this.selectFields = selectFields;
	},
	getselectFields : function(){
		return this.selectFields;
	},
	setOrderByString : function(orderByString){
		this.orderByString = orderByString;
	},
	getOrderByString : function(){
		return this.orderByString;
	},
	setWhereString : function(whereString){
		this.whereString = whereString;
	},
	getWhereString : function(){
		return this.whereString;
	},
	setShowSelectAllButton : function(showSelectAllButton){
		var that = this;
		this.showSelectAllButton = showSelectAllButton;
		if(this.showSelectAllButton){
			$(this._buttonEl).show().empty();
			$('<button class=" fore-common-btn">全选</button>')
				.appendTo($(this._buttonEl))
				.click(function(){
					that.selectAll();
				});
			$('<button class=" fore-common-btn">清空</button>')
				.appendTo($(this._buttonEl))
				.click(function(){
					that.deselectAll();
				});
		}else{
			$(this._buttonEl).hide();
		}
	},
	isShowSelectAllButton : function(){
		return this.showSelectAllButton;
	},
	setTableName : mini.FsDataGrid.prototype.setTableName,
	loadByTableName : mini.fsFuncStore.listBox_loadByTableName,
	loadAsChild : mini.FsDataGrid.prototype.loadAsChild,
	_checkItems : function(data){
		var valueList = [];
		for(var i=0; i<data.length; i++){
			var value = data[i][this.getValueField()];
			if(value)
				valueList.push(value);
		}
		this.setValue(valueList.join(','));
	},
	getValueAsChild : function(){
		var valueList = this.getValue().split(',');
		var childList = [];
		for(var j=0;j<valueList.length;j++){
			var rowBase = {
					originalObjects:null,
					currentObjects:{},
					childValues:null
			};
			rowBase.currentObjects[this.getValueField()] = valueList[j];
			childList.push(rowBase);
		}
		return childList;
	},
	/**
	 * 清除数据：如果作为一般表格，清除所有行；如果是作为展示的载体（relationTableName有值）则清除所有勾选
	 */
	clear : function(){
		if(this.relationTableName)
			this.deselectAll();
		else
			this.load({});
	}
});
mini.regClass(mini.FsCheckBoxList, "fscheckboxlist");


/**
 * #FsRadioButtonList
 * 继承自FsCheckBoxList，与FsCheckBoxList属性相同
 **/
mini.FsRadioButtonList = function() { 
	mini.FsRadioButtonList.superclass.constructor.call(this)
};
mini.extend(mini.FsRadioButtonList, mini.FsCheckBoxList, {
	multiSelect : false,
	_itemCls : "mini-radiobuttonlist-item",
	_itemHoverCls : "mini-radiobuttonlist-item-hover",
	_itemSelectedCls : "mini-radiobuttonlist-item-selected",
	_tableCls : "mini-radiobuttonlist-table",
	_tdCls : "mini-radiobuttonlist-td",
	_checkType : "radio",
	uiCls : "mini-fs-radiobuttonlist",
	_create: function(){
		mini.FsRadioButtonList.superclass._create.call(this);
		$(this._buttonEl).remove();
	}
});
mini.regClass(mini.FsRadioButtonList, "fsradiobuttonlist");


/**
 * #FsLookup 
 * 扩展功能：1.集成默认的查询工具条
 * 新增属性：1.defaultToolbar	是否使用默认的查询工具条(默认为true)
 *		   2.searchField		默认查询工具条的条件字段(默认为textField)，如果要多字段匹配用逗号隔开
 *		   3.searchTitle		默认查询工具条的查询提示字符
 *		   4.idFieldDataType	[number|string] ID字段的数值类型，默认为number，
 *		   5.whereString        查询的data
 * 变更属性: 1.grid		必须使用FsDataGrid
 **/
mini.FsLookup = function() {
	mini.FsLookup.superclass.constructor.call(this);
};
mini.extend(mini.FsLookup, mini.Lookup, {
	uiCls : "mini-fs-lookup",
	searchTitle : "",
	defaultToolbar : true,
	addCaptionField : true,
	getAttrs : function(A) {
		var B = mini.FsLookup.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ "searchField","searchTitle","idFieldDataType","whereString"]);
		mini._ParseBool(A, B, [ "defaultToolbar", "addCaptionField" ]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var searchField = C.searchField;
		delete C.searchField;
		var searchTitle = C.searchTitle;
		delete C.searchTitle;
		var defaultToolbar = C.defaultToolbar;
		delete C.defaultToolbar;
		var whereString = C.whereString;
		delete C.whereString;
		mini.FsLookup.superclass.set.call(this, C);
		if (!mini.isNull(searchField))
			this.setSearchField(searchField);
		if (!mini.isNull(searchTitle))
			this.setSearchTitle(searchTitle);
		if (!mini.isNull(defaultToolbar))
			this.setDefaultToolbar(defaultToolbar);
		if (!mini.isNull(defaultToolbar))
			this.setDefaultToolbar(defaultToolbar);
		if (!mini.isNull(whereString))
			this.setWhereString(whereString);
		this._bulidDefaultToolbar();
		return this;
	},
	setSearchField : function(searchField){
		this.searchField = searchField;
	},
	getSearchField : function(){
		return this.searchField;
	},
	setSearchTitle : function(searchTitle){
		this.searchTitle = searchTitle;
	},
	getSearchTitle : function(){
		return this.searchTitle;
	},
	setDefaultToolbar : function(defaultToolbar){
		this.defaultToolbar = defaultToolbar;
	},
	getDefaultToolbar : function(){
		return this.defaultToolbar;
	},
	setWhereString : function(whereString){
		this.whereString = whereString;
		this.grid.setWhereString(whereString);
	},
	getWhereString : function(){
		return this.whereString;
	},
	setValue : function(value){
		mini.FsLookup.superclass.setValue.call(this, value);
		if(this.value && !this.text)
			this._genText();
	},
	/**
	 * 根据value得到显示的文本
	 */
	_genText : function(){
		var that = this;
		if(this.valueField==this.textField)
			this.setText(this.value);
		else{
			var values = this.value;
			var valList = this.value.split(',');
			if(this.idFieldDataType&&this.idFieldDataType.toLowerCase()=='string'){
				var list = [];
				for(var i=0; i<valList.length; i++){
					list.push("'" + valList[i] + "'");
				}
				values = list.join(",");
			}
			var where = this.valueField + " in (" + values + ") ";
			function onSuccess(data){
				var textList = [];
				for(var i=0; i<valList.length; i++)
					for(var k=0; k<data.length; k++)
						if(data[k][that.valueField] == valList[i]){
							textList[i] = data[k][that.textField];
							break;
						}
				that.setText(textList.join(','));
			}
			mini.fsUtil.searchTableData(this.grid.tableName,onSuccess,where);
		}
	},
	/**
	 * 建立默认的搜索工具栏
	 */
	_bulidDefaultToolbar : function(){
		if(!this.defaultToolbar) 
			return;
		this.searchField = this.searchField ? this.searchField : this.textField;
		if(!this.searchField)
			return;
		var that = this;
		var $popup = $(this._popupInner.el);
		var $toolbar = $($popup.find('.mini-panel-toolbar')[0]);
		var toobarId = this._id + '-toolbar';//使用全局唯一的this._id以确保多个FsLookup可同时使用
		var html = '<div property="toolbar" class="mini-fs-toolbar" id="'+toobarId+'" '
			+ 'style="padding:5px;text-align:center;">'
			+ '<div style="float:left;padding-bottom:2px;">'
			+ '<span>'+this.searchTitle+'</span>&nbsp;'
			+ '<input id="'+this._id+'-keytext" class="mini-textbox" style="width:160px;"/>&nbsp;'
			+ '<a id="'+this._id+'-btn-search" class="mini-button">查询</a>&nbsp;'
			+ '<a id="'+this._id+'-btn-reset" class="mini-button">重置</a>&nbsp;'
			+ '<a id="'+this._id+'-btn-clear" class="mini-button">清除</a>&nbsp;'
			+ '</div>'
			+ '<div style="float:right;padding-bottom:2px;">'
			+ '<a id="'+this._id+'-btn-close" class="mini-button">关闭</a>'
			+ '</div>'
			+ '<div style="clear:both;"></div>'
			+ '</div>';
		$toolbar.prepend(html);
		mini.parse(toobarId);
		mini.get(this._id+'-keytext').on('enter',this._doSearch,this);
		mini.get(this._id+'-btn-search').on('click',this._doSearch,this);
		mini.get(this._id+'-btn-reset').on('click',function(){
			mini.get(that._id+'-keytext').setValue('');
			this._doSearch({});
		},this);
		mini.get(this._id+'-btn-clear').on('click',function(){
			this.deselectAll();
		},this);
		mini.get(this._id+'-btn-close').on('click',function(){
			this.hidePopup();
		},this);
	},
	/**
	 * 查询的事件处理
	 */
	_doSearch : function(){
		var value = mini.get(this._id+'-keytext').value;
		var filter = {};
		var fields = this.searchField ? this.searchField.split(',') : [];
		if(fields.indexOf(this.textField)<0)
			fields.push(this.textField);
		var whereList = [];
		for(var i=0; i<fields.length; i++)
			whereList.push(fields[i] + " like '%" + value + "%'");
		var param = {
			tableName : this.grid.tableName,
			addCaptionField: this.addCaptionField,
			fillChild: "No",
			groupByString: this.groupByString ? this.groupByString : "",
			orderByString: this.orderByString ? this.orderByString : "",
			whereString: (this.whereString ? (this.whereString+' and ') : "") + 
						"("+whereList.join(" or ")+")"
		};
		this.grid.load(param);
	}
});
mini.regClass(mini.FsLookup, "fslookup");

/**
 * #FsIbox
 */
mini._iBox_obj_collect = {};
mini._iBox_id_counter = 0;
mini.FsIbox = function(options){
	mini.FsIbox.superclass.constructor.call(this);
	var defaults = {
		opacity: 0.6,
		zIndexBase: 300,
		callBack: null,
		auto: false,
		timeout: 0,
		requestType: 'ajax',
		url: null,
		target: null,
		title: "Message",
		drag: true,
		showClose:true,
		showMin:true,
		iframeWH: {
			width: 500,
			height: 300
		},
		html: '',
		offsetLeft: false,	//新建窗口的左偏移量
		offsetTop: false	//新建窗口的顶部偏移量
	};
	var that = this;
	mini._iBox_id_counter += 2;
	this.idCount = mini._iBox_id_counter;
	this.iboxId = 'iBox-' + this.idCount;
	this.TCDOS = $.extend(defaults, options);
	this.TCDOS.target = this.TCDOS.target ? this.TCDOS.target : this.TCDOS.url;
	this.$win = $(window),
	$t = $(this);
	if(this.TCDOS.showMin){
        iBoxControlMin='<i class="iBox_restore"></i><i class="iBox_min"></i>';
    }else{
    	iBoxControlMin='';
    }
	this.$win.resize(function() {
		that.setPosition();
	});
	this.showBox();
	mini._iBox_obj_collect[this.iboxId] = this;
};
mini.extend(mini.FsIbox, mini.Component, {
	showBox : function() {
		var _this = this;
		var closeHtml='';
		if(this.TCDOS.showClose){closeHtml='<i id="c-'+this.idCount+'" class="iBox_close"></i>';}
		var iBoxHtml = '<div id="'+this.iboxId+'" class="iBox" style="z-index:'+(this.TCDOS.zIndexBase+this.idCount)+'">';
		iBoxHtml += '<div class="iBox_popup">';
		iBoxHtml += '<table><tr><td>';
		iBoxHtml += '<div class="iBox_body">';
		iBoxHtml += '<div class="iBox_title"><span>' + _this.TCDOS.title + '</span>'+'<div class="control">'+iBoxControlMin+closeHtml+'</div>'+'</div>';
		iBoxHtml += '<div class="iBox_content"></div>';
		iBoxHtml += '</div>';
		iBoxHtml += '<td></tr></table>';	
		iBoxHtml += '</div>';
		//iframe用于处理三维图像覆盖问题
		iBoxHtml += '<iframe class="iBox_iframe" style="position:absolute; z-index:-1; top:0; left:0;" scrolling="no" frameborder="0"></iframe>';
		iBoxHtml += '</div>';
		this.$background = $("<div class='iBox_hide iBox_overlay'></div>")
				.hide()
				.addClass('iBox_overlay_bg')
				.css('opacity', _this.TCDOS.opacity)
				.css('z-index', _this.TCDOS.zIndexBase+this.idCount-1)
				.dblclick(function() {
					_this.close();
				})
				.appendTo('body')
				.fadeIn(300);
		this.$container = $(iBoxHtml).appendTo('body');
		this.$content = this.$container.find(".iBox_content");
		this._titleEl = this.$container.find('.iBox_title span')[0];
		this.$ifr=this.$container.find(".iBox_iframe");//用于处理三维图像覆盖问题
		this.$ifr.contents().find("body").css("background-color","transparency");
		this._init();
		this._bindEvent();
	},
	_init : function() {
		var _this = this;
		var con = this.$content;
		if (_this.TCDOS.requestType && $.inArray(_this.TCDOS.requestType, ['iframe', 'ajax', 'img']) != -1) {
			con.html("<div class='iBox_load'><div class='iBox_loading'></div></div>");
			if (_this.TCDOS.requestType === "img") {
				var imgFrame = $('<div/>',{'class':'img-frame'}).css('position','relative');
				this.$imgFrame = imgFrame;
				var loadFinish = false;
				var img = $("<img />").appendTo(imgFrame)
					.attr("src", _this.TCDOS.target)
					.load(function() {
						imgFrame.appendTo(con.empty());
						_this.setPosition();
						_this.TCDOS.onload.call(_this);
						loadFinish = true;
						_this.fire('load');
					})
					.error(function(e){
						console.error('ibox载入图像失败，target: '+_this.TCDOS.target);
						if(mini_debugger) 
							alert('ibox载入图像失败，target: '+_this.TCDOS.target);
						if(_this.TCDOS.onerror){
							_this.TCDOS.onerror.call(_this,e);
						}
					});
				//只对IE兼容模式再次载入图片不触发load事件
				window.setTimeout(function(){
					if(!loadFinish){
						imgFrame.appendTo(con.empty());
						_this.setPosition();
						_this.TCDOS.onload.call(_this);
						loadFinish = true;
						_this.fire('load');
					}
				},600);
			} else {
				var url = _this.TCDOS.url ? _this.TCDOS.url : _this.TCDOS.target;
				if (_this.TCDOS.requestType === "ajax") {
					$.get(url, function(data) {
						con.html(data);
						_this.$container.find('.iBox_close').click(function(){_this.close});
						
						if(mini)
							mini.parse(this.iboxId);
						if(_this.TCDOS.onload){
							_this.TCDOS.onload.call(_this);
						}
						_this.setPosition();
						_this.fire('load');
					}, 'text')
				} else if(_this.TCDOS.requestType === "iframe"){
					ifr = $("<iframe name='iBoxIframe' style='width:" 
						+ _this.TCDOS.iframeWH.width + "px;height:" + _this.TCDOS.iframeWH.height 
						+ "px;' scrolling='auto' frameborder='0' src='" + url + "'></iframe>");
					ifr.appendTo(con.empty());
					ifr.load(function() {
						try {
							$it = $(this).contents();
							$it.find('.iBox_close').click(function(){_this.close});
							fH = $it.height();
							fW = $it.width();
							w = _this.$win;
							newW = Math.min(w.width() - 180, fW);
							newH = Math.min((w.height() - 100), fH);
							if (!newH) return;
							var lt = sizePosition(newW);
							_this.$container.css({
								left: lt[0],
								top: lt[1]
							});
							$(this).css({
								height: newH,
								width: newW
							});
							if(_this.TCDOS.onload){
								_this.TCDOS.onload.call(_this);
							}
							_this.fire('load');
						} catch(e) {}
					});
 					ifr.error(function(e){
 						console.error('ibox载入ifram目标出错，url: '+url);
						if(mini_debugger) alert('ibox载入ifram目标出错，url: '+url);
 						if(_this.TCDOS.onerror){
							_this.TCDOS.onerror.call(_this,e);
						}
 					});
				}
			}
		} else {
			if (_this.TCDOS.target) {
				$(_this.TCDOS.target).clone(true).show().appendTo(con.empty());
			} else {
				if (_this.TCDOS.html) {
					con.html(_this.TCDOS.html);
				} else {
					$t.clone(true).show().appendTo(con.empty());
				}
				if(mini)
					mini.parse(this.iboxId);
				if(_this.TCDOS.onload){
					_this.TCDOS.onload.call(_this);
				}
				_this.fire('load');
			}
		}
	},
	_bindEvent : function() {
		var _this = this;
		this.setPosition();
		this.$container.find('i')
		.mousedown(function(){
            _this.$container.css('opacity', 0.8);
            return false;
        }).mouseup(function(){
            _this.$container.css('opacity', 1);
        }).mouseout(function(){
            _this.$container.css('opacity', 1);
        });
		this.$container
			.show()
			.find('.iBox_close')
			.click(function(){
				_this.close();
			}).end()
			.find('.iBox_restore')
			.click(function(){
				_this.restore();
			}).end()
			.find('.iBox_min')
			.click(function(){
				_this.minimize();
			});
		$(document).unbind('keydown.iBox').bind('keydown.iBox',function(e) {
			if (e.keyCode === 27) {
				_this.close();
			}
			return true
		});
		typeof _this.TCDOS.callBack === 'function' ? _this.TCDOS.callBack() : null;
		_this.TCDOS.drag ? this.drag() : null;
		if (_this.TCDOS.timeout) {
			setTimeout(function(){_this.close;}, _this.TCDOS.timeout);
		}
	},
	//位置属性设置
	setPosition : function() {
		var _this = this;
		if (!this.$container) return false;
		var width = this.$container.width();
		var parent = this._getParentBox();
		if(parent && (_this.TCDOS.offsetTop || _this.TCDOS.offsetLeft)){
			var lt = [parent.left+_this.TCDOS.offsetLeft, parent.top+_this.TCDOS.offsetTop];
		}else{
			var lt = this.sizePosition(width);
		}
		this.$container.css({
			left: lt[0],
			top: lt[1]
		});
		//2014-3-7 11:09:14-by zhangwei
		this.$ifr.css({
			width:width,
			height:this.$container.height()
		});

		this.left = lt[0];
		this.top = lt[1];
	},
	_getParentBox : function(){
		var end = null;
		for(var id in mini._iBox_obj_collect)
			if(id != this.iboxId)
				end = mini._iBox_obj_collect[id];
		return end;
	},
	//计算位置
	sizePosition : function(w) {
		var l = (this.$win.width() - w) / 2;
		var t = this.$win.scrollTop() + this.$win.height() / 9;
		if(l<0) l=0;
        if(t<0) t=0;
		return [l, t];
	},
	//还原--
    restore:function(){
    	var _this=this;
       	this.$background.show();
        this.$content.stop().slideDown(function(){
            _this.$container.find('.iBox_restore').hide();
            _this.$container.find('.iBox_min').show();
            CWidth = _this.$container.width();
            CHeight = _this.$container.height();
            _this.$ifr.css({'width':CWidth, 'height':CHeight});
        });
    },
    //最小化--
    minimize:function(){
    	var _this=this;
        this.$content.stop().slideUp(function(){
            _this.$container.find('.iBox_min').hide();
            _this.$container.find('.iBox_restore').show();
            _this.$background.hide();
            CWidth = _this.$container.width();
            CHeight = _this.$container.height();
            _this.$ifr.css({'width':CWidth, 'height':CHeight});
        });
    },
	//拖拽
	drag : function() {
		var _this = this;
		var dx, dy;
		var T = this.$container.find('.iBox_title').css('cursor', 'move');
		T.bind("selectstart", function() {
			return false;
		});
		T.mousedown(function(e) {
			//由于此函数阻止了事件冒泡，会导致miniui弹出层不隐藏。这里先处理这个问题。
			var fields = new mini.Form(_this.iboxId).getFields();
			for(var i=0; i<fields.length; i++){
				if(fields[i].popup && fields[i].popup.hide)
					fields[i].popup.hide();
			}

			dx = e.clientX - parseInt(_this.$container.css("left"));
			dy = e.clientY - parseInt(_this.$container.css("top"));
			$(document).mousemove(move).mouseup(up);
			T.css('opacity', 0.8);
			return false;
		});
		//移动
		function move(e) {
			if (e.clientX - dx < 0) {
				l = 0;
			} else if (e.clientX - dx > _this.$win.width() - _this.$container.width()) {
				l = _this.$win.width() - _this.$container.width();
			} else {
				l = e.clientX - dx;
			}
			if (e.clientY - dy < 0) {
				t = 0;
			}else {
				t = e.clientY - dy;
			}
			_this.$container.css({
				left: l,
				top:t
			});
		}
		function up(e) {
			$(document).unbind("mousemove", move).unbind("mouseup", up);
			T.css('opacity', 1);
		}
	},
	//关闭
	close : function() {
		var _this = this;
		if(_this.TCDOS.ondestroy){
			var r = _this.TCDOS.ondestroy.call(_this);
			if(r===false)
				return;
			else
				this.destroy();
		}else{
			this.destroy();
		}
		
	},
	destroy : function(){
		var _this = this;
		if (this.$container) {
			this.$background.remove();
			this.$container.stop().fadeOut(300,
			function() {
				try{
					var fields = new mini.Form(_this.iboxId).getFields();
					for(var i=0; i<fields.length; i++){
						try{
							fields[i].destroy();
						}catch(e){
							console.warn('销毁控件'+fields[i].uiCls+'时出现问题')
						}
					}
					//console.log('关闭iBox的时候共销毁'+i+'个miniUI控件');
					fields = null;
				}catch(e){
					console.warn('关闭iBox清理控件时有些问题:');
					console.warn(e);
				}finally{
					_this.$container.remove();
					delete mini._iBox_obj_collect[_this.iboxId];
					if(_this.TCDOS.afterdestroy)
						_this.TCDOS.afterdestroy.call(_this);
				}
			})
		}
	},
	hide : function(){
		if(this.$container){
			this.$container.hide();
			this.$background.hide();
		}
	},
	show : function(){
		if(this.$container){
			this.$container.show();
			this.$background.show();
		}
	},
	//获取窗口内容的元素
	getEl : function(){
		return this.$container.find('.iBox_content').get(0);
	},
	//设置标题
	setTitle : function(title){
		this._titleEl.innerHTML = title;
	},
	getTitle : function(){
		return  this._titleEl.innerHTML;
	}
});
mini.openIbox = function(opt){
	var ibox = new mini.FsIbox(opt);
	return ibox
};
/**
 * 打开一个带Form的Ibox模拟窗口
 * 参数可以是一个不许的url和data, tableName, idField, title, isFlow依次传入，
 * 也可以是url,title和form需要参数的对象args，两种传参方式人选其一。
 * @param url 弹出form页面的地址
 * @param args 即第二个参数，form需要的对象
 * @return FsIbox对象，对象的form属性为打开窗口中的FsForm对象
 */
mini.openFormBox = function(url, data, tableName, idField, title, isFlow, afterdestroy){
	return new mini.FsIbox({
		url: url,
		title: title ? title : (typeof data === 'string' ? data : ''),
		onload:function(){
			var box = this;
			var args = {formId : box.iboxId};
			if(typeof data === 'object'){	//(url, data, tableName, idField, title, isFlow)
				if(data)
					args.data = data;
				if(tableName)
					args.tableName = tableName;
				if(idField)
					args.idField = idField;
				if(isFlow)
					args.isFlow = isFlow;
			}else if(typeof tableName === 'object'){	//(url,title,formArgs)
				mini.copyTo(args,tableName);
			}
			form = new mini.FsForm(args);
			box.form = form;
			$(form.el).find('.mini-fs-close-button').click(function(){
				if(form.isChanged())
					mini.confirm(
						"有内容已经更改，确定要关闭吗？", 
						"确认操作", 
						function (action){
						if(action=='ok')
							box.destroy();
						}
					);
				else
					box.destroy();
			});
			form.on('savesuccess',function(e){
				box.destroy();
			});
		},
		ondestroy:function(action){
			var box = this;
			if(form && form.isChanged()){
				mini.confirm(
					"有内容已经更改，确定要关闭吗？", 
					"确认操作", 
					function (action){
					if(action=='ok')
						box.destroy();
					}
				);
				return false;
			}
		},
		afterdestroy: afterdestroy
   });
};

/**
 * #FsItab
 */
mini.FsItab = function() {
	mini.FsItab.superclass.constructor.call(this)
};
mini.extend(mini.FsItab, mini.Control,{
	uiCls : "mini-fs-itab",
	_create : function() {
		this.el = document.createElement("div");
		this.el.className = "mini-fs-itab";
		var html = '<div class="fore-core-itab-title">' +
				   	'<ul class="idTabs"></ul>' +
				   	'<div class="clear"></div>' +
				   '</div>' +
				   '<div class="fore-core-itab-content"></div>';
		this.el.innerHTML = html;
		this._titleEl = this.el.firstChild;
		this._titleListEl = this.el.firstChild.firstChild;
		this._contentEl = this.el.lastChild;
	},
	_afterApply : function(source){
		var $titles = $(source).find('div[title]');
		var listHtml = '';
		var contentHtml = '';
		for(var i=0, l=$titles.length; i<l; i++){
			var $e = $($titles[i]);
			var id = 'mini-itab-page'+i;
			listHtml +=  '<li><a href="#'+id+'">'+$e.attr('title')+'</a></li>';
			$e.attr('id',id);
			contentHtml += $e[0].outerHTML;
		}
		this._titleListEl.innerHTML = listHtml;
		this._contentEl.innerHTML = contentHtml;
		$(this._titleListEl).idTabs();
	},
	_doClearElement : function() {
		mini.removeClass(this._td1El, "mini-tabs-header");
		mini.removeClass(this._td3El, "mini-tabs-header");
		this._td1El.innerHTML = "";
		this._td3El.innerHTML = "";
		mini.removeChilds(this._td2El, this._bodyEl)
	},
	_initEvents : function() {
		mini._BindEvents(function() {
			mini.on(this.el, "mousedown", this.__OnMouseDown,
					this);
			mini.on(this.el, "click", this.__OnClick, this);
			mini.on(this.el, "mouseover", this.__OnMouseOver,
					this);
			mini.on(this.el, "mouseout", this.__OnMouseOut,
					this)
		}, this)
	},
	createTab : function(B) {
		var A = mini.copyTo( {
			_id : this._TabID++,
			name : "",
			title : "",
			newLine : false,
			iconCls : "",
			iconStyle : "",
			headerCls : "",
			headerStyle : "",
			bodyCls : "",
			bodyStyle : "",
			visible : true,
			enabled : true,
			showCloseButton : false,
			active : false,
			url : "",
			loaded : false,
			refreshOnClick : false
		}, B);
		if (B) {
			B = mini.copyTo(B, A);
			A = B
		}
		return A
	},
	
	doLayout : function() {
		
		this.fire("layout")
	}
});
mini.regClass(mini.FsItab, "fsitab");
/**
 * #FsFile
 * 文件上传控件
 */
mini.FsFile = function() {
	this.fileList = {};
	mini.FsFile.superclass.constructor.call(this);
};
mini.extend(mini.FsFile, mini.ValidatorBase,{
	uiCls : "mini-fs-file",
	name : "",
	formField : true,
	uploadUrl : mini.urls.fileUploadUrl,
	downloadUrl : mini.urls.fileDownloadUrl,
	delUrl : mini.urls.fileDelUrl,
	chunk : false,
	title : '文件上传',
	buttonLable : '上传',
	extensions : "zip,doc,docx,xls,xlsx,ppt,pptx,txt,png,gif,jpg",
	maxSize : 200,
	popWidth : 500,
	repositoryTable : 'fs_document',
	repositoryIdField : 'DOCUMENTID',
	showUploadButton : true,
	defaultValue : '',
	category : '',
	fileNameMaxLength : 10,
	inline : false,
	getAttrs : function(A) {
		var C = mini.FsFile.superclass.getAttrs.call(this, A), B = jQuery(A);
		mini._ParseString(A, C, [ "title", "buttonLable", "extensions", 
							"uploadUrl", "repositoryTable","repositoryIdField",
							"ondownload", "category" ]);
		mini._ParseBool(A, C, [ "chunk", "showUploadButton", "inline" ]);
		mini._ParseInt(A, C, [ "maxSize", "popWidth", "fileNameMaxLength" ]);
		return C
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var buttonLable = C.buttonLable;
		delete C.buttonLable;
		var showUploadButton = C.showUploadButton;
		delete C.showUploadButton;
		var inline = C.inline;
		delete C.inline;
		mini.FsFile.superclass.set.call(this, C);
		if (!mini.isNull(buttonLable))
			this.setButtonLable(buttonLable);
		if (!mini.isNull(showUploadButton))
			this.setShowUploadButton(showUploadButton);
		if (!mini.isNull(inline))
			this.setInline(inline);
		return this;
	},
	setShowUploadButton : function(showUploadButton){
		this.showUploadButton = showUploadButton;
		if(!showUploadButton){
			this._btnEl.style.display="none";
		}
	},
	setInline : function(inline){
		this.inline = inline;
		if(this.inline){
			this.setShowUploadButton(false);
			$(this._listEl).css({margin:0, padding:0})
		}
	},
	setButtonLable : function(buttonLable){
		this.buttonLable = buttonLable;
		this._btnEl.value = this.buttonLable;
	},
	_create : function() {
		var isShowBtn = (this.showUploadButton || this.inline) ? '' : 'style="display:none"';
		ulStyle = this.inLine ? 'style="margin:0px;padding:0px;"' : '';
		var html = '<div class="fore-core-file-list"><ul '+ulStyle+'></ul></div>'
				 + '<div class="fore-core-file-btn">'
				 + '<input type="hidden"/>'
				 + '<button '+isShowBtn
				 + ' class="fore-core-file-up-btn">'+this.buttonLable+'</button>'
				 + '</div>';
		this.el = document.createElement("div");
		this.el.className = "mini-fs-file fore-core-file-upload";
		this.el.innerHTML = html;
		this._listEl = this.el.firstChild.firstChild;
		this._btnEl = this.el.lastChild.lastChild;
		this._valueEl = this.el.lastChild.firstChild;
	},
	_initEvents : function() {
		var that = this;
		mini._BindEvents(function() {
			mini_onOne(this._btnEl, "click", this.__OnUpBtnClick,
					this);
		}, this);
		this.on("validation", this.__OnValidation, this);
		$(this._listEl).on("mouseenter","li",function(){
			$(this).find("i a").css({"display":"inline-block"});
		}).on("mouseleave","li",function(){
			$(this).find("i a").css({"display":"none"});
		}).on('click', 'li i a', function(){
			that.__onDelFile(this);
		});
		this._btnEl.value = this.buttonLable;
	},
	__OnUpBtnClick : function(){
		var that = this;
		this.uploaderId = this._id+'-uploader';
		mini.openIbox({
			requestType : null,
			html : '<div id="'+that.uploaderId+'" style="width:'+that.popWidth+'px;height:258px;">&nbsp;</div>',
			title : that.title,
			onload : function(){
				var box = this;
				var errors = [];
				var type = 'file';
				var chunk = that.chunk;
				var docId='';
				var max_file_size = that.maxSize + 'mb';
				var filters = {title : "文档", extensions : that.extensions};
				var plupobj = $("#"+that.uploaderId).pluploadQueue($.extend({
					runtimes : 'html5,flash',
					url : that.uploadUrl + "?category="+ that.category,
					max_file_size : max_file_size,
					file_data_name:'file',
					unique_names:true,
					filters : [filters],
					flash_swf_url : bootPATH+'/plupload/plupload.flash.swf',
					silverlight_xap_url : bootPATH+'/plupload/plupload.silverlight.xap',
					init:{
						FileUploaded:function(uploader,file,response){
							if(response.response){
								var rs = JSON.parse(response.response);
								if(rs.status){
									that._addFileListItem(rs.data);
								}else{
									errors.push(file.name);
								}
							}
						},
						UploadComplete:function(uploader,fs){
							uploader.refresh();
							uploader.destroy();//ie9以下若不销毁此对象第二次上传会十分缓慢
						}
					}
				},(chunk ? {chunk_size:'1mb'} : {})));
			}
		});
	},
	__onDelFile : function(target){
		var that = this;
		mini.confirm("确定要删除这个文件吗？", "确认操作", function (action){
			if(action=='ok'){
				var $fileLi = $(target).closest('li').hide();
				var docId = $(target).attr('docId')
				$.ajax({
					url: that.delUrl + "?documentId=" + docId,
					type: "post",
					success: function (text) {
						$fileLi.remove();
						delete that.fileList[docId];
						that._rebuildValue();
					},
					error: function () {
						$fileLi.show();
						mini.alert('删除失败');
					}
				});
			}
		});
	},
	_rebuildValue : function(){
		var value = [];
		for(var id in this.fileList)
			value.push(id);
		value = value.join(',');
		this._valueEl.value = value;
	},
	setValue : function(value){
		if(!value){
			this.fileList = {};
			this._listEl.innerHTML = '';
			this._valueEl.value = '';
			return;
		}
		this._getFiles(value);
		this._valueEl.value = value;
	},
	getValue : function(){
		return this._valueEl.value;
	},
	/**
	 * 根据文件的id从服务器获取文件详细信息
	 * @param ids 文件id的字符串，用逗号分隔
	 */
	_getFiles : function(ids){
		if(!ids)
			return;
		if(!this.repositoryTable || !this.repositoryIdField)
			return;
		var that = this;
		var where = this.repositoryIdField + " in ("+ids+")";
		function onSuccess(data){
			that._cleanFileList();
			for(var i=0; i<data.length; i++){
				that._addFileListItem(data[i]);
			}
		}
		mini.fsUtil.searchTableData(this.repositoryTable,onSuccess,where)
	},
	//建立文件列表项目
	_addFileListItem : function(fileInfo){
		var that = this;
		fileInfo.id = fileInfo.DOCUMENTID;
		fileInfo.name = fileInfo.DOCUMENTNAME;
		fileInfo.showName = this.fileNameMaxLength>0 &&
					fileInfo.name.length>this.fileNameMaxLength ?
				fileInfo.name.substr(0, this.fileNameMaxLength) + '...' : 
				fileInfo.name;
		fileInfo.url = this.downloadUrl ? 
			(this.downloadUrl + '?filePath=' + fileInfo.DOCUMENTPATH +'&fileName=' + mini.fsUtil.encode(fileInfo.DOCUMENTNAME)) :
			'javascript:void(0)';
		var xel = this.inline ? '' : '<i><a docId="'+fileInfo.id+'"></a></i>';
		var xstyle = this.inline ? ' style="line-height: inherit;"' : '';
		var $fileLi = $('<li'+xstyle+'><a href="'+fileInfo.url+'" title="'+fileInfo.name+'">'+fileInfo.showName+
			'</a>'+xel+'</li>').appendTo($(this._listEl));
		$fileLi.find('a[href]').on('click',function(e){
			if($(this).attr('href')){
				that.fire('download',{fileInfo:fileInfo});
			}
		});
		this.fileList[fileInfo.id] = fileInfo;
		this._rebuildValue();
	},
	_cleanFileList : function(){
		$(this._listEl).empty();
	},
	__OnValidation : function(e){
			if(this.required && mini.fsUtil.isEmpty(this.fileList)){
				e.isValid = false;
			}
	},
	_errorIconEl : null,
	getErrorIconEl : function() {
		if (!this._errorIconEl)
			this._errorIconEl = mini.append(this.el,
					'<span class="mini-errorIcon"></span>');
		return this._errorIconEl
	},
	_RemoveErrorIcon : function() {
		if (this._errorIconEl) {
			var A = this._errorIconEl;
			jQuery(A).remove()
		}
		this._errorIconEl = null
	},
	disable : function(){
		this._btnEl.style.display="none";
		$(this._listEl).off();
	}
});
mini.regClass(mini.FsFile, "fsfile");

//打开图片浏览窗口
mini.openImgBox = function(args){
	var options = {
		initIndex: 0,
		whereString: null,
		orderByString: null,
		repositoryTable: 'fs_document',
		repositoryIdField: 'DOCUMENTID',
		delUrl : mini.urls.ImgDelUrl,
		filePath : mini.urls.imgFileRoot,
		readonly: true,
		title: '查看图片',
		pageSize: 0,			//分页载入图片的分页长度（0为不分页）
		showFileName: false,	//是否显示文件名
		showExtension: false	//是否显示文件名的扩展名
	};
	mini.copyTo(options, args);
	var fileList = args.fileList || [];
	if(options.pageSize > 0){
		var pageInfo = {
			pageSize: options.pageSize,
			pageIndex: 0
		};
	}
	if(!options.whereString && options.ids){
		options.whereString = options.repositoryIdField + " in ("+options.ids.join(',')+")";
	}
	var html = [
		'<div class="fore-viewer-container">',
		'	<div class="fore-viewer-left-bar"></div>',
		'	<div class="fore-viewer-center">',
		'	</div>',
		'	<div class="fore-viewer-right-bar"></div>',
		'</div>',
		'<div style="clear:both;"></div>',
		'<div class="fore-viewer-thumb"></div>'
	];
	mini.openIbox({
		requestType: 'html',
		html: html.join('\n'),
		title: options.title,
		onload: function(){
			var box = this,
				boxForm = new mini.Form(box.iboxId),
				$center = box.$container.find('.fore-viewer-center'),
				$thumb = box.$container.find('.fore-viewer-thumb');
				currentIndex = +options.initIndex;
			if(args.fileList){
				loadImgList();
			}else{
				_getFiles();
			}
			bindEvents();
			
			function _getFiles(){
				boxForm.loading('正在载入图片列表...');
				if(!pageInfo)
					mini.fsUtil.searchTableData(options.repositoryTable,_onLoadSuccess,options.whereString);
				else{
					var args = {
						tableName: options.repositoryTable,
						whereString: options.whereString,
						orderByString: options.orderByString,
						onSuccess: _onLoadSuccess,
						pageSize: pageInfo.pageSize,
						pageIndex: pageInfo.pageIndex+1
					}
					mini.fsUtil.searchPageData(args);
				}
			}

			function _onLoadSuccess(data, pi){
				var initIndex = fileList.length;
				for(var i=0; i<data.length;i++)
					_pushFileList(data[i], i);
				loadImgList();
				if(pi && pageInfo)
					pageInfo = pi;
				boxForm.unmask();
				function _pushFileList(data, i){
					var size = data.S_DESC.split('*');
					data.width = size[0];
					data.height = size[1];
					data.original = options.filePath+'/original/'+data.S_PATH;
					data.thumb = options.filePath+'/thumb/'+data.S_PATH;
					data.index = initIndex+i;
					fileList.push(data);
				}
			}

			function loadImgList(){
				var html = '';
				for(var i=0; i<fileList.length; i++){
					var src = fileList[i].thumb;
					html += '<img index="'+fileList[i].index+'" src="'+src+'"/> ';
				}
				$thumb.html(html);
				selectImg(currentIndex);
			}
			function bindEvents(){
				$thumb.click(function(event){
					var index = $(event.target).attr('index');
					selectImg(index);
				})
				.on('mousewheel', onMouseWheel)	//chrome, IE
				.on('wheel', onMouseWheel);		//firefox
				box.$container.find('.fore-viewer-left-bar').click(function(){
					newIndex = currentIndex==0 ? fileList.length-1 : currentIndex-1;
					selectImg(newIndex);
				});
				box.$container.find('.fore-viewer-right-bar').click(function(){
					newIndex = currentIndex>=fileList.length-1 ? 0 : currentIndex+1;
					selectImg(newIndex);
				});
				$center.click(function(event){
					if($(event.target).hasClass('fore-viewer-del-btn')){
						if(!options.readonly) delFile();
					}else{
						var src = $(event.target).attr('src')
						if(src) window.open(src);
					}
				})
				if(!options.readonly){
					$center.mouseenter(function(){
						$center.find('.fore-viewer-del-btn').fadeIn('fast');
					}).mouseleave(function(){
						$center.find('.fore-viewer-del-btn').fadeOut('fast');
					});
				}
			};
			function selectImg(index){
				if(!index && index!==0) return;
				if(!hasImg()) return;
				if(index>fileList.length-1)
					index = fileList.length-1;
				currentIndex = +index;
				var src = fileList[index].original;
				var w = fileList[index].width, h = fileList[index].height;
				if(w/h > 5/4){
					h = 500/w*h;
					w = 500;
				}else{
					w = 400/h*w;
					h = 400;
				}
				$('<img>').attr('src',src).attr('title','点击查看原图')
				.attr('index',index).attr('width',w).attr('height',h)
				.appendTo($center.empty()).load(function(){
					var w = this.offsetWidth, h = this.offsetHeight;
					if(w>500 || h>400)
						if(w/h > 5/4){
							h = 500/w*h;
							$(this).attr('width', 500).attr('height', h);
						}else{
							w = 400/h*w;
							$(this).attr('height', 400).attr('width', w);
						}
				});
				$center.append($('<div>',{'class':'fore-viewer-del-btn','title':'删除这张图片'}))
				if(options.showFileName){
					var fileName = fileList[index].DOCUMENTNAME || '';
					if(!options.showExtension)
						fileName = fileName.replace(/\.\w{3,4}$/, '');
					$center.append($(
						'<div class="fore-viewer-filename">'+fileName+'</div>'))
				}
				var selectedThumb = $thumb.children().css('border','none 0px').get(index);
				selectedThumb.style.border = 'solid 2px red';
				if(selectedThumb.offsetLeft > $thumb[0].scrollLeft+600){
					$thumb[0].scrollLeft = selectedThumb.offsetLeft-20;
				}else if(selectedThumb.offsetLeft < $thumb[0].scrollLeft){
					$thumb[0].scrollLeft = selectedThumb.offsetLeft-20;
				}
				if(pageInfo && index>=fileList.length-1 && !(pageInfo.pageIndex>=pageInfo.pageCount)){
					_getFiles();
				}
			}
			function hasImg(){
				if(fileList.length==0){ 
					$('<span>').css('color','#888').html('没有图片')
					.appendTo($center.empty());
					return false;
				}else
					return true;
			}
			function delFile(){
				mini.confirm("确实要删除这张图片吗？","确认操作",function(reply){
					if(reply == 'ok'){
						var data = fileList[currentIndex]
						$.ajax({
							url: options.delUrl,
							type: 'POST',
							data: data,
							success: function(){
								fileList.splice(currentIndex,1);
								loadImgList();
							},
							error: function(){
								mini.alert('删除图片失败');
							}
						});
					}
				});
			}
			function onMouseWheel(event){
				var delta = event.originalEvent.deltaY 	//chrome,firefox
					|| -event.originalEvent.wheelDelta;	//IE
				if(delta>0){
					this.scrollLeft += 50;
				}else if(delta<0){
					this.scrollLeft -= 50;
				}
				return false;
			}
		}
	});
},

/**
 * #FsImgFile
 * 图片上传/浏览控件
 */
mini.FsImgFile = function() {
	this.fileList = [];
	mini.FsImgFile.superclass.constructor.call(this);
};
mini.extend(mini.FsImgFile, mini.ValidatorBase,{
	uiCls : "mini-fs-imgfile",
	name : "",
	formField : true,
	uploadUrl : mini.urls.ImgUploadUrl,
	delUrl : mini.urls.ImgDelUrl,
	filePath : mini.urls.imgFileRoot,
	title : '图片上传',
	buttonLable : '上传',
	extensions : "png,gif,jpg,jpeg",
	maxSize : 5,
	maxFiles : 0,	//最大上传图片数，<=0为不限数量
	popWidth : 500,
	repositoryTable : 'fs_document',
	repositoryIdField : 'DOCUMENTID',
	readonly : false,
	maxThumb : 4,	//控件上显示预览图的最大数量
	buttonPosition : "top",
	thumbHeight : 60, //缩略图高度
	enabled : true,
	getAttrs : function(A) {
		var C = mini.FsImgFile.superclass.getAttrs.call(this, A), B = jQuery(A);
		mini._ParseString(A, C, [ "title", "buttonLable", "extensions", 
							"uploadUrl", "repositoryTable","repositoryIdField", "buttonPosition" ]);
		mini._ParseBool(A, C, [ 
			"readonly", 	//只读，即没有上传按钮、不能删除。ie8读取此属性有问题
			"onlyread" 	//功能同readonly，专门针对ie的bug。请使用此属性代替readonly
		]);
		mini._ParseInt(A, C, [ "maxSize", "popWidth", "maxThumb", "maxFiles", "thumbHeight" ]);
		return C
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var buttonLable = C.buttonLable;
		delete C.buttonLable;
		var onlyread = C.onlyread;
		delete C.onlyread;
		var readonly = C.readonly;
		delete C.readonly;
		mini.FsImgFile.superclass.set.call(this, C);
		if (!mini.isNull(buttonLable))
			this.setButtonLable(buttonLable);
		if (!mini.isNull(onlyread)){
			this.setReadonly(onlyread);
		}else if (!mini.isNull(readonly)){
			this.setReadonly(readonly);
		}
		return this;
	},
	setEnabled : function(enable){
		this.setReadonly(!enable);
	},
	setReadonly : function(readonly){
		this.readonly = readonly;
		if(readonly){
			this._upBtnEl.style.display="none";
		}
	},
	setButtonLable : function(buttonLable){
		this.buttonLable = buttonLable;
		this._upBtnEl.value = this.buttonLable;
	},
	_create : function() {
		var html = '<div class="fore-core-file-btn">'
				 + '<button class="fore-core-file-up-btn">'+this.buttonLable+'</button>'
				 + '<button class="fore-core-file-up-btn" style="display:none"/>查看全部</button>'
				 + '</div>'
				 + '<input type="hidden"/>'
				 + '<div style="clear:both;"></div>'
				 + '<div class="mini-fs-imgfile-preview-list" style="padding:5px;"></div>';
		this.el = document.createElement("div");
		this.el.className = "mini-fs-imgfile";
		this.el.innerHTML = html;
		this._listEl = this.el.lastChild;
		this._valueEl = this.el.firstChild.nextSibling;
		this._btnEl = this.el.firstChild;
		this._upBtnEl = this.el.firstChild.firstChild;
		this._viewBtnEl = this.el.firstChild.lastChild;
	},
	_afterApply : function(){
		if(this.buttonPosition == 'bottom'){
			$(this._btnEl).remove().appendTo($(this.el));
		}
	},
	_initEvents : function() {
		var that = this;
		mini._BindEvents(function() {
			mini.on(this._viewBtnEl, "click", this._openViewer, this);
			mini_onOne(this._upBtnEl, "click", this.__OnUpBtnClick, this);
		}, this)
		$(this._listEl).click(function(event){
			var index = $(event.target).attr('index');
			if(index || index===0){
				that._openViewer(index);
			}
		});
	},
	__OnUpBtnClick : function(){
		var that = this;
		this.uploaderId = this._id+'-uploader';
		mini.openIbox({
			requestType : null,
			html : '<div id="'+that.uploaderId+'" style="width:'+that.popWidth+'px;height:258px;">&nbsp;</div>',
			title : that.title,
			onload : function(){
				var box = this;
				var errors = [];
				var type = 'file';
				var docId='';
				var max_file_size = that.maxSize + 'mb';
				var filters = {title : "图片", extensions : that.extensions};
				var plupobj = $("#"+that.uploaderId).pluploadQueue($.extend({
					runtimes : 'html5,flash',
					url : that.uploadUrl,
					max_file_size : max_file_size,
					file_data_name:'file',
					unique_names:true,
					filters : [filters],
					flash_swf_url : bootPATH+'/plupload/plupload.flash.swf',
					silverlight_xap_url : bootPATH+'/plupload/plupload.silverlight.xap',
					init:{
						FileUploaded:function(uploader,file,response){
							if(response.response){
								var rs = $.parseJSON(response.response);
								if(rs.status){
									that._pushFileList(rs.data);
									that._rebuildValue();
								}else{
									errors.push(file.name);
								}
							}
						},
						UploadComplete:function(uploader,fs){
							uploader.refresh();
							uploader.destroy();//ie9以下若不销毁此对象第二次上传会十分缓慢
						},
						FilesAdded: function(uploader, files){
							if(that.maxFiles>0){
								remainder = that.maxFiles - that.fileList.length - uploader.files.length;
								if(remainder<0){
									var l = files.length
									for(var i=0; i<-remainder; i++){
										uploader.removeFile(files[l-1-i]);
									}
									mini.alert("最多值允许上传"+that.maxFiles+"个文件",2500);
								}
							}
						}
					}
				}));
			}
		});
	},
	//打开图片浏览器
	_openViewer : function(initIndex){
		var that = this;
		var html = [
			'<div class="fore-viewer-container">',
			'	<div class="fore-viewer-left-bar"></div>',
			'	<div class="fore-viewer-center">',
			'		<div class="fore-viewer-del-btn"></div>',
			'	</div>',
			'	<div class="fore-viewer-right-bar"></div>',
			'</div>',
			'<div style="clear:both;"></div>',
			'<div class="fore-viewer-thumb"></div>'
		];
		mini.openIbox({
			requestType: 'html',
			html: html.join('\n'),
			title: '查看图片',
			onload: function(){
				var box = this,
					$center = box.$container.find('.fore-viewer-center'),
					$thumb = box.$container.find('.fore-viewer-thumb');
				if(!hasImg()) return;
				currentIndex = +initIndex || 0;
				loadImgList();
				bindEvents();
				
				function loadImgList(){
					var html = '';
					for(var i=0; i<that.fileList.length; i++){
						var src = that.fileList[i].thumb;
						html += '<img name="'+that.fileList[i].id+'" index="'+i+'" src="'+src+'" height="60px"/> ';
					}
					$thumb.html(html);
					selectImg(currentIndex);
				}
				function bindEvents(){
					$thumb.click(function(event){
						var index = $(event.target).attr('index');
						selectImg(index);
					})
					.on('mousewheel', onMouseWheel)	//chrome, IE
					.on('wheel', onMouseWheel);		//firefox
					box.$container.find('.fore-viewer-left-bar').click(function(){
						newIndex = currentIndex==0 ? that.fileList.length-1 : currentIndex-1;
						selectImg(newIndex);
					});
					box.$container.find('.fore-viewer-right-bar').click(function(){
						newIndex = currentIndex>=that.fileList.length-1 ? 0 : currentIndex+1;
						selectImg(newIndex);
					});
					$center.click(function(event){
						if($(event.target).hasClass('fore-viewer-del-btn')){
							if(!that.readonly) delFile();
						}else{
							var src = $(event.target).attr('src')
							if(src) window.open(src);
						}
					})
					if(!that.readonly){
						$center.mouseenter(function(){
							$center.find('.fore-viewer-del-btn').fadeIn('fast');
						}).mouseleave(function(){
							$center.find('.fore-viewer-del-btn').fadeOut('fast');
						});
					}
				};
				function selectImg(index){
					if(!index && index!==0) return;
					if(!hasImg()) return;
					if(index>that.fileList.length-1)
						index = that.fileList.length-1;
					currentIndex = +index;
					var src = that.fileList[index].original;
					var w = that.fileList[index].width, h = that.fileList[index].height;
					if(w/h > 5/4){
						h = 500/w*h;
						w = 500;
					}else{
						w = 400/h*w;
						h = 400;
					}
					$('<img>').attr('src',src).attr('title','点击查看原图')
					.attr('index',index).attr('width',w).attr('height',h)
					.appendTo($center.empty()).load(function(){
						var w = this.offsetWidth, h = this.offsetHeight;
						if(w>500 || h>400)
							if(w/h > 5/4){
								h = 500/w*h;
								$(this).attr('width', 500).attr('height', h);
							}else{
								w = 400/h*w;
								$(this).attr('height', 400).attr('width', w);
							}
					});
					$center.append($('<div>',{'class':'fore-viewer-del-btn','title':'删除这张图片'}));
					$thumb.children().css('border','none 0px')
						.get(index).style.border = 'solid 2px red';
				}
				function hasImg(){
					if(that.fileList.length==0){ 
						$('<span>').css('color','#888').html('没有图片')
						.appendTo($center.empty());
						return false;
					}else
						return true;
				}
				function delFile(){
					mini.confirm("确实要删除这张图片吗？","确认操作",function(reply){
						if(reply == 'ok'){
							var data = that.fileList[currentIndex]
							$.ajax({
								url: that.delUrl,
								type: 'POST',
								data: data,
								success: function(){
									that.fileList.splice(currentIndex,1);
									loadImgList();
									that._rebuildValue();
								},
								error: function(){
									mini.alert('删除图片失败');
								}
							});
						}
					});
				}
				function onMouseWheel(event){
					var delta = event.originalEvent.deltaY 	//chrome,firefox
						|| -event.originalEvent.wheelDelta;	//IE
					if(delta>0){
						this.scrollLeft += 50;
					}else if(delta<0){
						this.scrollLeft -= 50;
					}
					return false;
				}
			}
		});
	},
	//根据文件列表重新为控件赋值，顺便重新载入控件预览缩略图
	_rebuildValue : function(){
		var value = [];
		for(var i=0; i<this.fileList.length; i++){
			value.push(this.fileList[i][this.repositoryIdField])
		}
		value = value.join(',');
		this._valueEl.value = value;
		this.loadPreviewImgs();
		this._dealBtns();
		this.validate();
	},
	//加载控件上的预览缩略图
	loadPreviewImgs : function(){
		var html = '';
		for(var i=0; i<this.fileList.length&&i<this.maxThumb; i++){
			var src = this.fileList[i].thumb;
			html += '<img name="'+this.fileList[i].id+'" index="'+i+'" ' 
				+'src="'+src+'" height="'+this.thumbHeight+'px"/> ';
		}
		$(this._listEl).html(html);
	},
	_dealBtns : function(){
		var l = this.fileList.length;
		if(this.maxFiles>0 && !this.readonly){
			if(l >= this.maxFiles){
				$(this._upBtnEl).hide();
			}else{
				$(this._upBtnEl).show();
			}
		}
		if(l <= this.maxThumb){
			$(this._viewBtnEl).hide();
		}else{
			$(this._viewBtnEl).show();
		}
	},
	//设置图像的id，并根据这些id到服务器获取各图像的具体信息，并载入图像
	setValue : function(value){
		if(!value){
			this.fileList = [];
			this._valueEl.value = '';
			return;
		}
		this._getFiles(value);
		this._valueEl.value = value;
	},
	getValue : function(){
		return this._valueEl.value;
	},
	/**
	 * 根据文件的id从服务器获取文件详细信息，服务器上已被删除的文件会被忽略
	 * @param ids 文件id的字符串，用逗号分隔
	 */
	_getFiles : function(ids){
		if(!ids)
			return;
		if(!this.repositoryTable || !this.repositoryIdField)
			return;
		var that = this;
		var where = this.repositoryIdField + " in ("+ids+")";
		function onSuccess(data){
			that.fileList = [];
			for(var i=0; i<data.length;i++)
				that._pushFileList(data[i]);
			that._rebuildValue();
		}
		mini.fsUtil.searchTableData(this.repositoryTable,onSuccess,where)
	},
	//将从服务器获取到的信息处理后放到文件列表里
	_pushFileList : function(data){
		var size = data.S_DESC.split('*');
		data.width = size[0];
		data.height = size[1];
		data.original = this.filePath+'/original/'+data.S_PATH;
		data.thumb = this.filePath+'/thumb/'+data.S_PATH;
		this.fileList.push(data);
	},
	__OnValidation : function(e){
		if(this.required && !this.fileList.length){
			e.isValid = false;
		}
	},
	_errorIconEl : null,
	getErrorIconEl : function() {
		if (!this._errorIconEl)
			this._errorIconEl = mini.append(this.el,
					'<span class="mini-errorIcon"></span>');
		return this._errorIconEl
	},
	_RemoveErrorIcon : function() {
		if (this._errorIconEl) {
			var A = this._errorIconEl;
			jQuery(A).remove()
		}
		this._errorIconEl = null
	},
	disable : function(){
		this.setReadonly(true);
	}
});
mini.regClass(mini.FsImgFile, "fsimgfile");

mini.openVideoBox = function(filePath){
	var title = '播放视频',
		width = 500,
		height = 300;
	if(typeof filePath === 'object'){
		var args = filePath;
		filePath = args.filePath;
		var title = args.title || title;
		var width = args.width || width;
		var height = args.height || height;
	}
	if(args && args.fileName)
		title = title + ' - ' + args.fileName;
	var videoUrl = mini.urls.videoFileRoot + filePath;
	var playerUrl = bootPATH + 'f4player/player.swf?v1.3.5';
	var skinUrl = bootPATH + 'f4player/skins/mySkin.swf';
	var html = '<embed type="application/x-shockwave-flash" src="'+playerUrl+'" ' +
			'width="'+width+'" height="'+height+'" flashvars="skin='+skinUrl+'&video='+videoUrl+'" ' +
			'allowScriptAccess="always" allowfullscreen="true" bgcolor="#000000"/>';
	mini.openIbox({
		title: title,
		requestType: 'html',
		html: html
	});
}
/**
 * #FsVideoFile
 * 视频上传控件
 */
mini.FsVideoFile = function() {
	this.fileList = {};
	mini.FsVideoFile.superclass.constructor.call(this);
};
mini.extend(mini.FsVideoFile, mini.FsFile,{
	uiCls : "mini-fs-videofile",
	uploadUrl : mini.urls.videoUploadUrl,
	downloadUrl : null,
	delUrl : mini.urls.videoDelUrl,
	title : '视频文件上传',
	extensions : "mp4,flv",
	maxSize : 200,
	videoBoxTitle: '播放视频',
	videoBoxWidth: 500,
	videoBoxHight: 300,
	getAttrs : function(A) {
		var C = mini.FsVideoFile.superclass.getAttrs.call(this, A), B = jQuery(A);
		mini._ParseString(A, C, [ "videoBoxTitle" ]);
		mini._ParseInt(A, C, [ "videoBoxWidth", "videoBoxHight" ]);
		return C
	},
	_initEvents : function() {
		mini.FsVideoFile.superclass._initEvents.call(this);
		this.on('download', this._onClickFile, this);
	},
	_onClickFile : function(e){
		var fileInfo = e.fileInfo;
		mini.openVideoBox({
			title: this.videoBoxTitle,
			width: this.videoBoxWidth,
			height: this.videoBoxHight,
			filePath: fileInfo.DOCUMENTPATH,
			fileName : fileInfo.DOCUMENTNAME
		});
	}
});
mini.regClass(mini.FsVideoFile, "fsvideofile");

/**
 * #FsMonthPicker
 * 属性 1.valueFormat	获取值的格式，默认yyyy-MM-dd (注：不是显示格式)
 *	  2.maxDate		允许选择的最大日期，可以是日期字符串（用减号分隔，如2013-05或2013-05-01）
 *					  或日期对象表达式（如new Date()），也可以是另一个MonthPicker或DatePicker的id
 *	  3.minDate		允许选择的最小日期，用法同maxDate。
 */
mini.MonthPicker = function() {
	mini.MonthPicker.superclass.constructor.call(this)
};
mini.extend(mini.MonthPicker, mini.TextBox, {
	uiCls : "mini-monthpicker",
	valueFormat : 'yyyy-MM-dd',
	getAttrs : function(A) {
		var C = mini.MonthPicker.superclass.getAttrs.call(this, A), B = jQuery(A);
		mini._ParseString(A, C, [ "valueFormat", "maxDate", "minDate" ]);
		return C
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var valueFormat = C.valueFormat;
		delete C.valueFormat;
		var maxDate = C.maxDate;
		delete C.maxDate;
		var minDate = C.minDate;
		delete C.minDate;
		mini.MonthPicker.superclass.set.call(this, C);
		if (!mini.isNull(valueFormat))
			this.setValueFormat(valueFormat);
		if (!mini.isNull(maxDate))
			this.setMaxDate(maxDate);
		if (!mini.isNull(minDate))
			this.setMinDate(minDate);
		return this;
	},
	setValueFormat : function(valueFormat){
		this.valueFormat = valueFormat;
	},
	getvalueFormat : function(){
		return this.valueFormat;
	},
	setMaxDate : function(date){
		var time = mini.parseDate(date);
		if(!time){
			this._maxDatePickerId = date;
			return;
		}
		this.maxDate = date;
		this._maxMonth = this._parseMonth(time);
	},
	getMaxDate : function(){
		return this.maxDate;
	},
	setMinDate : function(date){
		var time = mini.parseDate(date);
		if(!time){
			this._minDatePickerId = date;
			return;
		}
		this.minDate = date;
		this._minMonth = this._parseMonth(time);
	},
	getMinDate : function(){
		return this.minDate;
	},
	//将日期对象月以后的单位都设置为0
	_parseMonth : function(time){
		if(!time || !time instanceof Date)
			return null;
		var month = new Date(0)
		month.setFullYear(time.getFullYear());
		month.setMonth(time.getMonth());
		return month;
	},
	_initEvents : function() {
		mini.MonthPicker.superclass._initEvents.call(this)
		var that = this;
		mini._BindEvents(function() {
			var text = this.text;
			this.value = null;
			this.setValue(text);
		}, this);
		var $el = $(this._textEl)
		$el.click(function() {
			var text = $el.val();
			if (!text) {
				var date = new Date();
				text = date.getFullYear() + '-' + (date.getMonth() + 1);
			}
			var left = $el.offset().left + $el.outerWidth() + 5;
			var top = $el.offset().top;
			that._clear();
			if(that.$monthpicker){
				that._showPicker(left,top,text);
			}else{
				that._autoCreat(left, top, text);
			}
			$(document).on("click.monthpicker",function(){
				that._clear();
				$(this).off("click.monthpicker");
			})
			that.$monthpicker.click(function(){return false});
			that.$monthpicker.find(".monthpicker-month ul li a").click(function(){
				if($(this).hasClass('disabled')) return false;
				$(this).addClass("monthpicker-month-selected");
				$(this).parent().siblings().children("a").removeClass("monthpicker-month-selected");
				$el.val(function(){return that._getMonth();});
				$(document).trigger("click.monthpicker");
			})
			that.$monthpicker.find('.monthpicker-year select')
				.on('change',function(){
					that._renderRange(this.value, that.__month);
				});
			return false;
		});
		mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
	},
	//自动创建
	_autoCreat : function (left,top,text){
		//结构
		var monthpickerHtml;
		monthpickerHtml = '<div class="monthpicker">';
		monthpickerHtml += '<div class="monthpicker-container">';
		monthpickerHtml += '<div class="monthpicker-year"><select name="monthpicker-Year"></select></div>';
		monthpickerHtml += '<div class="monthpicker-month"><ul></ul></div>';
		monthpickerHtml += '</div>';
		this.$monthpicker = $(monthpickerHtml).appendTo('body');
		this.$monthpicker.css({'left':left,'top':top})
		for(var i=2000; i<=2040; i++){  
			this.$monthpicker.find(".monthpicker-year select").append("<option value="+ i +">"+ i +"年</option>")
		}  
		for(var i=1; i<=12; i++) {
			this.$monthpicker.find(".monthpicker-month ul")
				.append("<li><a href='javascript:void(0)' rel='"+ i +"'>"+ i +"月</a></li>")   
		}
		this._setMonth(text);
	},
	_showPicker : function(left, top, text){
		this.$monthpicker.css({'left':left,'top':top});
		this.$monthpicker.show();
		this._setMonth(text);
	},
	//读取
	_getMonth : function (){  
		var y = this.$monthpicker.find(".monthpicker-year select").val();
		var m = this.$monthpicker.find(".monthpicker-month ul li a.monthpicker-month-selected").attr("rel"); 
		if((m+'').length==1)
			m = '0' + m;
		var text = y + "-" + m; 
		this.setValue(text);
		this.fire('valuechanged', {value:this.value, text:this.text})
		return text;
	},
	//赋值
	_setMonth : function (date){ 
		var arr = date.split("-"); 
		var y = arr[0];
		var m = arr[1];
		this.$monthpicker.find(".monthpicker-year select").val(y);
		this.$monthpicker.find(".monthpicker-month ul li a").each(function(){
			if($(this).attr("rel") == parseInt(m)){
				$(this).addClass("monthpicker-month-selected");
			}
		}); 
		this._renderRange(y,m);
	},
	//将最大、最小日期范围外的月渲染为不可选择状态
	_renderRange : function(y, m){
		this.__month = m;
		var $ma = this.$monthpicker.find(".monthpicker-month ul li a");
		$ma.removeClass('disabled');
		var minMonth = this._minDatePickerId ? 
			this._parseMonth(mini.parseDate(mini.get(this._minDatePickerId).getValue())) :
			this._minMonth;
		var maxMonth = this._maxDatePickerId ? 
			this._parseMonth(mini.parseDate(mini.get(this._maxDatePickerId).getValue())) :
			this._maxMonth;
		if(minMonth){
			var miny = minMonth.getFullYear();
			var minm = minMonth.getMonth()+1;
			if(miny > y){
				$ma.addClass('disabled');
			}else if(miny == y){
				$ma.each(function(){
					if($(this).attr('rel') < minm)
						$(this).addClass('disabled');
				});
			}
		}
		if(maxMonth){
			var maxy = maxMonth.getFullYear();
			var maxm = maxMonth.getMonth()+1;
			if(maxy < y){
				$ma.addClass('disabled');
			}else if(maxy == y){
				$ma.each(function(){
					if($(this).attr('rel') > maxm)
						$(this).addClass('disabled');
				});
			}
		}
	},
	//清空
	_clear : function (){
		if(this.$monthpicker)
			this.$monthpicker.hide();
	},
	__OnInputKeyDown : function(e){
		e.preventDefault();
	},
	setValue : function(arg) {
		var date;
		var text = '';
		if(arg instanceof Date){
			date = arg;
		}else if(typeof arg == "string" && arg.length>=5){
			var split = [];
			split[0] = parseInt(arg.substr(0,4),10);
			split[1] = Math.abs(parseInt(arg.substr(4),10));
			if(split[1]>0 && split[1]<13 && split[0]>1949 && split[0]<2100){
				date = new Date(0);
				date.setYear(split[0]);
				date.setMonth(split[1]-1);
			}
		}else{
			console.warn('monthPicker设置的值"'+arg+'"无效');
		}
		this._valueEl.value = this.value = date;
		if(date){
			var m = date.getMonth()+1
			text = date.getFullYear() + '-' + (m>9 ? m : '0'+(m));
		}
		this._textEl.value = this.text = text;
	},
	getValue : function() {
		if(this.value && this.value instanceof Date)
			return mini.formatDate(this.value, this.valueFormat);
		return '';
	},
	getText : function(){
		return this.text;
	}
});
mini.regClass(mini.MonthPicker, "monthpicker");

/**
 * #FsUEditor
 * 富文本编辑器，集成百度编辑器，依赖UEditor相关js、css及图片文件
 */
mini.FsUEditor = function() {
	mini.FsUEditor.superclass.constructor.call(this);
};
mini.extend(mini.FsUEditor, mini.ValidatorBase,{
	uiCls : "mini-fs-ueditor",
	maxImageSize : 3072, //KB
	formField : true,
	getAttrs : function(A) {
		var C = mini.FsUEditor.superclass.getAttrs.call(this, A), B = jQuery(A);
		mini._ParseInt(A, C, [ "maxImageSize" ]);
		return C
	},
	// set : function(C) {
	// 	if (typeof C == "string")
	// 		return this;
	// 	var maxImageSize = C.maxImageSize;
	// 	delete C.maxImageSize;
	// 	mini.FsUEditor.superclass.set.call(this, C);
	// 	if (!mini.isNull(maxImageSize))
	// 		this.setMaxImageSize(maxImageSize);
	// 	return this;
	// },
	_create : function() {
		var html = '<div id="'+this._id+'"></div>';
		this.el = document.createElement("div");
		this.el.className = "mini-fs-ueditor";
		this.el.innerHTML = html;
		this._editorEl = this.el.firstChild;
	},
	_afterApply : function(){
		var that = this;
		//修正编辑器的宽度和高度
		if(window.UM){
			var width = $(this.el).css('width');
			var height = this.el.offsetHeight;
			$(this._editorEl).css('width', width);
			this.editor = window.UM.getEditor(this._id);
			toolbar = $(this.el).find('.edui-toolbar')[0];
			height = height - toolbar.offsetHeight - 2;
			$('#'+this._id).css('min-height', height);
			$('#'+this._id).css('height', height);
			this.editor.maxImageSize = this.maxImageSize;
		}else{
			setTimeout(function(){that._afterApply()},100);
		}
	},
	getValue : function(){
		return this.editor.getContent();
	},
	setValue : function(content){
		this.editor.setContent(content);
	},
	destroy : function(){
		this.editor.destroy();
		mini.FsUEditor.superclass.destroy.call(this);
	},
	disable : function(){
		this.editor.disable();
	},
	enable : function(){
		this.editor.enable();
	} 
});
mini.regClass(mini.FsUEditor, "ueditor");

/**
 * 获取LODOP控件对象
 * @return 如果成功获取则返回LODOP控件，否则返回null。
 */ 
mini.fsUtil.getLodop = function(){
	var lodop = navigator.appVersion.indexOf("MSIE") >= 0 ? 
			document.getElementById('LODOP_OB') :
			document.getElementById('LODOP_EM');
	if(!lodop || !lodop.VERSION || lodop.VERSION < "6.1.4.5")
		return null;
	return lodop;
}

// mini.fsUtil.previewPrintHTML = function(html, taskName){
// 	var lodop = mini.fsUtil.getLodop();
// 	if(!lodop)
// 		throw new Error('没有获取到LODOP控件');
// 	lodop.PRINT_INIT(taskName ? taskName : "打印任务");
// 	lodop.SET_PRINT_PAGESIZE (1, 0, 0,"A4");
// 	lodop.ADD_PRINT_HTM('25mm','30mm','150mm','247mm',html);
// 	lodop.PREVIEW();
// };

/**
 * #FsPrintButton
 * 具有打印功能的按钮
 */
mini.FsPrintButton = function() {
	mini.FsPrintButton.superclass.constructor.call(this)
};
mini.extend(mini.FsPrintButton, mini.Control,{
	uiCls : "mini-fs-printbutton",
	_clearBorder : false,
	method : "html",
	label : "打印",
	taskName : "打印任务",
	pageSize : "A4",
	pageDirection : 1,
	padding : [25,20,22,20],	//页边距，上，右，下，左
	pluginTip : '<span  style="text-decoration:underline;cusor:pointer;">安装打印控件</span>',
	getAttrs : function(A) {
		var B = mini.FsPrintButton.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ 
				"method", 		//打印方式 html|table|template
				"targetId", 	//目标元素的id（method为template时不可用）
				"label", 		//按钮上显示的文字
				"taskName", 	//打印任务名
				"pageSize", 	//纸张规格 A4|B5
				"pageDirection", //纸张方向 1:竖向 | 2:横向
				"padding"		//页边距，单位毫米。可以是一个值代表四个边距，也可以是“上,右,左,下”，也可以是“两边,上下”
		]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var padding = C.padding;
		delete C.padding;
		var pageDirection = C.pageDirection;
		delete C.pageDirection;
		var pageSize = C.pageSize;
		delete C.pageSize;
		mini.FsPrintButton.superclass.set.call(this, C);
		if (!mini.isNull(padding))
			this.setPadding(padding);
		if (!mini.isNull(pageDirection))
			this.setPageDirection(pageDirection);
		if (!mini.isNull(pageSize))
			this.setPageSize(pageSize);
		return this;
	},
	setPadding : function(padding){
		var paddings = padding.split(',');
		for(var i=0; i<paddings.length; i++){
			paddings[i] = parseInt(paddings[i]);
		}
		if(paddings.length===1){
			this.padding = [paddings[0],paddings[0],paddings[0],paddings[0]];
		}else if(paddings.length===2){
			this.padding = [paddings[1],paddings[0],paddings[1],paddings[0]];
		}else if(paddings.length===4){
			this.padding = paddings;
		}else{
			console.warn('mini.FsPrintButton页边距设置不正确，将使用默认配置：'+this.padding);
		}
	},
	setPageSize : function(pageSize){
		pageSize = pageSize.toUpperCase();
		if(mini.PAGESIZE[pageSize]){
			this.pageSize = pageSize;
		}else{
			console.warn('mini.FsPrintButton页面规格设置不正确，将使用默认配置:'+this.pageSize);
		}
	},
	setPageDirection : function(pageDirection){
		switch(pageDirection){
			case '1': this.pageDirection = 1; break;
			case '2': this.pageDirection = 2; break;
			default : break;
		}
	},
	_create : function() {
		this.el = document.createElement("button");
		this.el.className = "mini-fs-printbutton";
	},
	_afterApply : function(){
		this.el.innerHTML = this.label;
		this.lodop = mini.fsUtil.getLodop();
	},
	_initEvents : function() {
		mini._BindEvents(function() {
			mini.on(this.el, "click", this.__OnBtnClick, this);
		}, this)
	},
	__OnBtnClick : function(){
		if(!this.lodop){
			var url = navigator.userAgent.indexOf('Win64') >= 0 ?
					mini.urls.lodopPlugin64 : mini.urls.lodopPlugin32
			mini.openIbox({
				title : '请安装打印控件',
				requestType : 'html',
				html : '<div style="width:400px;">'+
						'<p>您需要安装打印控件才能使用打印功能，请' + 
						'<a href="'+url+'" style="color:red">点击这里</a>下载打印控件并安装。</p>' + 
						'<p>安装成功后需<a href="'+location.href+'" style="color:red">刷新</a>页面。</p>' +
						'<p style="color:#777">提示：打印控件只需安装一次，支持IE（包括以IE为内核的各种国产浏览器）、Chrome、火狐、Safari以及Opera等各种主流浏览器。<br/>' +
						(navigator.userAgent.indexOf('Firefox') == -1 ? '' :
							'对于火狐浏览器，如曾安装过Lodop旧版附件npActiveXPLugin，请在【工具】->【附加组件】->【扩展】中先卸它。</p>') +
						'</div>'
			});
		}else{
			this.__previewPrint();
		}
	},
	__previewPrint : function(){
		switch(this.method){
			case 'html' :
				this.__previewPrintHtml(false);
				break;
			case 'table' :
				this.__previewPrintHtml(true);
				break;
			case 'template' : 
				//TODO:模板方式打印
				break;
			default : 
				console.error('不支持的打印方式：'+this.method);
		}
	},
	__previewPrintHtml : function(isTable){
		var target = document.getElementById(this.targetId);
		var html = target ? target.outerHTML : '';
		this.lodop.PRINT_INIT(this.taskName);
		this.lodop.SET_PRINT_PAGESIZE (this.pageDirection, 0, 0, this.pageSize);
		var pageType = mini.PAGESIZE[this.pageSize]
		var width = ((this.pageDirection==1 ? pageType[0] : pageType[1])- this.padding[1] - this.padding[3]) + 'mm';
		var height = ((this.pageDirection==1 ? pageType[1] : pageType[0])- this.padding[0] - this.padding[2]) + 'mm';
		var left = this.padding[3]+'mm';
		var top = this.padding[0]+'mm'
		if(isTable)
			this.lodop.ADD_PRINT_TABLE(top, left, width, height, html);
		else
			this.lodop.ADD_PRINT_HTM(top, left, width, height, html);
		this.lodop.PREVIEW();
	}
});
mini.regClass(mini.FsPrintButton, "fsprintbutton");

/**
 * #FsOfficialdocOpener
 * 打开不同权限的公文编辑器的控件
 */
mini.FsOfficialdocOpener = function() {
	mini.FsOfficialdocOpener.superclass.constructor.call(this)
};
mini.extend(mini.FsOfficialdocOpener, mini.ValidatorBase,{
	uiCls : "mini-fs-officialdocopener",
	templateTalbe : "fs_od_template_file",
	editorUrl : mini.urls.officialDocEditor,
	formField : true,
	required : true,
	getAttrs : function(A) {
		var B = mini.FsOfficialdocOpener.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ 
				"mode", 		//打开编辑器的方式（权限） edit|view|audit
				"recordId",
				"userName",
				"templateTalbe"
		]);
		return B
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var mode = C.mode;
		delete C.mode;
		var recordId = C.recordId;
		delete C.recordId;
		mini.FsPrintButton.superclass.set.call(this, C);
		if (!mini.isNull(mode))
			this.setMode(mode);
		if (!mini.isNull(recordId))
			this.setRecordId(recordId);
		return this;
	},
	setMode : function(mode){
		this.mode = mode;
		$(this.el).children().hide();
		$(this['_'+this.mode+'BtnEl']).show();
	},
	getMode : function(){
		return this.mode;
	},
	setRecordId : function(id){
		this.recordId = id;
	},
	retRecordId : function(){
		return this.recordId;
	},
	setValue : function(value){
		this.recordId = value;
	},
	getValue : function(){
		return this.recordId;
	},
	_create : function() {
		this.el = document.createElement("span");
		this.el.className = "mini-fs-officialdocopener";
		var html = '<button style="display:none;">撰写</button>'+
			'<button style="display:none;">查看</button>'+
			'<button style="display:none;">审批</button>';
		this.el.innerHTML = html;
		this._editBtnEl = this.el.firstChild;
		this._viewBtnEl = this._editBtnEl.nextSibling;
		this._auditBtnEl = this._viewBtnEl.nextSibling;
	},
	_initEvents : function() {
		mini._BindEvents(function() {
			mini.on(this._editBtnEl, "click", this.__OnEditBtnClick, this);
			mini.on(this._viewBtnEl, "click", this.__OnViewBtnClick, this);
			mini.on(this._auditBtnEl, "click", this.__OnAuditBtnClick, this);
		}, this)
		this.on("validation", this.__OnValidation, this);
	},
	__OnEditBtnClick : function(){
		var that = this;
		if(!this.getValue()){
			var html = '请选择模板:'+
				'<input name="template" class="mini-fs-combobox" '+
				'textField="C_USERNAME" valueField="I_USERID" '+
				'showNullItem="true" allowInput="true" '+
				'emptyText="空白模板" nullItemText="空白模板"'+
				'tableName="'+this.templateTalbe+'" >'+
				'<button>确定</button>';
			var ibox = mini.openIbox({
				html: html,
				requestType: 'html',
				title: '选择模板',
				onload:function(){
					this.$content.find('button').click(function(){
						var template = ibox.$content.find('input[name=template]').val();
						var param = {editType:1, template:template};
						that.__openDocEditor(param);
						ibox.destroy();
					});
				}
			});
		}else{
			var param = {
				recordId: this.getValue(),
				editType: 1
			}
			this.__openDocEditor(param);
		}
	},
	__OnViewBtnClick : function(){
		if(!this.getValue()) 
			mini.alert('没有可查看的文档');
		else{
			var param = {
				recordId: this.getValue(),
				editType: 0
			}
			this.__openDocEditor(param);
		}
	},
	__OnAuditBtnClick : function(){
		if(!this.getValue()) 
			mini.alert('没有可查看的文档');
		else{
			var param = {
				recordId: this.getValue(),
				editType: 3
			}
			this.__openDocEditor(param);
		}
	},
	__openDocEditor : function(param){
		if(this.userName)
			param.userName = this.userName;
		var url = this.editorUrl;
		var param = (url.indexOf('?')>-1 ? '&' : '?') + $.param(param);
		url += param;
		var docWin = window.showModalDialog(url, this,
			'fullscreen:yes;resizable:yes;center:yes;help:no;'+
			'dialogHeight:600;dialogWidth:800');
	},
	_errorIconEl : null,
	__OnValidation : function(e){
		if(this.required && !this.getValue()){
			e.isValid = false;
		}
	},
	getErrorIconEl : function() {
		if (!this._errorIconEl)
			this._errorIconEl = mini.append(this.el,
					'<span class="mini-errorIcon"></span>');
		return this._errorIconEl
	},
	_RemoveErrorIcon : function() {
		if (this._errorIconEl) {
			var A = this._errorIconEl;
			jQuery(A).remove()
		}
		this._errorIconEl = null
	}
});
mini.regClass(mini.FsOfficialdocOpener, "fsofficialdocopener");

/**
 * #FsExcelImporter
 * 具有导入Excel文件数据功能的按钮
 */
mini.FsExcelImporter = function() {
	mini.FsExcelImporter.superclass.constructor.call(this)
};
mini.extend(mini.FsExcelImporter, mini.Control,{
	uiCls : "mini-fs-excelimporter",
	_clearBorder : false,
	label: '导入数据',
	buttonClass: '',
	getAttrs : function(A) {
		var B = mini.FsExcelImporter.superclass.getAttrs.call(this, A);
		mini._ParseString(A, B, [ 
				"tableName",
				"configFile",
				"defaultData",
				"label",
				"buttonClass"
		]);
		return B
	},
	_create : function() {
		this.el = document.createElement("div");
		this.el.className = "mini-fs-excelimporter";
		this._btnEl = 
			$('<button>').addClass('mini-fs-excelimporter-fakebtn')
			.addClass(this.buttonClass).html(this.label).appendTo(this.el)[0];
	},
	_afterApply : function(){
		var $btn = $(this._btnEl);
		$(this.el).css('height', $btn.outerHeight() + parseInt($btn.css('margin-top')) + parseInt($btn.css('margin-bottom')));
		$(this.el).css('width', $btn.outerWidth() + parseInt($btn.css('margin-left')) + parseInt($btn.css('margin-right')) + 1);
		var defaultData = window[this.defaultData];
		var formHtml = [
			'',
			'<form action="'+mini.urls.importExcel+'" method="post" enctype="multipart/form-data" class="fs-excelimporter-form">',
			'	<input type="hidden" name="tableName" value="'+this.tableName+'"/>',
			'	<input type="hidden" name="configFile" value="'+this.configFile+'"/>',
			typeof defaultData =='object' ? 
				'<input type="hidden" name="defaultData" value=\''+JSON.stringify(defaultData)+'\'/>' :
				'',
			'	<input class="file-chooser" type="file" name="file" accept=".xls"/>',
			'</form>',
			''
		];
		$('<iframe>')
		.addClass('fs-transparent')
		.attr({'src': bootPATH + 'mini/_blank.html',width:300,height:50,frameBorder:'0'})
		.css('border', 'none 0px')
		.load(function(){
			var win = this.contentWindow;
			if(win.result){//result为导入Excel后服务器返回的数据
				var r = win.result;
				var msg = '';
				if(r.success){
					if(r.successCount){
						msg = '成功导入'+ r.successCount + '条记录';
						if(r.errorCount){
							msg += '<br/>' + r.errorCount + '条记录未能导入';
							msg += '<br/>未能导入的行号：' + r.failedRows.join(',');
						}
					}else{
						msg = '没有导入任何记录';
					}
				}else{
					msg += '导入失败';
				}
				msg = msg + '<br/>' + r.msgs.join('<br/>');
				mini.alert(msg, '数据导入结果');
			}
			var body = win.document.body
			body.innerHTML = formHtml.join('');
			$(body).css('margin',0)
				.find('input[type=file]').on('change',function(){
					var value = this.value;
					if(!value){
						mini.alert('请选择要导入的xls格式文件');
						return false;
					}
					var parts = value.split('.');
					var suff = parts[parts.length-1].toLowerCase();
					if(suff !== 'xls'){
						mini.alert('只能上传xls格式的文件');
						return false;
					}
					$(body).find('form').submit();
				});
		})
		.appendTo($(this.el));
	}
});
mini.regClass(mini.FsExcelImporter, "fsexcelimporter");

/**
 * #FsImgSelect
 * 图片下拉选择
 */
mini.FsImgSelect = function() {
	this.fileList = {};
	mini.FsImgSelect.superclass.constructor.call(this);
};
mini.extend(mini.FsImgSelect, mini.ValidatorBase,{
	uiCls : "mini-fs-imgselect",
	name : "",
	label : "请选择...",
	formField : true,
	value : '',
	list : [],
	selected : null,
	getAttrs : function(A) {
		var C = mini.FsImgSelect.superclass.getAttrs.call(this, A), B = jQuery(A);
		mini._ParseString(A, C, [ "tableName", "whereString", "orderByString", 
				"valueField", "pathField", "basePath", "label" ]);
		return C
	},
	set : function(C) {
		if (typeof C == "string")
			return this;
		var label = C.label;
		delete C.label;
		var tableName = C.tableName;
		delete C.tableName;
		mini.FsImgSelect.superclass.set.call(this, C);
		if (!mini.isNull(label))
			this.setLabel(label);
		if (!mini.isNull(tableName))
			this.setTableName(tableName);
		return this;
	},
	
	_create : function() {
		this.el = document.createElement("div");
		this.el.className = "mini-fs-imgselect ddl-colorbox";
		var html = 
			'<div class="ddl-colorbox-selected">'+this.label+'</div>' +
			'<ul class="dll-colorbox-select-list">' +
			'</ul>';
		this.el.innerHTML = html;
		this._btnEl = this.el.firstChild;
		this._listEl = this.el.lastChild;
	},
	_initEvents : function() {
		var that = this;
		$(this._btnEl).click(function(){
			$(that._listEl).show();
			return false;
		})
		$(this._listEl).delegate("li", 'click', function(){
			that._selectImg(this);
		});
		$(document).on("click.colorbox",function(){
			$(that._listEl).hide();
		});
	},
	_selectImg : function(target){
		// var imgUrl = $(target).find('img').attr('src');
		// $(this._btnEl).text("").css("background", 'url('+imgUrl+')');
		// $(this._listEl).hide();
		var value = $(target).attr('value');
		this.setValue(value);
		this.fire('valuechanged',{value:this.value, selected:this.selected});
	},
	setLabel : function(label){
		this.label = label;
		if($(this._btnEl).html())
			$(this._btnEl).html(label);
	},
	getLabel : function(){
		return this.label;
	},
	setTableName : function(tableName){
		this.tableName = tableName;
		this.load();
	},
	getTableName : function(){
		return this.tableName;
	},
	load : function(){
		var that = this;
		if(!this.tableName){
			console.error('必须为FsImgSelect控件设置tableName属性！');
		}
		var param = {
			tableName: this.tableName,
			whereString: this.whereString || '',
			orderByString: this.orderByString || '',
			onSuccess: function(data){
				that.list = data;
				var html = [];
				for(var i=0; i<data.length; i++){
					var url = bootPATH + '../' + that.basePath + '/' + data[i][that.pathField];
					var value = data[i][that.valueField];
					html.push('<li value="'+value+'"><img src="'+url+'"/></li>');
				}
				$(that._listEl).html(html.join(''));
			}
		}
		mini.fsUtil.searchTableData(param);
	},
	setValue : function(value){
		var that = this;
		if(!value){
			this.value = '';
			return;
		}
		this.value = value;
		var index = this.list.indexOf(value, function(target, v){
			if(target[that.valueField] == value)
				return true;
		});
		if(index<0) return;
		this.selected = this.list[index];
		var url = bootPATH + '../' + this.basePath + '/' + this.selected[this.pathField];
		$(this._btnEl).text("").css("background", 'url('+url+')');
	},
	getValue : function(){
		return this.value;
	},
	__OnValidation : function(e){
			if(this.required && mini.fsUtil.isEmpty(this.fileList)){
				e.isValid = false;
			}
	},
	_errorIconEl : null,
	getErrorIconEl : function() {
		if (!this._errorIconEl)
			this._errorIconEl = mini.append(this.el,
					'<span class="mini-errorIcon"></span>');
		return this._errorIconEl
	},
	_RemoveErrorIcon : function() {
		if (this._errorIconEl) {
			var A = this._errorIconEl;
			jQuery(A).remove()
		}
		this._errorIconEl = null
	},
	disable : function(){
		//TODO:根据项目需求添加禁用功能
	}
});
mini.regClass(mini.FsImgSelect, "fsimgselect");