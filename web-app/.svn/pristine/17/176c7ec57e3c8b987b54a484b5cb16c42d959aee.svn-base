package com.forestar.upload;

import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.TimeoutException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.forestar.core.session.SessionFactory;
import com.forestar.joint.resouces.model.UserDataModel;
import com.forestar.safe.login.LoginBase;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.OutputStreamWriter;
import java.util.HashMap;
import java.util.List;
import javax.annotation.Resource;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class UploadController extends LoginBase {
	public final static String QUEUE_NAME="rabbitMQ.test7";
	@RequestMapping(value = "/getfile.do")
	public String  getFile(@RequestParam(value = "file", required = false) MultipartFile file,
			@RequestParam(value = "checkPoints", required = false) String checkPoints,HttpServletRequest request,HttpSession session){
		 JSONObject objec = new JSONObject();
		 JSONArray classObject=new JSONArray();
		 String str="";
		  if (!file.isEmpty()) { 
		      try { 
		        // 文件保存路径 
		        String filePath = request.getSession().getServletContext().getRealPath("/") + "upload/"
		            + file.getOriginalFilename(); 
		        String filePath1= filePath.replaceAll("\\\\", "/");
		        // 转存文件 
		        file.transferTo(new File(filePath1));
		        objec.put("filePath", filePath1);
		        UUID uuid = UUID.randomUUID();
		        objec.put("uuid", uuid);
		        //用户id
		        UserDataModel userEntity = (UserDataModel)SessionFactory.getSession().getObject("UserEntity");
		        if(null!=userEntity){
		        	String userId=userEntity.getUserid();
			        objec.put("userId", userId);
		        }else{
		        	objec.put("userId", 4);
		        }
		        if(checkPoints.length()>0&&checkPoints!=null ){
		        	 classObject.add(checkPoints);
//		        	String temp=checkPoints
					  objec.put("controlPoints", classObject);
				  }
		        String str_=objec.toString().replaceAll("\\\\", "");
		        String str1=str_.replace("[\"{", "[{");
		        str=str1.replaceAll("\"]", "]");
		        System.out.println(str);
//		        Producer(str);
		      } catch (Exception e) { 
		        e.printStackTrace(); 
		      } 
		      
		  }
		  return "/index";
	}
	public  void Producer(String string) throws IOException, TimeoutException {
	        //创建连接工厂
	        ConnectionFactory factory = new ConnectionFactory();
	        //设置RabbitMQ相关信息
	        factory.setHost("192.168.1.114");
	        factory.setUsername("dlwy");
	        factory.setPassword("dlwy");	
	        factory.setPort(5672);
	        //创建一个新的连接
	        Connection connection = factory.newConnection();
	        //创建一个通道
	        Channel channel = connection.createChannel();
	        //  声明一个队列        
	        channel.queueDeclare(QUEUE_NAME, false, false, false, null);
	        String message = string;
	        System.out.println("Producer Send +'" + message + "'");
	        //发送消息到队列中
	        channel.basicPublish("", QUEUE_NAME, null, message.getBytes("UTF-8"));
//	        System.out.println("Producer Send +'" + message + "'");
	        //关闭通道和连接
	        channel.close();
	        connection.close();
	    }
}
