package com.forestar.report.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.forestar.core.exception.ServiceException;
import com.forestar.data.general.QueryFilter;
import com.forestar.data.general.RowBase;
import com.forestar.data.service.BaseService;

@Controller
public class iReportController {
	@Resource(name = "baseService")
	public BaseService baseService;
	
	@RequestMapping(value = "/ReportData.web")
	@ResponseBody
	public Map ReportData(HttpServletRequest request, HttpServletResponse response,String TableName,String unitName,List<RowBase> dataLists,Map<String,Map<String,String>> codeMaps,Map<String,Map<String,String>> ptCodeMaps, Map<String,String> zqCodeMap,Map<String,String> rowSpans,Map<String,String> colSpans,Map<String,String> fieldSorts,Boolean isHeads,String hzfiled) throws ServiceException{
		Map map=getReportHtml(TableName,unitName,dataLists, codeMaps, zqCodeMap,ptCodeMaps, rowSpans, colSpans, fieldSorts,isHeads,hzfiled);
		return map;
	}
	public Map getReportHtml(String TableName,String unitName,List<RowBase> dataLists,Map<String,Map<String,String>> codeMaps, Map<String,String> zqCodeMap,Map<String,Map<String,String>> ptCodeMaps,Map<String,String> rowSpans,Map<String,String> colSpans,Map<String,String> fieldSorts,Boolean isHeads,String hzfiled) throws ServiceException{
		long startTime=new Date().getTime();
		long getDataStartTime=0;
		long getDataEndTime=0;
		long irStartTime=0;
		long irEndTime=0;
		/*System.out.println("开始时间："+startTime+"毫秒");*/
		List<RowBase> dataList=dataLists;
		Map<String,Map<String,String>> codeMap=codeMaps;
		Map<String,Map<String,String>> ptCodeMap=ptCodeMaps;
		Map<String,String> rowSpan=rowSpans;
		Map<String,String> colSpan=colSpans;
		Map<String,String> fieldSort=fieldSorts;
		Boolean isHead = isHeads;
		String html="";
		if(hzfiled==null){
			hzfiled="XBMJ";
		}
		if(fieldSort==null){
			fieldSort=new LinkedHashMap<String,String>();
			fieldSort.put("SQS","市");
			fieldSort.put("XSQ","县");
			fieldSort.put("XZC","乡");
			fieldSort.put("CGQ","村");
			fieldSort.put(hzfiled,"面积");
			fieldSort.put("LDZLDJ","林地质量等级");
			fieldSort.put("QY","起源");
			fieldSort.put("DMLX","地貌类型");
		}
		if(rowSpan==null){
			rowSpan=new LinkedHashMap<String,String>();
			rowSpan.put("SQS","市");
			rowSpan.put("XSQ","县");
			rowSpan.put("XZC","乡");
			rowSpan.put("CGQ","村");
		}
		if(colSpan==null){
			colSpan=new LinkedHashMap<String,String>();
			colSpan.put("LDZLDJ","林地质量等级");
			colSpan.put("QY","起源");
			colSpan.put("DMLX","地貌类型");
		}
//		if(zqCodeMap==null){
//			zqCodeMap=new HashMap<String,String>();
//			QueryFilter zqf= new QueryFilter();
//			String[] kjZqArr = "3502,".split(",");
//			String whereStr = "";
//			for(int m = 0;m<kjZqArr.length;m++){
//				if(m==kjZqArr.length-1){
//					whereStr+="C_ZQCODE like '"+kjZqArr[m]+"%'";
//				}else{
//					whereStr+="C_ZQCODE like '"+kjZqArr[m]+"%' or ";
//				}
//			}
//			zqf.setWhereString("1=1");
//			zqf.setOrderByString("C_ZQCODE,C_ZQNAME");
//			zqf.setSelectFields("C_ZQCODE,C_ZQNAME");
//			List<RowBase> zqcodeList=baseService.getDataTable("FL_SYS_ZQSJZD", zqf);
//			for(int j = 0;j < zqcodeList.size();j++){
//				Map OriginalObjects = zqcodeList.get(j).getOriginalObjects();
//				zqCodeMap.put(OriginalObjects.get("C_ZQCODE").toString(), OriginalObjects.get("C_ZQNAME").toString());
//			}
//			System.out.println(zqCodeMap);
//		}
		if(dataList==null){
			QueryFilter qf= new QueryFilter();
//			qf.setWhereString("OBJECTID<=100");
//			qf.setWhereString("SQS='350700'");
			qf.setWhereString("SQS='350600'");
			String rows=rowSpan.keySet().toString();
			rows=rows.substring(1,rows.length()-1).replaceAll(" ", "");
			qf.setOrderByString(rows);
			String fileds=fieldSort.keySet().toString();
			fileds=fileds.substring(1,fileds.length()-1).replaceAll(" ", "");
			qf.setSelectFields(fileds);
			getDataStartTime=new Date().getTime();
			/*System.out.println("获取数据开始时间："+getDataStartTime+"毫秒");*/
			dataList=baseService.getDataTable("ZYXB_PY", qf);
			getDataEndTime=new Date().getTime();
			/*System.out.println("获取数据结束时间："+getDataEndTime+"毫秒");*/
		}
		if(codeMap==null){
			String instr="";
			for(String code : colSpan.keySet()){
				instr+=colSpan.get(code)+"','";
			}
			instr=instr.substring(0,instr.length()-3);
			codeMap =new LinkedHashMap<String,Map<String,String>>();
			QueryFilter qf= new QueryFilter();
//			qf.setWhereString("C_DOMAINNAME in ('"+instr+"') and L_JB>1");
//			qf.setOrderByString("C_DOMAINNAME,C_CODE");
			qf.setWhereString("C_DOMAINNAME in ('"+instr+"') and I_JB>0");
			qf.setOrderByString("C_DESCRIBE,C_CODE");
			List<RowBase> codeList=baseService.getDataTable("FL_SYS_ZYSJZD", qf);
			if(codeList.size()!=0){
				for(String code : colSpan.keySet()){
					codeMap=getMap(codeMap,codeList,code,colSpan.get(code));
				}
				irStartTime=new Date().getTime();
				/*System.out.println("拼装报表开始时间："+irStartTime+"毫秒");*/
				html=getTempReportDataFn(TableName,unitName,dataList, codeMap, zqCodeMap,ptCodeMap, rowSpan,colSpan, fieldSort,isHead,hzfiled);
				irEndTime=new Date().getTime();
				/*System.out.println("拼装报表开始时间："+irEndTime+"毫秒");*/
			}
		}else{
			html=getTempReportDataFn(TableName,unitName,dataList, codeMap, zqCodeMap,ptCodeMap, rowSpan,colSpan, fieldSort,isHead,hzfiled);
		}
		
		long endTime=new Date().getTime();
		long time=endTime-startTime;
		/*html+="<span>开始时间："+startTime+"毫秒</span></br>";
		html+="<span>获取数据开始时间："+getDataStartTime+"毫秒</span></br>";
		html+="<span>获取数据结束时间："+getDataEndTime+"毫秒</span></br>";
		html+="<span>获取数据用时："+(getDataEndTime-getDataStartTime)+"毫秒</span></br>";
		html+="<span>拼装报表开始时间："+irStartTime+"毫秒</span></br>";
		html+="<span>拼装报表开始时间："+irEndTime+"毫秒</span></br>";
		html+="<span>拼装报表用时："+(irEndTime-irStartTime)+"毫秒</span></br>";
		html+="<span>结束时间："+endTime+"毫秒</span></br>";
		html+="<span>运行时间："+time+"毫秒</span>";*/
		Map map=new LinkedHashMap();
		map.put("html", html);
		map.put("start", startTime);
		map.put("endTime", endTime);
		map.put("time", time);
		/*System.out.println("结束时间："+endTime+"毫秒");
		System.out.println("运行时间："+time+"毫秒");*/
		return map;
	}
	
	public Map<String,Map<String,String>> getMap(Map<String,Map<String,String>> coedmap,List<RowBase> codeList,String code,String codeName){
		Map map=new LinkedHashMap<String,String>();
		for(RowBase row : codeList){
			Map temp=row.getOriginalObjects();
//			Object key=temp.get("C_CODE");
//			Object value=temp.get("C_NAME");
//			Object dname=temp.get("C_DOMAINNAME");
			Object key=temp.get("C_CODE");
			Object value=temp.get("C_DESCRIBE");
			Object dname=temp.get("C_DOMAINNAME");
			if(dname.equals(codeName)){
				map.put(key, value);
			}
		}
		coedmap.put(code, map);
		return coedmap;
	}
	
	/**
	 * 请求报表的数据成功
	 */
	public String getTempReportDataFn(String TableName,String unitName,List<RowBase> dataList,Map<String,Map<String,String>> codeMap,
			Map<String,String> zqCodeMap,
			Map<String,Map<String,String>> ptCodeMap,
			Map<String,String> rowSpan,
			Map<String,String> colSpan,
			Map<String,String> fieldSort,Boolean isHead,String hzfiled) {
		if (null == dataList || dataList.size()==0) {
			return "没有符合条件的报表数据，请检查查询条件！";
		}
		//列合并字段和字段顺序
		String row=rowSpan.keySet().toString();
		String [] rowumnNames=row.substring(1,row.length()-1).split(", ");
		String [] rowumnNames1=row.substring(1,row.length()-1).replace(", C_XIAOBAN", "").split(", ");
		//行合并字段和字段顺序
		String colName=colSpan.values().toString();
		String columnNames=colName.substring(1,colName.length()-1);

		String colkey=colSpan.keySet().toString();
		String colNames=colkey.substring(1,colkey.length()-1);

		//报表字段和字段顺序
		String cols=fieldSort.keySet().toString();
		String [] fieldSorts=cols.substring(1,cols.length()-1).split(", ");

		String SortNames=fieldSort.values().toString();
		String [] NameSorts=SortNames.substring(1,SortNames.length()-1).split(", ");
		
		int sumColSpan =cols.substring(1,cols.length()-1).split(",").length-(cols.substring(1,cols.length()-1).replace(row.toString().substring(1,row.length()-1), "")).split(", ").length;
		IReport ir= new IReport();
		
		String headHtml="";
		String html = "";
		//获取排序字段
		ir.getFiled(fieldSorts,NameSorts,columnNames,codeMap);
		//统计数据
		List<Map<String,String>> TotalList= ir.TotalRow(dataList,rowumnNames,colNames,zqCodeMap,hzfiled,ptCodeMap);
		//拼装表头
		headHtml=ir.dplitJointHead(TableName,unitName,dataList, fieldSorts,NameSorts,columnNames,codeMap);
		//获取合并行列
		int[][] crSpan=ir.mergeBody(TotalList,rowumnNames1);
		//拼装表体
		String bodyHtml=ir.dplitJointBody(TotalList, fieldSorts,crSpan,sumColSpan);
		
		if(!isHead){
			html="<table>"+headHtml+bodyHtml+"</table>";
		}else{
			html=bodyHtml;
		}
		//System.out.println(html);
		return html;
	}
}
